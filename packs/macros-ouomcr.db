{"_id":"58xt9wlvgVoPvMdC","name":"ScorchingRayMacro","permission":{"default":0,"cDoi3U5MyHp0uBW1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.QBlP9mn8SWHAmnHx"}},"scope":"global","command":"const lastArg = args[args.length - 1];\nlet item = lastArg.item\n\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\nlet itemName = item.name.toLowerCase();\nlet itemSource = item.data.source.toLowerCase();\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nlet type01 = \"01\";\nlet tint = \"Regular\";\nlet color = \"Orange\";\nlet tmColor = 0xF1721A;\n\nswitch (true) {\n    case (itemSource.includes(\"blue\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Blue\";\n        tmColor = 0xBBDDEE;\n        break;\n    case (itemSource.includes(\"green\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Green\";\n        tmColor = 0x9FE04C;\n        break;\n    case (itemSource.includes(\"orange\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Orange\";\n        tmColor = 0xF1721A;\n        break;\n    case (itemSource.includes(\"purple\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Purple\";\n        tmColor = 0xA953FF;\n        break;\n    case (itemSource.includes(\"red\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Red\";\n        tmColor = 0xFF1C34;\n        break;\n    case (itemSource.includes(\"yellow\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Yellow\";\n        tmColor = 0xFFF11C;\n        break;\n}\n\n//\n// Token Magic FX Definitions for passing inside the switch\n// You can modify these, or add new ones based off other Token Magic FX animations\n// \nlet letitBurn =\n    [{\n        filterType: \"xfire\",\n        filterId: \"myColdXFire\",\n        time: 0,\n        // Can change color in hex format\n        color: tmColor,\n        blend: 1,\n        amplitude: 1,\n        dispersion: 0,\n        chromatic: false,\n        scaleX: 1,\n        scaleY: 1,\n        inlay: false,\n        autoDestroy: true,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: -0.0015,\n                animType: \"move\"\n            }\n\n        }\n    }];\n\nasync function Cast() {\n    //            change to lastArg.hitTargets to only play animations on hit using Midi Workflow option\n    var myStringArray = lastArg.targets;\n    var arrayLength = myStringArray.length;\n    for (var i = 0; i < arrayLength; i++) {\n\n        let mainTargetdata = myStringArray[i];\n        let mainTarget = canvas.tokens.get(mainTargetdata._id)\n        let myToken = canvas.tokens.get(lastArg.tokenId) || canvas.tokens.placeables.find(token => token.actor.items.get(item._id) != null)\n\n        // Defines a new Ray between the caster and target\n        let ray = new Ray(myToken.center, mainTarget.center);\n        // Determines the angle\n        let anDeg = -(ray.angle * 57.3);\n        // assigns the distance of the newly created Ray to anDist\n        let anDist = ray.distance;\n\n        // Base file path for this animation\n        let file = \"modules/jb2a_patreon/Library/2nd_Level/Scorching_Ray/\";\n\n\n        let anFile = `${file}ScorchingRay_${type01}_${tint}_${color}_30ft_1600x400.webm`;\n        let anFileSize = 600;\n        let anchorX = 0.125;\n        switch (true) {\n            case (anDist <= 1600):\n                anFileSize = 1200;\n                anFile = `${file}ScorchingRay_${type01}_${tint}_${color}_30ft_1600x400.webm`;\n                anchorX = 0.125;\n                break;\n            case (anDist <= 4000):\n                anFileSize = 3600;\n                anFile = `${file}ScorchingRay_${type01}_${tint}_${color}_90ft_4000x400.webm`;\n                anchorX = 0.05;\n                break;\n            default:\n                anFileSize = 2400;\n                anFile = `${file}ScorchingRay_${type01}_${tint}_${color}_60ft_2800x400.webm`;\n                anchorX = 0.071;\n                break;\n        }\n\n        let anScale = anDist / anFileSize;\n        let anScaleY = anDist <= 600 ? 0.6 : anScale;\n\n        let spellAnim =\n        {\n            file: anFile,\n            position: myToken.center,\n            anchor: {\n                x: anchorX,\n                y: 0.5\n            },\n            angle: anDeg,\n            scale: {\n                x: anScale,\n                y: anScaleY\n            }\n        };\n        canvas.fxmaster.playVideo(spellAnim);\n        game.socket.emit('module.fxmaster', spellAnim);\n\n        // Change the path here to a sound file you would like to use\n        let soundFile = `example/sound/file.mp3`;\n        switch (true) {\n            case (soundFile != \"example/sound/file.mp3\"):\n                AudioHelper.play({ src: soundFile, volume: 1.0, autoplay: true, loop: false }, true);\n                break;\n        }\n\n    }\n}\nCast()\n\n// Activates the Token Magic FX after a delay\nawait wait(500);\nTokenMagic.addUpdateFiltersOnTargeted(letitBurn);\nawait wait(2000);\nTokenMagic.deleteFiltersOnTargeted();","author":"cDoi3U5MyHp0uBW1","img":"modules/jb2a_patreon/Library/2nd_Level/Scorching_Ray/ScorchingRay_01_Regular_Orange_Thumb.webp","actorIds":[]}
{"_id":"81yeCW54UnkztORO","name":"WitchBoltMacro","permission":{"default":0,"cDoi3U5MyHp0uBW1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.euhQhz0J0wVN5UJm"}},"scope":"global","command":"const lastArg = args[args.length - 1];\nlet item = lastArg.item\n\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\nlet itemName = item.name.toLowerCase();\nlet itemSource = item.data.source.toLowerCase();\n\nfunction itemIncludes(test) {\n    if (itemSource.includes(test) || itemName.includes(test)) return true;\n}\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nlet type01 = \"01\";\nlet tint = \"Regular\";\nlet color = \"Blue\";\nlet tmColor = 0x053ABD;\n\nswitch (true) {\n    case (itemIncludes(\"darkgreen\")):\n        type01 = \"01\";\n        tint = \"Dark\";\n        color = \"Green\";\n        tmColor = 0x187C00;\n        break;\n    case (itemIncludes(\"green\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Green\";\n        tmColor = 0x2CE600;\n        break;\n    case (itemIncludes(\"darkred\")):\n        type01 = \"01\";\n        tint = \"Dark\";\n        color = \"Red\";\n        tmColor = 0x8E0000;\n        break;\n    case (itemIncludes(\"red\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Red\";\n        tmColor = 0xFF0000;\n        break;\n    case (itemIncludes(\"darkpurple\")):\n        type01 = \"01\";\n        tint = \"Dark\";\n        color = \"Purple\";\n        tmColor = 0xAE00AE;\n        break;\n    case (itemIncludes(\"blue\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Blue\";\n        tmColor = 0x053ABD;\n        break;\n    case (itemIncludes(\"yellow\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Yellow\";\n        tmColor = 0xD8E300;\n        break;\n}\n\n//\n// Token Magic FX Definitions for passing inside the switch\n// You can modify these, or add new ones based off other Token Magic FX animations\n// \nlet Electric =\n    [{\n        filterType: \"electric\",\n        // Can change color in hex format\n        color: tmColor,\n        time: 0,\n        blend: 2,\n        intensity: 5,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: 0.0020,\n                animType: \"move\"\n            }\n\n        }\n    }];\n\nasync function Cast() {\n    //            change to lastArg.hitTargets to only play animations on hit using Midi Workflow option\n    var myStringArray = lastArg.targets;\n    var arrayLength = myStringArray.length;\n    for (var i = 0; i < arrayLength; i++) {\n\n        let mainTargetdata = myStringArray[i];\n        let mainTarget = canvas.tokens.get(mainTargetdata._id)\n        let myToken = canvas.tokens.get(lastArg.tokenId) || canvas.tokens.placeables.find(token => token.actor.items.get(item._id) != null)\n\n        // Defines a new Ray between the caster and target\n        let ray = new Ray(myToken.center, mainTarget.center);\n        // Determines the angle\n        let anDeg = -(ray.angle * 57.3);\n        // assigns the distance of the newly created Ray to anDist\n        let anDist = ray.distance;\n\n        // Base file path for this animation\n        let file = \"modules/jb2a_patreon/Library/1st_Level/Witch_Bolt/\";\n\n\n        let anFile = `${file}WitchBolt_${type01}_${tint}_${color}_15ft_1000x400.webm`;\n        let anFileSize = 600;\n        let anchorX = 0.2;\n        switch (true) {\n            case (anDist <= 600):\n                anFileSize = 600;\n                anFile = `${file}WitchBolt_${type01}_${tint}_${color}_15ft_1000x400.webm`;\n                anchorX = 0.2;\n                break;\n            default:\n                anFileSize = 1200;\n                anFile = `${file}WitchBolt_${type01}_${tint}_${color}_30ft_1600x400.webm`;\n                anchorX = 0.125;\n                break;\n        }\n\n        let anScale = anDist / anFileSize;\n        let anScaleY = anDist <= 600 ? 0.6 : anScale;\n\n        let spellAnim =\n        {\n            file: anFile,\n            position: myToken.center,\n            anchor: {\n                x: anchorX,\n                y: 0.5\n            },\n            angle: anDeg,\n            scale: {\n                x: anScale,\n                y: anScaleY\n            }\n        };\n\n\n        async function SpellAnimation(number) {\n\n            let x = number;\n            let interval = 4000;\n            for (var i = 0; i < x; i++) {\n                setTimeout(function () {\n                    canvas.fxmaster.playVideo(spellAnim);\n                    game.socket.emit('module.fxmaster', spellAnim);\n//               Add your sound file in the line below\n                    let soundFile = `example/sound/file.mp3`;\n                    switch (true) {\n                        case (soundFile != \"example/sound/file.mp3\"):\n                            AudioHelper.play({ src: soundFile, volume: 1.0, autoplay: true, loop: false }, true);\n                            break;\n                    }\n\n                }, i * interval);\n            }\n            await wait(interval * x);\n            // Removes TMFX after animation loops      \n            TokenMagic.deleteFiltersOnTargeted();\n        }\n        // The number in parenthesis sets the number of times the animation loops\n        SpellAnimation(1)\n\n        canvas.fxmaster.playVideo(spellAnim);\n        game.socket.emit('module.fxmaster', spellAnim);\n\n    }\n}\nCast()\n// Activates the Token Magic FX after a delay\nTokenMagic.addUpdateFiltersOnTargeted(Electric);","author":"cDoi3U5MyHp0uBW1","img":"modules/jb2a_patreon/Library/1st_Level/Witch_Bolt/WitchBolt_01_Dark_Purple_Thumb.webp","actorIds":[]}
{"_id":"9NXEm0kdZ5Yp6vTt","name":"AllRangedWeaponsMacro","permission":{"default":0,"cDoi3U5MyHp0uBW1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.PANA5qyByZ1DW5Eo"}},"scope":"global","command":"// Requires at least 1 target to play the animation\nif (game.user.targets.size == 0) ui.notifications.error('You must target at least one token');\n// Requires FX Master Module\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\nconst lastArg = args[args.length - 1];\nlet item = lastArg.item;\n\nlet itemName = item.name.toLowerCase();\nlet itemSource = item.data.source.toLowerCase();\n\nfunction itemIncludes(test) {\n    if (itemSource.includes(test) || itemName.includes(test)) return true;\n}\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nlet type01 = \"01\";\nlet tint = \"Regular\";\nlet color = \"White\";\nlet tmColor = 0xFF9309;\nlet tmDelay;\n\nswitch (true) {\n    case (itemIncludes(\"white\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"White\";\n        break;\n    case (itemIncludes(\"blue\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Blue\";\n        tmColor = 0x0075B0;\n        break;\n    case (itemIncludes(\"green\")):\n        type01 = \"01\";\n        switch (true) {\n            case (itemIncludes(\"arrow\")):\n                tint = \"Glowing\";\n                break;\n            default:\n                tint = \"Regular\"\n                break;\n        }\n        color = \"Green\";\n        tmColor = 0x0EB400;\n        break;\n    case (itemIncludes(\"orange\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Orange\";\n        tmColor = 0xBF6E00;\n        break;\n    case (itemIncludes(\"red\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Red\";\n        tmColor = 0xBF0000;\n        break;\n\n}\n\nlet Poison =\n    [{\n        filterType: \"field\",\n        filterId: \"mySmokeField\",\n        shieldType: 3,\n        gridPadding: 1,\n        color: 0x60CC70,\n        time: 0,\n        blend: 0,\n        intensity: 0.9,\n        lightAlpha: 1,\n        lightSize: 0.7,\n        scale: 1,\n        radius: 1,\n        chromatic: false,\n        zOrder: 512,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: 0.0015,\n                animType: \"move\"\n            }\n        }\n    }];\n\nlet colorWave =\n    [{\n        filterType: \"wave\",\n        filterId: \"myShockwave\",\n        time: 0,\n        strength: 0.03,\n        frequency: 15,\n        maxIntensity: 4.0,\n        minIntensity: 0.5,\n        padding: 25,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: 0.0180,\n                animType: \"move\",\n            }\n        }\n    },\n    {\n        filterType: \"xfire\",\n        filterId: \"myColdXFire\",\n        time: 0,\n        color: tmColor,\n        blend: 1,\n        amplitude: 1,\n        dispersion: 0,\n        chromatic: false,\n        scaleX: 1,\n        scaleY: 1,\n        inlay: false,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: -0.0015,\n                animType: \"move\"\n            }\n        }\n    }];\n\nlet BloodyHitStutter =\n    [{\n        filterType: \"images\",\n        filterId: \"myMirrorImages\",\n        time: 0,\n        nbImage: 2,\n        alphaImg: 1.0,\n        alphaChr: 0.0,\n        autoDestroy: true,\n        blend: 4,\n        ampX: 0.03,\n        ampY: 0.03,\n        zOrder: 20,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: 0.070,\n                animType: \"move\",\n                loopDuration: 200,\n                loops: 2\n            },\n            anchorX:\n            {\n                animType: \"chaoticOscillation\",\n                loopDuration: 100,\n                val1: 0.40,\n                val2: 0.60,\n                loops: 4\n            }\n        }\n    },\n    {\n        filterType: \"splash\",\n        filterId: \"mySplash\",\n        rank: 5,\n        color: 0x990505,\n        padding: 80,\n        time: Math.random() * 1000,\n        seed: Math.random(),\n        splashFactor: 1,\n        spread: 0.4,\n        blend: 1,\n        dimX: 1,\n        dimY: 1,\n        cut: false,\n        textureAlphaBlend: true,\n        anchorX: 0.32 + (Math.random() * 0.36),\n        anchorY: 0.32 + (Math.random() * 0.36)\n    }];\n\nlet BloodSplat =\n    [{\n        filterType: \"splash\",\n        filterId: \"mySplash\",\n        rank: 5,\n        color: 0x990505,\n        padding: 80,\n        time: Math.random() * 1000,\n        seed: Math.random(),\n        splashFactor: 1,\n        spread: 0.4,\n        blend: 1,\n        dimX: 1,\n        dimY: 1,\n        cut: false,\n        textureAlphaBlend: true,\n        anchorX: 0.32 + (Math.random() * 0.36),\n        anchorY: 0.32 + (Math.random() * 0.36)\n    }];\n\nlet tmMacro = BloodSplat;\n\nswitch (true) {\n    case (itemIncludes(\"white\")):\n        tmMacro = BloodSplat;\n        break;\n}\n\nlet path01 = \"Dagger02\";\nlet size = \"400\";\nlet Delay01 = 900;\nlet Delay02 = 900;\nlet Delay03 = 900;\nlet soundFile = `example/sound/file.mp3`;\nswitch (true) {\n    case (itemIncludes(\"dagger02\")):\n        path01 = \"Dagger02\";\n        Delay01 = 900;\n        Delay02 = 900;\n        Delay03 = 900;\n        soundFile = `example/sound/file.mp3`;\n        break;\n    case (itemIncludes(\"dagger\")):\n        path01 = \"Dagger01\";\n        Delay01 = 900;\n        Delay02 = 900;\n        Delay03 = 900;\n        soundFile = `example/sound/file.mp3`;\n        break;\n    case (itemIncludes(\"hammer\")):\n        path01 = \"Hammer01\";\n        tmMacro = BloodyHitStutter;\n        Delay01 = 600;\n        Delay02 = 800;\n        Delay03 = 800;\n        soundFile = `example/sound/file.mp3`;\n        break;\n    case (itemIncludes(\"handaxe\")):\n        path01 = \"HandAxe01\";\n        Delay01 = 600;\n        Delay02 = 900;\n        Delay03 = 900;\n        soundFile = `example/sound/file.mp3`;\n        break;\n    case (itemIncludes(\"kunai\")):\n        path01 = \"Kunai01\";\n        Delay01 = 600;\n        Delay02 = 600;\n        Delay03 = 600;\n        soundFile = `example/sound/file.mp3`;\n        break;\n    case (itemIncludes(\"arrow\")):\n        path01 = \"Arrow01\";\n        switch (true) {\n            case (itemIncludes(\"green\")):\n                tmMacro = Poison;\n                break;\n        }\n        Delay01 = 750;\n        Delay02 = 1100;\n        Delay03 = 900;\n        soundFile = `example/sound/file.mp3`;\n        break;\n    case (itemIncludes(\"boulder\")):\n        path01 = \"BoulderToss01\";\n        tmMacro = BloodyHitStutter\n        size = \"500\";\n        Delay01 = 1250;\n        Delay02 = 1750;\n        Delay03 = 1550;\n        soundFile = `example/sound/file.mp3`;\n        break;\n    case (itemIncludes(\"siege\")):\n        path01 = \"SiegeBoulder01\";\n        tmMacro = BloodyHitStutter;\n        Delay01 = 750;\n        Delay02 = 1250;\n        Delay03 = 1150;\n        soundFile = `example/sound/file.mp3`;\n        size = \"500\";\n        break;\n    case (itemIncludes(\"laser\")):\n        path01 = \"LaserShot\";\n        tmMacro = colorWave;\n        Delay01 = 500;\n        Delay02 = 500;\n        Delay03 = 500;\n        soundFile = `example/sound/file.mp3`;\n        break;\n    case (itemIncludes(\"slingshot\")):\n        path01 = \"SlingShot\";\n        Delay01 = 2000;\n        Delay02 = 2300;\n        Delay03 = 2000;\n        soundFile = `example/sound/file.mp3`;\n        break;\n    case (itemIncludes(\"spear\")):\n        path01 = \"Spear01\";\n        Delay01 = 600;\n        Delay02 = 1150;\n        Delay03 = 850;\n        soundFile = `example/sound/file.mp3`;\n        break;\n    case (itemIncludes(\"javelin\")):\n        path01 = \"Javelin01\";\n        Delay01 = 750;\n        Delay02 = 1250;\n        Delay03 = 1050;\n        soundFile = `example/sound/file.mp3`;\n        break;\n}\n\nasync function Cast() {\n\n    var myStringArray = lastArg.targets;\n    var arrayLength = myStringArray.length;\n    for (var i = 0; i < arrayLength; i++) {\n\n        await wait(500)\n\n        let mainTargetdata = myStringArray[i];\n        let mainTarget = canvas.tokens.get(mainTargetdata._id);\n        let myToken = canvas.tokens.get(lastArg.tokenId) || canvas.tokens.placeables.find(token => token.actor.items.get(item._id) != null)\n\n        let ray = new Ray(myToken.center, mainTarget.center);\n        let anDeg = -(ray.angle * 57.3);\n        let anDist = ray.distance;\n\n        // Animation file path\n        let file = \"modules/jb2a_patreon/Library/Generic/Weapon_Attacks/Ranged\";\n\n        // Checking for range to target to choose which file to pull\n        let anFile = `${file}/${path01}_${type01}_${tint}_${color}_15ft_1000x${size}.webm`;\n        let anFileSize = 600;\n        let anchorX = 0.2;\n        switch (true) {\n            case (itemIncludes(\"dagger\")):\n            case (itemIncludes(\"hammer\")):\n            case (itemIncludes(\"handaxe\")):\n            case (itemIncludes(\"kunai\")):\n            case (itemIncludes(\"slingshot\")):\n            case (itemIncludes(\"spear\")):\n                anFile = `${file}/${path01}_${type01}_${tint}_${color}_15ft_1000x${size}.webm`;\n                anFileSize = 600;\n                anchorX = 0.2;\n                switch (true) {\n                    case (anDist <= 600):\n                        anFileSize = 600;\n                        anFile = `${file}/${path01}_${type01}_${tint}_${color}_15ft_1000x${size}.webm`;\n                        anchorX = 0.2;\n                        tmDelay = Delay01;\n                        break;\n                    case (anDist > 1200):\n                        anFileSize = 1800;\n                        anFile = `${file}/${path01}_${type01}_${tint}_${color}_45ft_2200x${size}.webm`;\n                        anchorX = 0.091;\n                        tmDelay = Delay02;\n                        break;\n                    default:\n                        anFileSize = 1200;\n                        anFile = `${file}/${path01}_${type01}_${tint}_${color}_30ft_1600x${size}.webm`;\n                        anchorX = 0.125;\n                        tmDelay = Delay03;\n                        break;\n                }\n                break;\n            case (itemIncludes(\"arrow\")):\n            case (itemIncludes(\"boulder\")):\n            case (itemIncludes(\"siege\")):\n            case (itemIncludes(\"javelin\")):\n            case (itemIncludes(\"laser\")):\n                anFile = `${file}/${path01}_${type01}_${tint}_${color}_30ft_1600x${size}.webm`;\n                anFileSize = 600;\n                anchorX = 0.125;\n                switch (true) {\n                    case (anDist <= 1200):\n                        anFileSize = 1200;\n                        anFile = `${file}/${path01}_${type01}_${tint}_${color}_30ft_1600x${size}.webm`;\n                        anchorX = 0.125;\n                        tmDelay = Delay01;\n                        break;\n                    case (anDist > 2400):\n                        anFileSize = 3600;\n                        anFile = `${file}/${path01}_${type01}_${tint}_${color}_90ft_4000x${size}.webm`;\n                        anchorX = 0.05;\n                        tmDelay = Delay02;\n                        break;\n                    default:\n                        anFileSize = 2400;\n                        anFile = `${file}/${path01}_${type01}_${tint}_${color}_60ft_2800x${size}.webm`;\n                        anchorX = 0.071;\n                        tmDelay = Delay03;\n                        break;\n                }\n                break;\n        }\n\n        // Scaling the Height of the animation for consistency across ranges\n        let anScale = anDist / anFileSize;\n        let anScaleY = anDist <= 600 ? 0.6 : anScale;\n\n        let spellAnim =\n        {\n            file: anFile,\n            position: myToken.center,\n            anchor: {\n                x: anchorX,\n                y: 0.5\n            },\n            angle: anDeg,\n            scale: {\n                x: anScale,\n                y: anScaleY\n            }\n        };\n\n        let Repeater = 1;\n        switch (true) {\n            case (itemIncludes(\"laser\")):\n                Repeater = 3;\n                break;\n            default:\n                Repeater = 1;\n                break;\n        }\n\n        async function SpellAnimation(number) {\n\n            let x = number;\n            let interval = 250;\n            for (var i = 0; i < x; i++) {\n                setTimeout(function () {\n                    canvas.fxmaster.playVideo(spellAnim);\n                    game.socket.emit('module.fxmaster', spellAnim);\n                    let soundFile = `example/sound/file.mp3`;\n                    switch (true) {\n                        case (soundFile != \"example/sound/file.mp3\"):\n                            AudioHelper.play({ src: soundFile, volume: 1.0, autoplay: true, loop: false }, true);\n                            break;\n                    }\n\n                }, i * interval);\n            }\n            await wait(interval * x + 2500);\n            TokenMagic.deleteFiltersOnTargeted();\n        }\n        SpellAnimation(Repeater)\n        await wait(tmDelay);\n        TokenMagic.addUpdateFiltersOnTargeted(tmMacro);\n    }\n}\nCast()","author":"cDoi3U5MyHp0uBW1","img":"icons/weapons/bows/bow-ornamental-carved-brown.webp","actorIds":[]}
{"_id":"9rag3jdpTPfRfNki","name":"SiegeBoulderMacro","permission":{"default":0,"cDoi3U5MyHp0uBW1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.93MP4XqwyQKFqTK5"}},"scope":"global","command":"// Requires at least 1 target to play the animation\nif (game.user.targets.size == 0) ui.notifications.error('You must target at least one token');\n// Requires FX Master Module\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\nconst lastArg = args[args.length - 1];\nlet item = lastArg.item\n\nlet itemName = item.name.toLowerCase();\nlet itemSource = item.data.source.toLowerCase();\n\nfunction itemIncludes(test) {\n    if (itemSource.includes(test) || itemName.includes(test)) return true;\n}\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nlet BloodyHitStutter =\n    [{\n        filterType: \"images\",\n        filterId: \"myMirrorImages\",\n        time: 0,\n        nbImage: 2,\n        alphaImg: 1.0,\n        alphaChr: 0.0,\n        autoDestroy: true,\n        blend: 4,\n        ampX: 0.03,\n        ampY: 0.03,\n        zOrder: 20,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: 0.070,\n                animType: \"move\",\n                loopDuration: 200,\n                loops: 2\n            },\n            anchorX:\n            {\n                animType: \"chaoticOscillation\",\n                loopDuration: 100,\n                val1: 0.40,\n                val2: 0.60,\n                loops: 4\n            }\n        }\n    },\n    {\n        filterType: \"splash\",\n        filterId: \"mySplash\",\n        rank: 5,\n        color: 0x990505,\n        padding: 80,\n        time: Math.random() * 1000,\n        seed: Math.random(),\n        splashFactor: 1,\n        spread: 0.4,\n        blend: 1,\n        dimX: 1,\n        dimY: 1,\n        cut: false,\n        textureAlphaBlend: true,\n        anchorX: 0.32 + (Math.random() * 0.36),\n        anchorY: 0.32 + (Math.random() * 0.36)\n    }];\n\nlet type01 = \"01\";\nlet tint = \"Regular\";\nlet color = \"White\";\nlet tmMacro = BloodyHitStutter;\nlet tmDelay;\n\nswitch (true) {\n    case (itemIncludes(\"white\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"White\";\n        tmMacro = BloodyHitStutter;\n        break;\n}\n\n\nasync function Cast() {\n\n    var myStringArray = lastArg.targets;\n    var arrayLength = myStringArray.length;\n    for (var i = 0; i < arrayLength; i++) {\n\n        await wait(500)\n\n        let mainTargetdata = myStringArray[i];\n        let mainTarget = canvas.tokens.get(mainTargetdata._id);\n        let myToken = canvas.tokens.get(lastArg.tokenId) || canvas.tokens.placeables.find(token => token.actor.items.get(item._id) != null)\n\n        let ray = new Ray(myToken.center, mainTarget.center);\n        let anDeg = -(ray.angle * 57.3);\n        let anDist = ray.distance;\n\n        // Animation file path\n        let file = \"modules/jb2a_patreon/Library/Generic/Weapon_Attacks/Ranged/\";\n\n        // Checking for range to target to choose which file to pull\n        let anFile = `${file}SiegeBoulder01_${type01}_${tint}_${color}_30ft_1600x500.webm`;\n        let anFileSize = 600;\n        let anchorX = 0.125;\n        switch (true) {\n            case (anDist <= 1200):\n                anFileSize = 1200;\n                anFile = `${file}SiegeBoulder01_${type01}_${tint}_${color}_30ft_1600x500.webm`;\n                anchorX = 0.125;\n                tmDelay = 750;\n                break;\n            case (anDist > 2400):\n                anFileSize = 3600;\n                anFile = `${file}SiegeBoulder01_${type01}_${tint}_${color}_90ft_4000x500.webm`;\n                anchorX = 0.05;\n                tmDelay = 1250;\n                break;\n            default:\n                anFileSize = 2400;\n                anFile = `${file}SiegeBoulder01_${type01}_${tint}_${color}_60ft_2800x500.webm`;\n                anchorX = 0.071;\n                tmDelay = 1150;\n                break;\n        }\n\n        // Scaling the Height of the animation for consistency across ranges\n        let anScale = anDist / anFileSize;\n        let anScaleY = anDist <= 600 ? 0.6 : anScale;\n\n        let spellAnim =\n        {\n            file: anFile,\n            position: myToken.center,\n            anchor: {\n                x: anchorX,\n                y: 0.5\n            },\n            angle: anDeg,\n            scale: {\n                x: anScale,\n                y: anScaleY\n            }\n        };\n\n        canvas.fxmaster.playVideo(spellAnim);\n        game.socket.emit('module.fxmaster', spellAnim);\n\n        let soundFile = `example/sound/file.mp3`;\n        switch (true) {\n            case (soundFile != \"example/sound/file.mp3\"):\n                AudioHelper.play({ src: soundFile, volume: 1.0, autoplay: true, loop: false }, true);\n                break;\n        }\n        await wait(tmDelay);\n        TokenMagic.addUpdateFiltersOnTargeted(tmMacro);\n\n    }\n}\nCast()\n\nawait wait(4000);\nTokenMagic.deleteFiltersOnTargeted();","author":"cDoi3U5MyHp0uBW1","img":"modules/jb2a_patreon/Library/Generic/Weapon_Attacks/Ranged/SiegeBoulder01_01_Regular_White_Thumb.webp","actorIds":[]}
{"name":"Melee-Range-Switch","permission":{"default":0,"OAAx1jKOg1dYBpA6":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.NrBjnCD3NiLmuBH0"}},"scope":"global","command":"// This macro works the same as others by letting you define a color or animation in the source field. If you are further than 1 square from your target, it will switch to the thrown weapon animation\n// THIS ONLY WORKS FOR DAGGER, HANDAXE, AND SPEAR\n// For throwing daggers, you can specify 02 in the Source field for the Dagger02 throwing animation. The same applies for Kunai, put Kunai in the Source field and it will pull the Kunai throwing animation\nconst lastArg = args[args.length - 1];\nlet item = lastArg.item\n\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\nlet itemName = item.name.toLowerCase();\nlet itemSource = item.data.source.toLowerCase();\n\nfunction itemIncludes(test) {\n    if (itemSource.includes(test) || itemName.includes(test)) return true;\n}\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nlet type01 = \"01\";\nlet tint = \"Regular\";\nlet color = \"White\";\nlet fireColor = \"pass\";\n\nswitch (true) {\n    case (itemIncludes(\"white\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"White\";\n        break;\n    case (itemIncludes(\"purple\")):\n        type01 = \"Fire\";\n        tint = \"Dark\";\n        color = \"Purple\";\n        fireColor = \"0x8B00C0\";\n        break;\n    case (itemIncludes(\"blue\")):\n        type01 = \"Fire\";\n        tint = \"Regular\";\n        color = \"Blue\";\n        fireColor = \"0x008FC0\";\n        break;\n    case (itemIncludes(\"green\")):\n        type01 = \"Fire\";\n        tint = \"Regular\";\n        color = \"Green\";\n        fireColor = \"0x60EA01\";\n        break;\n    case (itemIncludes(\"orange\")):\n        type01 = \"Fire\";\n        tint = \"Regular\";\n        color = \"Orange\";\n        fireColor = \"0xF18A07\";\n        break;\n    case (itemIncludes(\"pink\")):\n        type01 = \"Fire\";\n        tint = \"Regular\";\n        color = \"Pink\";\n        fireColor = \"0xD2049A\";\n        break;\n    case (itemIncludes(\"red\")):\n        type01 = \"Fire\";\n        tint = \"Regular\";\n        color = \"Red\";\n        fireColor = \"0xD20404\";\n        break;\n    case (itemIncludes(\"yellow\")):\n        type01 = \"Fire\";\n        tint = \"Regular\";\n        color = \"Yellow\";\n        fireColor = \"0xCFD204\";\n        break;\n}\n\nlet burn =\n    [{\n        filterType: \"xfire\",\n        filterId: \"myColdXFire\",\n        time: 0,\n        color: fireColor,\n        blend: 1,\n        amplitude: 1,\n        dispersion: 0,\n        chromatic: false,\n        scaleX: 1,\n        scaleY: 1,\n        inlay: false,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: -0.0015,\n                animType: \"move\"\n            }\n        }\n    }];\n\n\n// delay before activating the Token Magic FX Macros, change inside the switch cases to adjust the timing\nlet tmdelay = 1000;\n// delay before deleting Token Magic FX if needed, change inside switch cases to adjust the deletion\nlet tmkill = 1000;\n// calls a Token Magic FX macro defined above, change inside the switch cases to desired TMFX\nlet tmmacro = \"HitStutter\";\n// Delay for when the sound effect starts playing, change inside the switch cases to desired timing.\nlet soundDelay = 50;\n// Defines the sound to play when activated, change inside the switch cases to desired sound file\nlet soundFile = `example/sound/file.mp3`;\nlet item11;\nlet item01 = \"Dagger02\";\nswitch (true) {\n    case (itemIncludes(\"handaxe\")):\n        item01 = \"HandAxe02\";\n        item11 = \"HandAxe01\";\n        tmdelay = 1250;\n        tmkill = 1500;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 100;\n        break;\n    case (itemIncludes(\"dagger\")):\n        item01 = \"Dagger02\";\n        item11 = \"Dagger01\";\n        tmdelay = 1250;\n        tmkill = 1500;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 100;\n        break;\n    case (itemIncludes(\"spear\")):\n        item01 = \"Spear01\";\n        item11 = \"Spear01\";\n        tmdelay = 1250;\n        tmkill = 1500;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 100;\n        break;\n}\n\nswitch (true) {\n    case (itemIncludes(\"kunai\")):\n        item11 = \"Kunai01\";\n        break;\n    case (itemIncludes(\"02\")):\n        item11 = \"Dagger02\";\n        break;\n}\n\n\nasync function Cast() {\n    //            change to lastArg.hitTargets to only play animations on hit using Midi Workflow option\n    var myStringArray = lastArg.targets;\n    var arrayLength = myStringArray.length;\n    for (var i = 0; i < arrayLength; i++) {\n\n        let mainTargetdata = myStringArray[i];\n        let mainTarget = canvas.tokens.get(mainTargetdata._id)\n        let myToken = canvas.tokens.get(lastArg.tokenId) || canvas.tokens.placeables.find(token => token.actor.items.get(item._id) != null)\n\n        let distance = canvas.grid.measureDistance(mainTarget, myToken);\n\n        let ray = new Ray(myToken.center, mainTarget.center);\n        let anDeg = -(ray.angle * 57.3);\n        let anDist = ray.distance;\n\n        let file;\n        let anFile;\n        let anFileSize;\n        let anchorX;\n        let anScale;\n        let anScaleY;\n        let Scale;\n        let spellAnim;\n\n        let path00 = \"modules/jb2a_patreon/Library/Generic/Weapon_Attacks\"\n\n        switch (true) {\n            case (distance >= 10):\n                file = `${path00}/Ranged/`;\n                switch (true) {\n                    case (anDist <= 600):\n                        anFileSize = 600;\n                        anFile = `${file}/${item11}_01_Regular_White_15ft_1000x400.webm`;\n                        anchorX = 0.2;\n                        break;\n                    case (anDist > 1200):\n                        anFileSize = 1800;\n                        anFile = `${file}/${item11}_01_Regular_White_45ft_2200x400.webm`;\n                        anchorX = 0.091;\n                        break;\n                    default:\n                        anFileSize = 1200;\n                        anFile = `${file}/${item11}_01_Regular_White_30ft_1600x400.webm`;\n                        anchorX = 0.125;\n                        break;\n                }\n                anScale = anDist / anFileSize;\n                anScaleY = anDist <= 600 ? 0.6 : anScale;\n\n                spellAnim =\n                {\n                    file: anFile,\n                    position: myToken.center,\n                    anchor: {\n                        x: anchorX,\n                        y: 0.5\n                    },\n                    angle: anDeg,\n                    scale: {\n                        x: anScale,\n                        y: anScaleY\n                    }\n                };\n\n                canvas.fxmaster.playVideo(spellAnim);\n                game.socket.emit('module.fxmaster', spellAnim);\n\n                break;\n            default:\n                console.log(\"in range\");\n                Scale = canvas.scene.data.grid / 175;\n                var plusOrMinus = Math.random() < 0.5 ? -1 : 1;\n                function castSpell(effect) {\n                    const tokens = canvas.tokens.controlled;\n                    game.user.targets.forEach((i, t) => {\n                        canvas.fxmaster.drawSpecialToward(effect, tokens[0], t);\n\n                    });\n                }\n                file = `${path00}/Melee/`;\n\n                castSpell({\n                    file: `${file}${item01}_${type01}_${tint}_${color}_800x600.webm`,\n                    anchor: {\n                        x: 0.4,\n                        y: 0.5,\n                    },\n                    speed: 0,\n                    angle: 0,\n                    scale: {\n                        x: Scale,\n                        y: (Scale * plusOrMinus),\n                    },\n                });\n                await wait(tmdelay);\n                switch (true) {\n                    case (fireColor != \"pass\"):\n                        TokenMagic.addUpdateFiltersOnTargeted(burn);\n                        break;\n                }\n                await wait(tmkill);\n                TokenMagic.deleteFiltersOnTargeted();\n                break;\n        }\n\n    }\n}\nCast()","author":"OAAx1jKOg1dYBpA6","img":"icons/svg/daze.svg","actorIds":[],"_id":"I16UUm50oZTKdrOd"}
{"_id":"LVss7aSRxl9IWMSm","name":"RayOfFrostMacro","permission":{"default":0,"cDoi3U5MyHp0uBW1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.Svy4VAPG1WJBNFcM"}},"scope":"global","command":"const lastArg = args[args.length - 1];\nlet item = lastArg.item\n\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\nlet itemName = item.name.toLowerCase();\nlet itemSource = item.data.source.toLowerCase();\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nlet type01 = \"01\";\nlet tint = \"Regular\";\nlet color = \"Blue\";\nlet tmColor = 0xFF9309;\n\nswitch(true){\n  case (itemSource.includes(\"blueyellow\")):\n    type01 = \"01\";\n    tint = \"Regular\";\n    color = \"BlueYellow\";\n    tmColor = 0xACC5C5;\n  break;\n  case (itemSource.includes(\"blue\")):\n    type01 = \"01\";\n    tint = \"Regular\";\n    color = \"Blue\";\n    tmColor = 0x0A50E7;\n  break;\n  case (itemSource.includes(\"green\")):\n    type01 = \"01\";\n    tint = \"Regular\";\n    color = \"Green\";\n    tmColor = 0x14E599;\n  break;\n  case (itemSource.includes(\"purpleteal\")):\n    type01 = \"01\";\n    tint = \"Regular\";\n    color = \"PurpleTeal\";\n    tmColor = 0xC38CDC;\n  break;\n  }\n\n//\n// Token Magic FX Definitions for passing inside the switch\n// You can modify these, or add new ones based off other Token Magic FX animations\n// \nlet Frosty =\n[{\n    filterType: \"xfire\",\n    filterId: \"mySuperFrost\",\n    color: tmColor,\n    time: 0,\n    blend: 5,\n    amplitude: 1,\n    dispersion: 0,\n    chromatic: false,\n    scaleX: 1,\n    scaleY: 1,\n    inlay: true,\n    animated :\n    {\n      time : \n      { \n        active: true, \n        speed: -0.0020, \n        animType: \"move\" \n      }\n       \n    }\n}];\n\nasync function Cast() {\n//            change to lastArg.hitTargets to only play animations on hit using Midi Workflow option\n    var myStringArray = lastArg.targets;\n    var arrayLength = myStringArray.length;\n    for (var i = 0; i < arrayLength; i++) {\n\n        let mainTargetdata = myStringArray[i];\n        let mainTarget = canvas.tokens.get(mainTargetdata._id)\n        let myToken = canvas.tokens.get(lastArg.tokenId) || canvas.tokens.placeables.find(token => token.actor.items.get(item._id) != null)\n\n// Defines a new Ray between the caster and target\nlet ray = new Ray(myToken.center, mainTarget.center);\n// Determines the angle\nlet anDeg = -(ray.angle * 57.3);\n// assigns the distance of the newly created Ray to anDist\nlet anDist = ray.distance;\n\n// Base file path for this animation\nlet file = \"modules/jb2a_patreon/Library/Cantrip/Ray_Of_Frost/\";\n\n\nlet anFile = `${file}RayOfFrost_${type01}_${tint}_${color}_15ft_1000x400.webm`;\nlet anFileSize = 600;\nlet anchorX = 0.2;\nswitch(true){\n case (anDist<=600):\n    anFileSize = 600;\n    anFile = `${file}RayOfFrost_${type01}_${tint}_${color}_15ft_1000x400.webm`;\n    anchorX = 0.2;\n    break;\n case (anDist>1200):\n    anFileSize = 1800;\n    anFile = `${file}RayOfFrost_${type01}_${tint}_${color}_45ft_2200x400.webm`;\n    anchorX = 0.091;\n    break;\n default:\n    anFileSize = 1200;\n    anFile = `${file}RayOfFrost_${type01}_${tint}_${color}_30ft_1600x400.webm`;\n    anchorX = 0.125;\n    break;\n}\n\nlet anScale = anDist / anFileSize;\nlet anScaleY = anDist <= 600 ? 0.6  : anScale;\n\nlet spellAnim = \n                    {\n                     file: anFile,\n                      position: myToken.center,\n                      anchor: {\n                       x: anchorX,\n                       y: 0.5\n                      },\n                      angle: anDeg,\n                      scale: {\n                       x: anScale,\n                       y: anScaleY\n                      }\n                    }; \ncanvas.fxmaster.playVideo(spellAnim);\ngame.socket.emit('module.fxmaster', spellAnim);\n\n// Change the path here to a sound file you would like to use\nlet soundFile = `example/sound/file.mp3`;\nswitch (true){\n   case (soundFile != \"example/sound/file.mp3\"):\n      AudioHelper.play({src: soundFile, volume: 1.0, autoplay: true, loop: false}, true);\n   break;\n}\n\n}\n}\nCast()\n\n// Activates the Token Magic FX after a delay\nawait wait(1000);\nTokenMagic.addUpdateFiltersOnTargeted(Frosty);\nawait wait(2000);\nTokenMagic.deleteFiltersOnTargeted();","author":"cDoi3U5MyHp0uBW1","img":"modules/jb2a_patreon/Library/Cantrip/Ray_Of_Frost/RayOfFrost_01_Regular_Blue_Thumb.webp","actorIds":[]}
{"_id":"YI7mFNcpQZ6YiXyU","name":"CureWoundsMacro","permission":{"default":0,"cDoi3U5MyHp0uBW1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.RPZbz0xJHucDb4gt"}},"scope":"global","command":"// Requires a Target to be targeted\nif (game.user.targets.size == 0) ui.notifications.error('You must target at least one token');\n// Requires FX Master module\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\nconst lastArg = args[args.length - 1];\nlet item = lastArg.item;\nlet itemName = item.name.toLowerCase();\nlet itemSource = item.data.source.toLowerCase();\n\nfunction itemIncludes(test){\n    if(itemSource.includes(test) || itemName.includes(test)) return true;\n}\n\nlet type01 = \"01\";\nlet color = \"Blue\";\nlet tmColor = 0x107BD9;\n\nswitch (true) {\n    case (itemIncludes(\"blue\")):\n        type01 = \"01\";\n        color = \"Blue\";\n        tmColor = 0x107BD9;\n        break;\n    case (itemIncludes(\"green\")):\n        type01 = \"01\";\n        color = \"Green\";\n        tmColor = 0x7BDA35;\n        break;\n    case (itemIncludes(\"purple\")):\n        type01 = \"01\";\n        color = \"Purple\";\n        tmColor = 0x9400CB;\n        break;\n    case (itemIncludes(\"red\")):\n        type01 = \"01\";\n        color = \"Red\";\n        tmColor = 0xE12C2C;\n        break;\n}\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nasync function Cast() {\n\n    var myStringArray = lastArg.targets;\n    var arrayLength = myStringArray.length;\n    // Loops for multiple targets\n    for (var i = 0; i < arrayLength; i++) {\n        // Plays on targeted tokens\n        let mainTargetdata = myStringArray[i];\n        let mainTarget = canvas.tokens.get(mainTargetdata._id)\n        // Scaled by Target Size\n        let tarScale = ((mainTarget.data.width + mainTarget.data.height) / 4);\n        // Comment out above and use the below line to scale globally for size consistency. Alter divisor to change animation size\n        // let tarScale = canvas.scene.data.grid/100;\n\n        // Defining spell animation for FX Master\n        let spellAnim =\n        {\n            file: `modules/jb2a_patreon/Library/1st_Level/Cure_Wounds/CureWounds_${type01}_${color}_400x400.webm`,\n            position: mainTarget.center,\n            anchor: {\n                x: 0.5,\n                y: 0.5\n            },\n            angle: 0,\n            scale: {\n                x: tarScale,\n                y: tarScale\n            }\n        };\n        canvas.fxmaster.playVideo(spellAnim);\n        game.socket.emit('module.fxmaster', spellAnim);\n        // Add some sound\n        /*\n        await wait (100);\n        let soundFile = `sound path here`;\n        AudioHelper.play({src: soundFile, volume: 1.0, autoplay: true, loop: false}, true);\n        */\n\n        // Or play random sounds\n        /*\n        let soundHome = \"CustomSounds/battle/\";\n        \n        let m1 = `sound 01 file location here`;\n        let m2 = `sound 02 file location here`;\n        function random_sound(sounds)\n        {\n        return sounds[Math.floor(Math.random()*sounds.length)];\n        }\n        \n        var sounds = [m1, m2];\n        \n        let roll = new Roll('1d3').roll().total;\n        let soundFile = random_sound(sounds);\n        AudioHelper.play({src: soundHome + soundFile, volume: 0.9, autoplay: true, loop: false}, true);\n        */\n\n        let Holy =\n        [{\n           filterType: \"outline\",\n           filterId: \"myOutline\",\n           padding: 10,\n        // Change color in hex format\n           color: tmColor,\n           thickness: 1,\n           quality: 5,\n           zOrder: 9,\n           autoDestroy: true,\n           animated :\n           {\n              thickness: \n              { \n                 active: true,\n                 loopDuration: 800,\n                 loops: 4,\n                 animType: \"syncCosOscillation\",\n                 val1: 1, \n                 val2: 6\n              }\n           }\n        }];\n        \n        TokenMagic.addUpdateFiltersOnTargeted(Holy);\n    }\n}\nCast()","author":"cDoi3U5MyHp0uBW1","img":"modules/jb2a_patreon/Library/1st_Level/Cure_Wounds/CureWounds_01_Purple_Thumb.webp","actorIds":[]}
{"_id":"bmcv7DIxafeUw3yY","name":"MagicMissileMacro","permission":{"default":0,"cDoi3U5MyHp0uBW1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.e9V8bci3JHTiryxm"}},"scope":"global","command":"const lastArg = args[args.length - 1];\nlet item = lastArg.item\n\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\nlet itemName = item.name.toLowerCase();\nlet itemSource = item.data.source.toLowerCase();\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nlet type01 = \"01\";\nlet tint = \"Regular\";\nlet color = \"Blue\";\nlet tmColor = 0x053ABD;\n\nswitch (true) {\n    case (itemSource.includes(\"blue\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Blue\";\n        tmColor = 0x187C00;\n        break;\n    case (itemSource.includes(\"green\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Green\";\n        tmColor = 0x2CE600;\n        break;\n    case (itemSource.includes(\"purple\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Purple\";\n        tmColor = 0x8E0000;\n        break;\n    case (itemSource.includes(\"yellow\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Yellow\";\n        tmColor = 0xFF0000;\n        break;\n}\n\n//\n// Token Magic FX Definitions for passing inside the switch\n// You can modify these, or add new ones based off other Token Magic FX animations\n// \nlet Shockwave =\n    [{\n        filterType: \"wave\",\n        filterId: \"myShockwave\",\n        time: 0,\n        strength: 0.03,\n        frequency: 15,\n        maxIntensity: 4.0,\n        minIntensity: 0.5,\n        padding: 25,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: 0.0180,\n                animType: \"move\",\n            }\n        }\n    }];\n\nlet file = \"modules/jb2a_patreon/Library/1st_Level/Magic_Missile/\";\n\nlet mmA = `${file}MagicMissile_${type01}_${tint}_${color}_30ft_01_1600x400.webm`;\nlet mmB = `${file}MagicMissile_${type01}_${tint}_${color}_30ft_02_1600x400.webm`;\nlet mmC = `${file}MagicMissile_${type01}_${tint}_${color}_30ft_03_1600x400.webm`;\nlet mmD = `${file}MagicMissile_${type01}_${tint}_${color}_30ft_04_1600x400.webm`;\nlet mmE = `${file}MagicMissile_${type01}_${tint}_${color}_30ft_05_1600x400.webm`;\nlet mmF = `${file}MagicMissile_${type01}_${tint}_${color}_30ft_06_1600x400.webm`;\nlet mmG = `${file}MagicMissile_${type01}_${tint}_${color}_30ft_07_1600x400.webm`;\nlet mmH = `${file}MagicMissile_${type01}_${tint}_${color}_30ft_08_1600x400.webm`;\nlet mmI = `${file}MagicMissile_${type01}_${tint}_${color}_30ft_09_1600x400.webm`;\n\nlet mmAA = `${file}MagicMissile_${type01}_${tint}_${color}_60ft_01_2800x400.webm`;\nlet mmBB = `${file}MagicMissile_${type01}_${tint}_${color}_60ft_02_2800x400.webm`;\nlet mmCC = `${file}MagicMissile_${type01}_${tint}_${color}_60ft_03_2800x400.webm`;\nlet mmDD = `${file}MagicMissile_${type01}_${tint}_${color}_60ft_04_2800x400.webm`;\nlet mmEE = `${file}MagicMissile_${type01}_${tint}_${color}_60ft_05_2800x400.webm`;\nlet mmFF = `${file}MagicMissile_${type01}_${tint}_${color}_60ft_06_2800x400.webm`;\nlet mmGG = `${file}MagicMissile_${type01}_${tint}_${color}_60ft_07_2800x400.webm`;\nlet mmHH = `${file}MagicMissile_${type01}_${tint}_${color}_60ft_08_2800x400.webm`;\nlet mmII = `${file}MagicMissile_${type01}_${tint}_${color}_60ft_09_2800x400.webm`;\n\nfunction random_itemA(itemsA) {\n    return itemsA[Math.floor(Math.random() * itemsA.length)];\n}\n\nvar itemsA = [mmA, mmB, mmC, mmD, mmE, mmF, mmG, mmH, mmI];\n\nfunction random_itemB(itemsB) {\n    return itemsB[Math.floor(Math.random() * itemsB.length)];\n}\n\nvar itemsB = [mmAA, mmBB, mmCC, mmDD, mmEE, mmFF, mmGG, mmHH, mmII];\n\nasync function Cast() {\n    //            change to lastArg.hitTargets to only play animations on hit using Midi Workflow option\n    var myStringArray = lastArg.targets;\n    var arrayLength = myStringArray.length;\n    for (var i = 0; i < arrayLength; i++) {\n\n        let mainTargetdata = myStringArray[i];\n        let mainTarget = canvas.tokens.get(mainTargetdata._id)\n        let myToken = canvas.tokens.get(lastArg.tokenId) || canvas.tokens.placeables.find(token => token.actor.items.get(item._id) != null)\n\n        // Defines a new Ray between the caster and target\n        let ray = new Ray(myToken.center, mainTarget.center);\n        // Determines the angle\n        let anDeg = -(ray.angle * 57.3);\n        // assigns the distance of the newly created Ray to anDist\n        let anDist = ray.distance;\n\n\n\n        async function SpellAnimation(number) {\n\n            let x = number;\n            let interval = 500;\n            for (var i = 0; i < x; i++) {\n                setTimeout(function () {\n\n                    let anFile = random_itemA(itemsA);\n                    let anFileSize = 600;\n                    let anchorX = 0.125;\n                    switch (true) {\n                        case (anDist <= 1800):\n                            anFileSize = 1200;\n                            anFile = random_itemA(itemsA);\n                            anchorX = 0.125;\n                            break;\n                        default:\n                            anFileSize = 2400;\n                            anFile = random_itemB(itemsB);\n                            anchorX = 0.071;\n                            break;\n                    }\n\n                    let anScale = anDist / anFileSize;\n                    let anScaleY = anDist <= 600 ? 0.6 : anScale;\n\n                    let spellAnim =\n                    {\n                        file: anFile,\n                        position: myToken.center,\n                        anchor: {\n                            x: anchorX,\n                            y: 0.5\n                        },\n                        angle: anDeg,\n                        scale: {\n                            x: anScale,\n                            y: anScaleY\n                        }\n                    };\n                    canvas.fxmaster.playVideo(spellAnim);\n                    game.socket.emit('module.fxmaster', spellAnim);\n\n//                               put your sound file here\n                    let soundFile = `example/sound/file.mp3`;\n                    switch (true) {\n                        case (soundFile != \"example/sound/file.mp3\"):\n                            AudioHelper.play({ src: soundFile, volume: 1.0, autoplay: true, loop: false }, true);\n                            break;\n                    }\n\n                }, i * interval);\n            }\n        }\n        SpellAnimation(3)\n\n    }\n}\nCast()\n\n// Activates the Token Magic FX after a delay\nawait wait(1000)\nTokenMagic.addUpdateFiltersOnTargeted(Shockwave);\nawait wait(2500);\nTokenMagic.deleteFiltersOnTargeted();","author":"cDoi3U5MyHp0uBW1","img":"modules/jb2a_patreon/Library/1st_Level/Magic_Missile/MagicMissile_01_Regular_Blue_Thumb.webp","actorIds":[]}
{"_id":"eW0yklu6mFPdMN6J","name":"AllAttackSpells","permission":{"default":0,"cDoi3U5MyHp0uBW1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.f7CE5HlkbKFT6xai"}},"scope":"global","command":"const lastArg = args[args.length - 1];\nlet item = lastArg.item\n\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\nlet itemName = item.name.toLowerCase();\nlet itemSource = item.data.source.toLowerCase();\n\nfunction itemIncludes(test) {\n    if (itemSource.includes(test) || itemName.includes(test)) return true;\n}\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nlet tint;\nlet color;\nlet tmColor;\nlet path;\nlet path2;\n\nswitch (true) {\n    case (itemIncludes(\"fire bolt\")):\n        path = \"Cantrip/Fire_Bolt\";\n        path2 = \"FireBolt_01\";\n        tint = \"Regular\";\n        color = \"Orange\";\n        tmColor = 0xFF9309;\n        break;\n    case (itemIncludes(\"ray of frost\")):\n        path = \"Cantrip/Ray_Of_Frost\";\n        path2 = \"RayOfFrost_01\";\n        tint = \"Regular\";\n        color = \"Blue\";\n        tmColor = 0xBBDDEE;\n        break;\n    case (itemIncludes(\"witch bolt\")):\n        path = \"1st_Level/Witch_Bolt\";\n        path2 = \"WitchBolt_01\";\n        tint = \"Dark\";\n        color = \"Purple\";\n        tmColor = 0xAE00AE;\n        break;\n    case (itemIncludes(\"scorching ray\")):\n        path = \"2nd_Level/Scorching_Ray\";\n        path2 = \"ScorchingRay_01\";\n        tint = \"Regular\";\n        color = \"Orange\";\n        tmColor = 0xFF9309;\n        break;\n    case (itemIncludes(\"disintegrate\")):\n        path = \"6th_Level/Disintegrate\";\n        path2 = \"Disintegrate_01\";\n        tint = \"Regular\";\n        color = \"PurpleBlue\";\n        tmColor = 0x00AFC1;\n        break;\n}\n\nswitch (true) {\n    case (itemIncludes(\"orangepink\")):\n        tint = \"Regular\";\n        color = \"OrangePink\";\n        tmColor = 0xC1005B;\n        break;\n    case (itemIncludes(\"purpleblue\")):\n        tint = \"Regular\";\n        color = \"PurpleBlue\";\n        tmColor = 0x00AFC1;\n        break;\n    case (itemIncludes(\"darkpurple\")):\n        tint = \"Dark\";\n        color = \"Purple\";\n        tmColor = 0xAE00AE;\n        break;\n    case (itemIncludes(\"darkgreen\")):\n        tint = \"Dark\";\n        color = \"Green\";\n        tmColor = 0x187C00;\n        break;\n    case (itemIncludes(\"darkred\")):\n        tint = \"Dark\";\n        color = \"Red\";\n        tmColor = 0x8E0000;\n        break;\n    case (itemIncludes(\"blueyellow\")):\n        tint = \"Regular\";\n        color = \"BlueYellow\";\n        tmColor = 0xACC5C5;\n        break;\n    case (itemIncludes(\"purpleteal\")):\n        tint = \"Regular\";\n        color = \"PurpleTeal\";\n        tmColor = 0xC38CDC;\n        break;\n    case (itemIncludes(\"orange\")):\n        tint = \"Regular\";\n        color = \"Orange\";\n        tmColor = 0xFF9309;\n        break;\n    case (itemIncludes(\"green\")):\n        tint = \"Regular\";\n        switch (true) {\n            case (itemIncludes(\"disintegrate\")):\n                color = \"Green01\";\n                break;\n            default:\n                color = \"Green\";\n                break;\n        }\n        tmColor = 0x59E81F;\n        break;\n    case (itemIncludes(\"blue\")):\n        tint = \"Regular\";\n        color = \"Blue\";\n        tmColor = 0xBBDDEE;\n        break;\n    case (itemIncludes(\"purple\")):\n        tint = \"Regular\";\n        color = \"Purple\";\n        tmColor = 0xFF09E1;\n        break;\n    case (itemIncludes(\"red\")):\n        switch (true) {\n            case (itemIncludes(\"fire bolt\")):\n                tint = \"Dark\";\n                break;\n            default:\n                tint = \"Regular\";\n        }\n        color = \"Red\";\n        tmColor = 0xBB1414;\n        break;\n    case (itemIncludes(\"yellow\")):\n        tint = \"Regular\";\n        color = \"Yellow\";\n        tmColor = 0xFF0000;\n        break;\n}\n\nlet letitBurn =\n    [{\n        filterType: \"xfire\",\n        filterId: \"myColdXFire\",\n        time: 0,\n        // Can change color in hex format\n        color: tmColor,\n        blend: 1,\n        amplitude: 1,\n        dispersion: 0,\n        chromatic: false,\n        scaleX: 1,\n        scaleY: 1,\n        inlay: false,\n        autoDestroy: true,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: -0.0015,\n                animType: \"move\"\n            }\n\n        }\n    }];\nlet Frosty =\n    [{\n        filterType: \"xfire\",\n        filterId: \"mySuperFrost\",\n        color: tmColor,\n        time: 0,\n        blend: 5,\n        amplitude: 1,\n        dispersion: 0,\n        chromatic: false,\n        scaleX: 1,\n        scaleY: 1,\n        inlay: true,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: -0.0020,\n                animType: \"move\"\n            }\n\n        }\n    }];\nlet Ashes =\n    [{\n        filterType: \"fire\",\n        filterId: \"myFire\",\n        intensity: 3,\n        color: tmColor,\n        amplitude: 2,\n        time: 0,\n        blend: 10,\n        fireBlend: 1,\n        alphaDiscard: true,\n        zOrder: 50,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: -0.0024,\n                animType: \"move\"\n            }\n        }\n    }, {\n        filterType: \"glow\",\n        filterId: \"glowripples\",\n        outerStrength: 4,\n        innerStrength: 2,\n        color: tmColor,\n        quality: 0.5,\n        padding: 10,\n        zOrder: 100,\n    }];\nlet Electric =\n    [{\n        filterType: \"electric\",\n        // Can change color in hex format\n        color: tmColor,\n        time: 0,\n        blend: 2,\n        intensity: 5,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: 0.0020,\n                animType: \"move\"\n            }\n\n        }\n    }];\n\nlet tmDelay;\nlet tmKill;\nlet tmMacro;\nlet soundFile = `example/sound/file.mp3`;\nlet soundDelay = 50;\n\nswitch (true) {\n    case (itemIncludes(\"fire bolt\")):\n        tmDelay = 1000;\n        tmKill = 2000;\n        tmMacro = letitBurn;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 50;\n        break;\n    case (itemIncludes(\"ray of frost\")):\n        tmDelay = 1000;\n        tmKill = 2000;\n        tmMacro = Frosty;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 50;\n        break;\n    case (itemIncludes(\"witch bolt\")):\n        tmDelay = 50;\n        tmKill = 4000;\n        tmMacro = Electric;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 50;\n        break;\n    case (itemIncludes(\"scorching ray\")):\n        tmDelay = 500;\n        tmKill = 2000;\n        tmMacro = letitBurn;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 50;\n        break;\n    case (itemIncludes(\"disintegrate\")):\n        tmDelay = 500;\n        tmKill = 2000;\n        tmMacro = Ashes;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 50;\n        break;\n}\n\n\nasync function Cast() {\n    //            change to lastArg.hitTargets to only play animations on hit using Midi Workflow option\n    var myStringArray = lastArg.targets;\n    var arrayLength = myStringArray.length;\n    for (var i = 0; i < arrayLength; i++) {\n\n        let mainTargetdata = myStringArray[i];\n        let mainTarget = canvas.tokens.get(mainTargetdata._id)\n        let myToken = canvas.tokens.get(lastArg.tokenId) || canvas.tokens.placeables.find(token => token.actor.items.get(item._id) != null)\n\n        // Defines a new Ray between the caster and target\n        let ray = new Ray(myToken.center, mainTarget.center);\n        // Determines the angle\n        let anDeg = -(ray.angle * 57.3);\n        // assigns the distance of the newly created Ray to anDist\n        let anDist = ray.distance;\n\n        // Base file path for this animation\n        let file = `modules/jb2a_patreon/Library/${path}`;\n\n        let anFile;\n        let anFileSize = 600;\n        let anchorX = 0.2;\n\n        switch (true) {\n            case (itemIncludes(\"fire bolt\")):\n                switch (true) {\n                    case (anDist <= 1600):\n                        anFileSize = 1200;\n                        anFile = `${file}/${path2}_${tint}_${color}_30ft_1600x400.webm`;\n                        anchorX = 0.125;\n                        break;\n                    case (anDist > 4000):\n                        anFileSize = 3600;\n                        anFile = `${file}/${path2}_${tint}_${color}_90ft_4000x400.webm`;\n                        anchorX = 0.05;\n                        break;\n                    default:\n                        anFileSize = 2400;\n                        anFile = `${file}/${path2}_${tint}_${color}_60ft_2800x400.webm`;\n                        anchorX = 0.071;\n                        break;\n                }\n                break;\n            case (itemIncludes(\"ray of frost\")):\n                switch (true) {\n                    case (anDist <= 600):\n                        anFileSize = 600;\n                        anFile = `${file}/${path2}_${tint}_${color}_15ft_1000x400.webm`;\n                        anchorX = 0.2;\n                        break;\n                    case (anDist > 1200):\n                        anFileSize = 1800;\n                        anFile = `${file}/${path2}_${tint}}_${color}_45ft_2200x400.webm`;\n                        anchorX = 0.091;\n                        break;\n                    default:\n                        anFileSize = 1200;\n                        anFile = `${file}/${path2}_${tint}_${color}_30ft_1600x400.webm`;\n                        anchorX = 0.125;\n                        break;\n                }\n                break;\n            case (itemIncludes(\"witch bolt\")):\n                switch (true) {\n                    case (anDist <= 600):\n                        anFileSize = 600;\n                        anFile = `${file}/${path2}_${tint}_${color}_15ft_1000x400.webm`;\n                        anchorX = 0.2;\n                        break;\n                    default:\n                        anFileSize = 1200;\n                        anFile = `${file}/${path2}_${tint}_${color}_30ft_1600x400.webm`;\n                        anchorX = 0.125;\n                        break;\n                }\n                break;\n            case (itemIncludes(\"scorching ray\")):\n                switch (true) {\n                    case (anDist <= 1600):\n                        anFileSize = 1200;\n                        anFile = `${file}/${path2}_${tint}_${color}_30ft_1600x400.webm`;\n                        anchorX = 0.125;\n                        break;\n                    case (anDist <= 4000):\n                        anFileSize = 3600;\n                        anFile = `${file}/${path2}_${tint}_${color}_90ft_4000x400.webm`;\n                        anchorX = 0.05;\n                        break;\n                    default:\n                        anFileSize = 2400;\n                        anFile = `${file}/${path2}_${tint}_${color}_60ft_2800x400.webm`;\n                        anchorX = 0.071;\n                        break;\n                }\n                break;\n            case (itemIncludes(\"disintegrate\")):\n                switch (true) {\n                    case (anDist <= 600):\n                        anFileSize = 600;\n                        anFile = `${file}/${path2}_${tint}_${color}_15ft_1000x400.webm`;\n                        anchorX = 0.2;\n                        break;\n                    case (anDist > 1200):\n                        anFileSize = 1800;\n                        anFile = `${file}/${path2}_${tint}_${color}_45ft_2200x400.webm`;\n                        anchorX = 0.091;\n                        break;\n                    default:\n                        anFileSize = 1200;\n                        anFile = `${file}/${path2}_${tint}_${color}_30ft_1600x400.webm`;\n                        anchorX = 0.125;\n                        break;\n                }\n                break;\n\n        }\n\n        let anScale = anDist / anFileSize;\n        let anScaleY = anDist <= 600 ? 0.6 : anScale;\n\n        let spellAnim =\n        {\n            file: anFile,\n            position: myToken.center,\n            anchor: {\n                x: anchorX,\n                y: 0.5\n            },\n            angle: anDeg,\n            scale: {\n                x: anScale,\n                y: anScaleY\n            }\n        };\n        canvas.fxmaster.playVideo(spellAnim);\n        game.socket.emit('module.fxmaster', spellAnim);\n\n        switch (true) {\n            case (soundFile != \"example/sound/file.mp3\"):\n                AudioHelper.play({ src: soundFile, volume: 1.0, autoplay: true, loop: false }, true);\n                break;\n        }\n\n    }\n}\nCast()\n\nawait wait(tmDelay);\nTokenMagic.addUpdateFiltersOnTargeted(tmMacro);\nawait wait(tmKill);\nTokenMagic.deleteFiltersOnTargeted();","author":"cDoi3U5MyHp0uBW1","img":"icons/tools/laboratory/bowl-liquid-gold.webp","actorIds":[]}
{"_id":"gSFKtSIS7RyezdMy","name":"ShatterMacro","permission":{"default":0,"cDoi3U5MyHp0uBW1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.mPsbSrBN1ZSITuHp"}},"scope":"global","command":"const lastArg = args[args.length - 1];\nlet item = lastArg.item\n\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\nlet itemName = item.name.toLowerCase();\nlet itemSource = item.data.source.toLowerCase();\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nlet type01 = \"01\";\nlet color = \"Blue\";\nlet tmColor = 0x0075B0;\n\nswitch (true) {\n    case (itemSource.includes(\"blue\")):\n        type01 = \"01\";\n        color = \"Blue\";\n        tmColor = 0x0075B0;\n        break;\n    case (itemSource.includes(\"green\")):\n        type01 = \"01\";\n        color = \"Green\";\n        tmColor = 0x0EB400;\n        break;\n    case (itemSource.includes(\"orange\")):\n        type01 = \"01\";\n        color = \"Orange\";\n        tmColor = 0xBF6E00;\n        break;\n    case (itemSource.includes(\"purple\")):\n        type01 = \"01\";\n        color = \"Purple\";\n        tmColor = 0xBF0099;\n        break;\n    case (itemSource.includes(\"red\")):\n        type01 = \"01\";\n        color = \"Red\";\n        tmColor = 0xBF0000;\n        break;\n\n}\n\n\nasync function Cast() {\n\n    //Finds the center of the placed circular template and plays an animation using FXMaster\n    const templateID = canvas.templates.placeables[canvas.templates.placeables.length - 1].data._id;\n    let template = await canvas.templates.get(templateID);\n    // Scaled globally, change divisor for different size animation.\n    let Scale = canvas.scene.data.grid / 90;\n    // Defines the spell template for FXMaster\n    let spellAnim =\n    {\n        file: `modules/jb2a_patreon/Library/2nd_Level/Shatter/Shatter_${type01}_${color}_400x400.webm`,\n        position: template.center,\n        anchor: {\n            x: 0.5,\n            y: 0.5\n        },\n        angle: 0,\n        scale: {\n            x: Scale,\n            y: Scale\n        }\n    };\n\n    async function SpellAnimation(number) {\n\n        let x = number;\n        // This is the interval in between the start of each animation on the loop in milliseconds\n        let interval = 1000;\n        for (var i = 0; i < x; i++) {\n            setTimeout(function () {\n                canvas.fxmaster.playVideo(spellAnim);\n                game.socket.emit('module.fxmaster', spellAnim);\n            }, i * interval);\n        }\n    }\n    // The number in parenthesis sets the number of times it loops\n    SpellAnimation(3)\n\n    // Add some sound\n    /*\n    await wait (200);\n    let soundFile = `sound path here`;\n    AudioHelper.play({src: soundFile, volume: 1.0, autoplay: true, loop: false}, true);\n    */\n\n    let params =\n        [{\n            filterType: \"wave\",\n            filterId: \"myShockwave\",\n            time: 0,\n            strength: 0.03,\n            frequency: 15,\n            maxIntensity: 4.0,\n            minIntensity: 0.5,\n            padding: 25,\n            animated:\n            {\n                time:\n                {\n                    active: true,\n                    speed: 0.0180,\n                    animType: \"move\",\n                }\n            }\n        },\n        {\n            filterType: \"xfire\",\n            filterId: \"myColdXFire\",\n            time: 0,\n            color: tmColor,\n            blend: 1,\n            amplitude: 1,\n            dispersion: 0,\n            chromatic: false,\n            scaleX: 1,\n            scaleY: 1,\n            inlay: false,\n            animated:\n            {\n                time:\n                {\n                    active: true,\n                    speed: -0.0015,\n                    animType: \"move\"\n                }\n            }\n        }];\n    await wait(1400);\n    TokenMagic.addUpdateFiltersOnTargeted(params);\n    await wait(3500);\n    TokenMagic.deleteFiltersOnTargeted();\n}\nCast()","author":"cDoi3U5MyHp0uBW1","img":"modules/jb2a_patreon/Library/2nd_Level/Shatter/Shatter_01_Blue_Thumb.webp","actorIds":[]}
{"_id":"gxdzdGks4dLft9DL","name":"FireboltMacro","permission":{"default":0,"cDoi3U5MyHp0uBW1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.zJIX0vCvfThpSfYO"}},"scope":"global","command":"const lastArg = args[args.length - 1];\nlet item = lastArg.item\n\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\nlet itemName = item.name.toLowerCase();\nlet itemSource = item.data.source.toLowerCase();\n\nfunction itemIncludes(test) {\n    if (itemSource.includes(test) || itemName.includes(test)) return true;\n}\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nlet type01 = \"01\";\nlet tint = \"Regular\";\nlet color = \"Orange\";\nlet tmColor = 0xFF9309;\n\nswitch (true) {\n    case (itemIncludes(\"orange\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Orange\";\n        tmColor = 0xFF9309;\n        break;\n    case (itemIncludes(\"green\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Green\";\n        tmColor = 0x59E81F;\n        break;\n    case (itemIncludes(\"blue\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Blue\";\n        tmColor = 0xBBDDEE;\n        break;\n    case (itemIncludes(\"purple\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Purple\";\n        tmColor = 0xFF09E1;\n        break;\n    case (itemIncludes(\"red\")):\n        type01 = \"01\";\n        tint = \"Dark\";\n        color = \"Red\";\n        tmColor = 0xBB1414;\n        break;\n}\n\n//\n// Token Magic FX Definitions for passing inside the switch\n// You can modify these, or add new ones based off other Token Magic FX animations\n// \nlet letitBurn =\n    [{\n        filterType: \"xfire\",\n        filterId: \"myColdXFire\",\n        time: 0,\n        // Can change color in hex format\n        color: tmColor,\n        blend: 1,\n        amplitude: 1,\n        dispersion: 0,\n        chromatic: false,\n        scaleX: 1,\n        scaleY: 1,\n        inlay: false,\n        autoDestroy: true,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: -0.0015,\n                animType: \"move\"\n            }\n\n        }\n    }];\n\nasync function Cast() {\n    //            change to lastArg.hitTargets to only play animations on hit using Midi Workflow option\n    var myStringArray = lastArg.targets;\n    var arrayLength = myStringArray.length;\n    for (var i = 0; i < arrayLength; i++) {\n\n        let mainTargetdata = myStringArray[i];\n        let mainTarget = canvas.tokens.get(mainTargetdata._id)\n        let myToken = canvas.tokens.get(lastArg.tokenId) || canvas.tokens.placeables.find(token => token.actor.items.get(item._id) != null)\n\n        // Defines a new Ray between the caster and target\n        let ray = new Ray(myToken.center, mainTarget.center);\n        // Determines the angle\n        let anDeg = -(ray.angle * 57.3);\n        // assigns the distance of the newly created Ray to anDist\n        let anDist = ray.distance;\n\n        // Base file path for this animation\n        let file = \"modules/jb2a_patreon/Library/Cantrip/Fire_Bolt/\";\n\n\n        let anFile = `${file}FireBolt_${type01}_${tint}_${color}_30ft_1600x400.webm`;\n\n        let anFileSize = 600;\n        let anchorX = 0.125;\n        switch (true) {\n            case (anDist <= 1600):\n                anFileSize = 1200;\n                anFile = `${file}FireBolt_${type01}_${tint}_${color}_30ft_1600x400.webm`;\n                anchorX = 0.125;\n                break;\n            case (anDist > 4000):\n                anFileSize = 3600;\n                anFile = `${file}FireBolt_${type01}_${tint}_${color}_90ft_4000x400.webm`;\n                anchorX = 0.05;\n                break;\n            default:\n                anFileSize = 2400;\n                anFile = `${file}FireBolt_${type01}_${tint}_${color}_60ft_2800x400.webm`;\n                anchorX = 0.071;\n                break;\n        }\n\n        let anScale = anDist / anFileSize;\n        let anScaleY = anDist <= 600 ? 0.6 : anScale;\n\n        let spellAnim =\n        {\n            file: anFile,\n            position: myToken.center,\n            anchor: {\n                x: anchorX,\n                y: 0.5\n            },\n            angle: anDeg,\n            scale: {\n                x: anScale,\n                y: anScaleY\n            }\n        };\n        canvas.fxmaster.playVideo(spellAnim);\n        game.socket.emit('module.fxmaster', spellAnim);\n\n        // Change the path here to a sound file you would like to use\n        let soundFile = `example/sound/file.mp3`;\n        switch (true) {\n            case (soundFile != \"example/sound/file.mp3\"):\n                AudioHelper.play({ src: soundFile, volume: 1.0, autoplay: true, loop: false }, true);\n                break;\n        }\n\n    }\n}\nCast()\n\n// Activates the Token Magic FX after a delay\nawait wait(1000);\nTokenMagic.addUpdateFiltersOnTargeted(letitBurn);\nawait wait(2000);\nTokenMagic.deleteFiltersOnTargeted();","author":"cDoi3U5MyHp0uBW1","img":"modules/jb2a_patreon/Library/Cantrip/Fire_Bolt/FireBolt_01_Regular_Orange_Thumb.webp","actorIds":[]}
{"_id":"h3vzjZQK7vfhUt9v","name":"HealingMacro","permission":{"default":0,"cDoi3U5MyHp0uBW1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.cBaJgHqRmQG8BKcn"}},"scope":"global","command":"// Requires a Target to be targeted\nif (game.user.targets.size == 0) ui.notifications.error('You must target at least one token');\n// Requires FX Master module\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\nconst lastArg = args[args.length - 1];\nlet item = lastArg.item;\nlet itemName = item.name.toLowerCase();\nlet itemSource = item.data.source.toLowerCase();\n\nfunction itemIncludes(test) {\n    if (itemSource.includes(test) || itemName.includes(test)) return true;\n}\n\nlet type01 = \"01\";\nlet color = \"Blue\";\nlet tmColor = 0x107BD9;\n\nswitch (true) {\n    case (itemIncludes(\"blue\")):\n        type01 = \"01\";\n        color = \"Blue\";\n        tmColor = 0x107BD9;\n        break;\n    case (itemIncludes(\"green\")):\n        type01 = \"01\";\n        color = \"Green\";\n        tmColor = 0x7BDA35;\n        break;\n    case (itemIncludes(\"purple\")):\n        type01 = \"01\";\n        color = \"Purple\";\n        tmColor = 0x9400CB;\n        break;\n    case (itemIncludes(\"yellow\")):\n        type01 = \"01\";\n        color = \"Yellow\";\n        tmColor = 0xE4B700;\n        break;\n}\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nasync function Cast() {\n\n    var myStringArray = lastArg.targets;\n    var arrayLength = myStringArray.length;\n    // Loops for multiple targets\n    for (var i = 0; i < arrayLength; i++) {\n        // Plays on targeted tokens\n        let mainTargetdata = myStringArray[i];\n        let mainTarget = canvas.tokens.get(mainTargetdata._id)\n        // Scaled by Target Size\n        let tarScale = ((mainTarget.data.width + mainTarget.data.height) / 4);\n        // Comment out above and use the below line to scale globally for size consistency. Alter divisor to change animation size\n        // let tarScale = canvas.scene.data.grid/100;\n\n        // Defining spell animation for FX Master\n        let spellAnim =\n        {\n            file: `modules/jb2a_patreon/Library/Generic/Healing/HealingAbility_${type01}_${color}_400x400.webm`,\n            position: mainTarget.center,\n            anchor: {\n                x: 0.5,\n                y: 0.5\n            },\n            angle: 0,\n            scale: {\n                x: tarScale,\n                y: tarScale\n            }\n        };\n        canvas.fxmaster.playVideo(spellAnim);\n        game.socket.emit('module.fxmaster', spellAnim);\n        // Add some sound\n        /*\n        await wait (100);\n        let soundFile = `sound path here`;\n        AudioHelper.play({src: soundFile, volume: 1.0, autoplay: true, loop: false}, true);\n        */\n\n        // Or play random sounds\n        /*\n        let soundHome = \"CustomSounds/battle/\";\n        \n        let m1 = `sound 01 file location here`;\n        let m2 = `sound 02 file location here`;\n        function random_sound(sounds)\n        {\n        return sounds[Math.floor(Math.random()*sounds.length)];\n        }\n        \n        var sounds = [m1, m2];\n        \n        let roll = new Roll('1d3').roll().total;\n        let soundFile = random_sound(sounds);\n        AudioHelper.play({src: soundHome + soundFile, volume: 0.9, autoplay: true, loop: false}, true);\n        */\n\n        let Holy =\n            [{\n                filterType: \"outline\",\n                filterId: \"myOutline\",\n                padding: 10,\n                // Change color in hex format\n                color: tmColor,\n                thickness: 1,\n                quality: 5,\n                zOrder: 9,\n                autoDestroy: true,\n                animated:\n                {\n                    thickness:\n                    {\n                        active: true,\n                        loopDuration: 800,\n                        loops: 4,\n                        animType: \"syncCosOscillation\",\n                        val1: 1,\n                        val2: 6\n                    }\n                }\n            }];\n\n        TokenMagic.addUpdateFiltersOnTargeted(Holy);\n    }\n}\nCast()","author":"cDoi3U5MyHp0uBW1","img":"modules/jb2a_patreon/Library/Generic/Healing/HealingAbility_01_Purple_Thumb.webp","actorIds":[]}
{"name":"AllCreatureAttacks","permission":{"default":0,"OAAx1jKOg1dYBpA6":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.qkq4UjGgx7cHii5n"}},"scope":"global","command":"//Requires and Target to be Targeted\nif (game.user.targets.size == 0) ui.notifications.error('You must target at least one token');\n//Requires FX Master Module\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\nconst lastArg = args[args.length - 1];\nlet item = lastArg.item;\nlet itemName = item.name.toLowerCase();\nlet itemSource = item.data.source.toLowerCase();\n\nfunction itemIncludes(test) {\n    if (itemSource.includes(test) || itemName.includes(test)) return true;\n}\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nlet type01 = \"01\";\nlet tint = \"Regular\";\nlet color = \"Red\";\n\nswitch (true) {\n    case (itemIncludes(\"darkred\")):\n        type01 = \"01\";\n        tint = \"Dark\";\n        color = \"Red\";\n        break;\n    case (itemIncludes(\"red\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Red\";\n        break;\n    case (itemIncludes(\"yellow\")):\n        type01 = \"01\";\n        switch (true) {\n            case (itemIncludes(\"bite\")):\n                tint = \"Regular\";\n                break;\n            default:\n                tint = \"Bright\";\n                break;\n        }\n        color = \"Yellow\";\n        break;\n    case (itemIncludes(\"purple\")):\n        type01 = \"01\";\n        switch (true) {\n            case (itemIncludes(\"bite\")):\n                tint = \"Regular\";\n                break;\n            default:\n                tint = \"Bright\";\n                break;\n        }\n        color = \"Purple\";\n        break;\n    case (itemIncludes(\"orange\")):\n        type01 = \"01\";\n        switch (true) {\n            case (itemIncludes(\"bite\")):\n                tint = \"Regular\";\n                break;\n            default:\n                tint = \"Bright\";\n                break;\n        }\n        color = \"Orange\";\n        break;\n    case (itemIncludes(\"green\")):\n        type01 = \"01\";\n        switch (true) {\n            case (itemIncludes(\"bite\")):\n                tint = \"Regular\";\n                break;\n            default:\n                tint = \"Bright\";\n                break;\n        }\n        color = \"Green\";\n        break;\n    case (itemIncludes(\"blue\")):\n        type01 = \"01\";\n        switch (true) {\n            case (itemIncludes(\"bite\")):\n                tint = \"Regular\";\n                break;\n            default:\n                tint = \"Bright\";\n                break;\n        }\n        color = \"Blue\";\n        break;\n}\n\nlet BloodyHitStutter =\n    [{\n        filterType: \"images\",\n        filterId: \"myMirrorImages\",\n        time: 0,\n        nbImage: 2,\n        alphaImg: 1.0,\n        alphaChr: 0.0,\n        autoDestroy: true,\n        blend: 4,\n        ampX: 0.03,\n        ampY: 0.03,\n        zOrder: 20,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: 0.070,\n                animType: \"move\",\n                loopDuration: 200,\n                loops: 2\n            },\n            anchorX:\n            {\n                animType: \"chaoticOscillation\",\n                loopDuration: 100,\n                val1: 0.40,\n                val2: 0.60,\n                loops: 4\n            }\n        }\n    },\n    {\n        filterType: \"splash\",\n        filterId: \"mySplash\",\n        rank: 5,\n        color: 0x990505,\n        padding: 80,\n        time: Math.random() * 1000,\n        seed: Math.random(),\n        splashFactor: 1,\n        spread: 0.4,\n        blend: 1,\n        dimX: 1,\n        dimY: 1,\n        cut: false,\n        textureAlphaBlend: true,\n        anchorX: 0.32 + (Math.random() * 0.36),\n        anchorY: 0.32 + (Math.random() * 0.36)\n    }];\n// Token Magic FX Definitions for passing inside the switch\nlet BloodSplat =\n    [{\n        filterType: \"splash\",\n        filterId: \"mySplash\",\n        rank: 5,\n        color: 0x990505,\n        padding: 80,\n        time: Math.random() * 1000,\n        seed: Math.random(),\n        splashFactor: 1,\n        spread: 0.4,\n        blend: 1,\n        dimX: 1,\n        dimY: 1,\n        cut: false,\n        textureAlphaBlend: true,\n        anchorX: 0.32 + (Math.random() * 0.36),\n        anchorY: 0.32 + (Math.random() * 0.36)\n    }];\n\n\nlet tmMacro;\nlet path;\n\nlet soundFile = `example/sound/file.mp3`;\nlet soundDelay = 50;\n\nswitch (true) {\n    case (itemIncludes(\"claw\")):\n        path = \"Claws\";\n        tmMacro = BloodSplat;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 50;\n        break;\n    case (itemIncludes(\"bite\")):\n        path = \"Bite\";\n        tmMacro = BloodyHitStutter;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 50;\n        break;\n}\n\nasync function Cast() {\n    // Will play on any number of targeted tokens\n    var myStringArray = lastArg.targets;\n    var arrayLength = myStringArray.length;\n    for (var i = 0; i < arrayLength; i++) {\n        console.log(myStringArray[i]);\n\n        let mainTargetdata = myStringArray[i];\n        let mainTarget = canvas.tokens.get(mainTargetdata._id)\n        // Scales with target size. Can change divisor to increase or decrease animation\n        let tarScale = ((mainTarget.data.width + mainTarget.data.height) / 2);\n        // Comment out above and activate below if you wish to scale globally for consistency\n        //let tarScale = canvas.scene.data.grid/100;\n\n        let spellAnim =\n        {\n            //                         File path to animation\n            file: `modules/jb2a_patreon/Library/Generic/Creature/${path}_${type01}_${tint}_${color}_400x400.webm`,\n            position: mainTarget.center,\n            anchor: {\n                x: 0.5,\n                y: 0.5\n            },\n            angle: 0,\n            scale: {\n                x: tarScale,\n                y: tarScale\n            }\n        };\n        canvas.fxmaster.playVideo(spellAnim);\n        game.socket.emit('module.fxmaster', spellAnim);\n        await wait(soundDelay);\n        switch (true) {\n            case (soundFile != \"example/sound/file.mp3\"):\n                AudioHelper.play({ src: soundFile, volume: 1.0, autoplay: true, loop: false }, true);\n                break;\n        }\n\n\n    }\n    await wait(250);\n    TokenMagic.addUpdateFiltersOnTargeted(tmMacro);\n    await wait(2000);\n    TokenMagic.deleteFiltersOnTargeted();\n}\nCast()","author":"OAAx1jKOg1dYBpA6","img":"icons/environment/creatures/fish-angler-blue.webp","actorIds":[],"_id":"hQXuyILmpHP1322w"}
{"_id":"hXccLhMhcouYyFVt","name":"AllMeleeAttacks","permission":{"default":0,"cDoi3U5MyHp0uBW1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.2qOZ3AJhad1LKZVq"}},"scope":"global","command":"/*\nThis macro REQUIRES Midi-QOL, The Furnace (with advanced macros), Token Magic FX and FXMaster. This Macro reads the Source Field AND/OR Name of the item and determines which animation to play. Here are a few examples of using the Source field to call the animation:\n\nItem\nLongsword: I want to play the Green Sword animation with this for Player A\nIn the Source Field, I will put the words Green Sword, and the macro uses that information to play the green fire sword animation.\n\nItem Maul: I want to play the Purple Maul animation for Player B\nIn the Source Field (or change the name), I will put the words Maul Purple, and the macro uses that information to play the purple maul animation.\n\nSimply place the name of this Macro into the On-Use field of the Item (at the bottom), and fill out the Source Field (or change the name) with the type of animation you want to use.\nExamples for reading the Source Field and what animation it plays:\n\nDagger Green - Plays the green dagger animation\nMaul Orange - Plays the Orange Maul animation\nMaul White- Plays the Standard Maul animation\nSpear Purple - Plays the Purple Spear animation\n\nEach animation can be customized with Token Magic FX and Sounds. You will need to set the individual sound files under each case below to sounds that you would like to use.\nIf you DO NOT want sounds or Token Magic FX playing, use the Melee_Base Macro \n*/\n\nconst lastArg = args[args.length - 1];\nlet item = lastArg.item\n\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\nlet itemName = item.name.toLowerCase();\nlet itemSource = item.data.source.toLowerCase();\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nfunction itemIncludes(test) {\n    if (itemSource.includes(test) || itemName.includes(test)) return true;\n}\n//\n//\n// Token Magic FX Definitions for passing inside the switch\n// You can modify these, or add new ones based off other Token Magic FX animations\n// \n//\n//\nlet BloodyHitStutter =\n    [{\n        filterType: \"images\",\n        filterId: \"myMirrorImages\",\n        time: 0,\n        nbImage: 2,\n        alphaImg: 1.0,\n        alphaChr: 0.0,\n        autoDestroy: true,\n        blend: 4,\n        ampX: 0.03,\n        ampY: 0.03,\n        zOrder: 20,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: 0.070,\n                animType: \"move\",\n                loopDuration: 200,\n                loops: 2\n            },\n            anchorX:\n            {\n                animType: \"chaoticOscillation\",\n                loopDuration: 100,\n                val1: 0.40,\n                val2: 0.60,\n                loops: 4\n            }\n        }\n    },\n    {\n        filterType: \"splash\",\n        filterId: \"mySplash\",\n        rank: 5,\n        color: 0x990505,\n        padding: 80,\n        time: Math.random() * 1000,\n        seed: Math.random(),\n        splashFactor: 1,\n        spread: 0.4,\n        blend: 1,\n        dimX: 1,\n        dimY: 1,\n        cut: false,\n        textureAlphaBlend: true,\n        anchorX: 0.32 + (Math.random() * 0.36),\n        anchorY: 0.32 + (Math.random() * 0.36)\n    }];\n// Token Magic FX Definitions for passing inside the switch\nlet BloodSplat =\n    [{\n        filterType: \"splash\",\n        filterId: \"mySplash\",\n        rank: 5,\n        color: 0x990505,\n        padding: 80,\n        time: Math.random() * 1000,\n        seed: Math.random(),\n        splashFactor: 1,\n        spread: 0.4,\n        blend: 1,\n        dimX: 1,\n        dimY: 1,\n        cut: false,\n        textureAlphaBlend: true,\n        anchorX: 0.32 + (Math.random() * 0.36),\n        anchorY: 0.32 + (Math.random() * 0.36)\n    }];\n// Token Magic FX Definitions for passing inside the switch\nlet HitStutter =\n    [{\n        filterType: \"images\",\n        filterId: \"myMirrorImages\",\n        time: 0,\n        nbImage: 2,\n        alphaImg: 1.0,\n        alphaChr: 0.0,\n        autoDestroy: true,\n        blend: 4,\n        ampX: 0.03,\n        ampY: 0.03,\n        zOrder: 20,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: 0.070,\n                animType: \"move\",\n                loopDuration: 200,\n                loops: 2\n            },\n            anchorX:\n            {\n                animType: \"chaoticOscillation\",\n                loopDuration: 100,\n                val1: 0.40,\n                val2: 0.60,\n                loops: 4\n            }\n        }\n    }];\nlet type01 = \"01\";\nlet tint = \"Regular\";\nlet color;\nswitch (true) {\n    case (itemIncludes(\"laser\")):\n        color = \"Blue\";\n        break;\n    default:\n        color = \"White\";\n}\nlet fireColor = \"pass\";\n//\n// Change the HEX Color code inside the switch to change the color of the fire burn on the TMFX call. I use https://htmlcolorcodes.com/ , and keep the 0x in front\n//\nswitch (true) {\n    case (itemIncludes(\"white\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"White\";\n        break;\n    case (itemIncludes(\"purple\")):\n        type01 = \"Fire\";\n        switch (true) {\n            case (itemIncludes(\"lasersword\")):\n                tint = \"Regular\";\n                break;\n            default:\n                tint = \"Dark\";\n                break;\n        }\n        color = \"Purple\";\n        fireColor = \"0x8B00C0\";\n        break;\n    case (itemIncludes(\"blue\")):\n        type01 = \"Fire\";\n        tint = \"Regular\";\n        color = \"Blue\";\n        fireColor = \"0x008FC0\";\n        break;\n    case (itemIncludes(\"green\")):\n        type01 = \"Fire\";\n        tint = \"Regular\";\n        color = \"Green\";\n        fireColor = \"0x60EA01\";\n        break;\n    case (itemIncludes(\"orange\")):\n        type01 = \"Fire\";\n        tint = \"Regular\";\n        color = \"Orange\";\n        fireColor = \"0xF18A07\";\n        break;\n    case (itemIncludes(\"pink\")):\n        type01 = \"Fire\";\n        tint = \"Regular\";\n        color = \"Pink\";\n        fireColor = \"0xD2049A\";\n        break;\n    case (itemIncludes(\"darkred\")):\n        type01 = \"Fire\";\n        tint = \"Dark\";\n        color = \"Red\";\n        fireColor = \"0x610101\";\n        break;\n    case (itemIncludes(\"red\")):\n        type01 = \"Fire\";\n        tint = \"Regular\";\n        color = \"Red\";\n        fireColor = \"0xD20404\";\n        break;\n    case (itemIncludes(\"yellow\")):\n        type01 = \"Fire\";\n        tint = \"Regular\";\n        color = \"Yellow\";\n        fireColor = \"0xCFD204\";\n        break;\n}\n//\n// Token Magic FX for burning fire. Reads the color input from above to set the color of the fire.\n//\nlet burn =\n    [{\n        filterType: \"xfire\",\n        filterId: \"myColdXFire\",\n        time: 0,\n        color: fireColor,\n        blend: 1,\n        amplitude: 1,\n        dispersion: 0,\n        chromatic: false,\n        scaleX: 1,\n        scaleY: 1,\n        inlay: false,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: -0.0015,\n                animType: \"move\"\n            }\n        }\n    }];\n\n// delay before activating the Token Magic FX Macros, change inside the switch cases to adjust the timing\nlet tmdelay = 1000;\n// delay before deleting Token Magic FX if needed, change inside switch cases to adjust the deletion\nlet tmkill = 1000;\n// calls a Token Magic FX macro defined above, change inside the switch cases to desired TMFX\nlet tmmacro = \"HitStutter\";\n// Delay for when the sound effect starts playing, change inside the switch cases to desired timing.\nlet soundDelay = 50;\n// Defines the sound to play when activated, change inside the switch cases to desired sound file\nlet soundFile = `example/sound/file.mp3`;\n\nlet item01 = \"Dagger02\";\nswitch (true) {\n    case (itemIncludes(\"greatsword\")):\n        item01 = \"GreatSword01\";\n        tmdelay = 1700;\n        tmkill = 1500;\n        tmmacro = BloodyHitStutter;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 100;\n        break;\n    case (itemIncludes(\"greatclub\")):\n        item01 = \"GreatClub01\";\n        tmdelay = 1000;\n        tmkill = 1500;\n        tmmacro = BloodyHitStutter;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 100;\n        break;\n    case (itemIncludes(\"greataxe\")):\n        item01 = \"GreatAxe01\";\n        tmdelay = 1700;\n        tmkill = 1500;\n        tmmacro = BloodyHitStutter;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 100;\n        break;\n    case (itemIncludes(\"handaxe\")):\n        item01 = \"HandAxe02\";\n        tmdelay = 1250;\n        tmkill = 1500;\n        tmmacro = BloodSplat;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 100;\n        break;\n    case (itemIncludes(\"mace\")):\n        item01 = \"Mace01\";\n        tmdelay = 1000;\n        tmkill = 1500;\n        tmmacro = BloodyHitStutter;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 100;\n        break;\n    case (itemIncludes(\"lasersword\")):\n        item01 = \"LaserSword01\";\n        type01 = \"01\";\n        tmdelay = 1200;\n        tmkill = 1500;\n        tmmacro = BloodSplat;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 100;\n        break;\n    case (itemIncludes(\"sword\")):\n        item01 = \"Sword01\";\n        tmdelay = 1200;\n        tmkill = 1500;\n        tmmacro = BloodSplat;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 100;\n        break;\n    case (itemIncludes(\"dagger\")):\n        item01 = \"Dagger02\";\n        tmdelay = 900;\n        tmkill = 1500;\n        tmmacro = BloodSplat;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 100;\n        break;\n    case (itemIncludes(\"maul\")):\n        item01 = \"Maul01\";\n        tmdelay = 1800;\n        tmkill = 1500;\n        tmmacro = BloodyHitStutter;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 100;\n        break;\n    case (itemIncludes(\"spear\")):\n        item01 = \"Spear01\";\n        tmdelay = 1100;\n        tmkill = 1500;\n        tmmacro = BloodSplat;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 100;\n        break;\n}\n\nasync function Cast() {\n    //         change to lastArg.hitTargets to only play animations on hit using Midi Workflow option\n    var myStringArray = lastArg.targets;\n    var arrayLength = myStringArray.length;\n    for (var i = 0; i < arrayLength; i++) {\n        let mainTargetdata = myStringArray[i];\n\n        // Scaled globally, change divisor to increase/decrease size of animation\n        let Scale = canvas.scene.data.grid / 175;\n        // randomly mirrors animation\n        var plusOrMinus = Math.random() < 0.5 ? -1 : 1;\n\n        let file = \"modules/jb2a_patreon/Library/Generic/Weapon_Attacks/Melee\";\n\n        let anim = `${file}/${item01}_${type01}_${tint}_${color}_800x600.webm`;\n\n        function castSpell(effect) {\n            const tokens = canvas.tokens.controlled;\n            game.user.targets.forEach((i, t) => {\n                canvas.fxmaster.drawSpecialToward(effect, tokens[0], t);\n\n            });\n        }\n        castSpell({\n            file: anim,\n            anchor: {\n                x: 0.4,\n                y: 0.5,\n            },\n            speed: 0,\n            angle: 0,\n            scale: {\n                x: Scale,\n                y: (Scale * plusOrMinus),\n            },\n        });\n\n        await wait(soundDelay);\n        switch (true) {\n            case (soundFile != \"example/sound/file.mp3\"):\n                AudioHelper.play({ src: soundFile, volume: 1.0, autoplay: true, loop: false }, true);\n                break;\n        }\n\n    }\n}\nCast()\n\n// Calls Token Magic FX macros as defined in the switches above.\nawait wait(tmdelay);\nTokenMagic.addUpdateFiltersOnTargeted(tmmacro);\n// checks to see if there is a fire type TMFX effect, and if so executes\nswitch (true) {\n    case (fireColor != \"pass\"):\n        TokenMagic.addUpdateFiltersOnTargeted(burn);\n        break;\n}\n// Waits a specified time before deleting any TMFX on the target\nawait wait(tmkill);\nTokenMagic.deleteFiltersOnTargeted();","author":"cDoi3U5MyHp0uBW1","img":"icons/weapons/swords/greatsword-guard-gold-worn.webp","actorIds":[]}
{"_id":"iyerEKKPgp9mtcX7","name":"ArrowExplodeMacro","permission":{"default":0,"cDoi3U5MyHp0uBW1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.zLF4fvQIlMgMG2ln"}},"scope":"global","command":"// Requires at least 1 target to play the animation\nif (game.user.targets.size == 0) ui.notifications.error('You must target at least one token');\n// Requires a token to be seleected to play the animation\nif (canvas.tokens.controlled.length == 0) ui.notifications.error(\"Please select your token\");\n// Requires FX Master Module\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\nconst lastArg = args[args.length - 1];\nlet item = lastArg.item\n\nlet itemName = item.name.toLowerCase();\nlet itemSource = item.data.source.toLowerCase();\n\nfunction itemIncludes(test) {\n    if (itemSource.includes(test) || itemName.includes(test)) return true;\n}\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nlet type01 = \"01\";\nlet type02 = \"01\";\nlet tint = \"Regular\";\nlet color = \"White\";\nlet color02 = \"Orange\"\nlet tmColor = 0xFF9309;\nlet tmMacro;\n\nswitch (true) {\n    case (itemIncludes(\"green\")):\n        type01 = \"01\";\n        tint = \"Glowing\";\n        color = \"Green\";\n        break;\n    case (itemIncludes(\"white\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"White\";\n        break;\n}\n\nswitch (true) {\n    case (itemIncludes(\"acid\")):\n        type02 = \"01\";\n        color02 = \"Green\";\n        tmColor = 0x60CC70;\n        break;\n    case (itemIncludes(\"explosive\")):\n        type02 = \"01\";\n        color02 = \"Orange\";\n        tmColor = 0xFF9309;\n        break;\n    case (itemIncludes(\"lightning\")):\n        type02 = \"01\";\n        color02 = \"Blue\";\n        tmColor = 0x053ABD;\n        break;\n\n}\n\n\nlet Poison =\n    [{\n        filterType: \"field\",\n        filterId: \"mySmokeField\",\n        shieldType: 3,\n        gridPadding: 1,\n        color: tmColor,\n        time: 0,\n        blend: 0,\n        intensity: 0.9,\n        lightAlpha: 1,\n        lightSize: 0.7,\n        scale: 1,\n        radius: 1,\n        chromatic: false,\n        zOrder: 512,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: 0.0015,\n                animType: \"move\"\n            }\n        }\n    }];\n\nlet letitBurn =\n    [{\n        filterType: \"xfire\",\n        filterId: \"myColdXFire\",\n        time: 0,\n        // Can change color in hex format\n        color: tmColor,\n        blend: 1,\n        amplitude: 1,\n        dispersion: 0,\n        chromatic: false,\n        scaleX: 1,\n        scaleY: 1,\n        inlay: false,\n        autoDestroy: true,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: -0.0015,\n                animType: \"move\"\n            }\n\n        }\n    }];\n\nlet Electric =\n    [{\n        filterType: \"electric\",\n        // Can change color in hex format\n        color: tmColor,\n        time: 0,\n        blend: 2,\n        intensity: 5,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: 0.0020,\n                animType: \"move\"\n            }\n\n        }\n    }];\n\nswitch (true) {\n    case (itemIncludes(\"acid\")):\n        tmMacro = Poison;\n        break;\n    case (itemIncludes(\"explosive\")):\n        tmMacro = letitBurn;\n        break;\n    case (itemIncludes(\"lightning\")):\n        tmMacro = Electric;\n        break;\n\n}\n\n\n\nasync function Cast() {\n\n    var myStringArray = lastArg.targets;\n    var arrayLength = myStringArray.length;\n    for (var i = 0; i < arrayLength; i++) {\n\n        await wait(500)\n\n        let mainTargetdata = myStringArray[i];\n        let mainTarget = canvas.tokens.get(mainTargetdata._id);\n        let myToken = canvas.tokens.get(lastArg.tokenId) || canvas.tokens.placeables.find(token => token.actor.items.get(item._id) != null)\n\n        let ray = new Ray(myToken.center, mainTarget.center);\n        let anDeg = -(ray.angle * 57.3);\n        let anDist = ray.distance;\n\n        // Animation file path\n        let file = \"modules/jb2a_patreon/Library/Generic/Weapon_Attacks/Ranged/\";\n\n        // Checking for range to target to choose which file to pull\n        let anFile = `${file}Arrow01_${type01}_${tint}_${color}_30ft_1600x400.webm`;\n        let anFileSize = 600;\n        let anchorX = 0.125;\n        let boomDelay = 1250;\n        switch (true) {\n            case (anDist <= 1200):\n                anFileSize = 1200;\n                anFile = `${file}Arrow01_${type01}_${tint}_${color}_30ft_1600x400.webm`;\n                anchorX = 0.125;\n                boomDelay = 1250;\n                break;\n            case (anDist > 2400):\n                anFileSize = 3600;\n                anFile = `${file}Arrow01_${type01}_${tint}_${color}_90ft_4000x400.webm`;\n                anchorX = 0.05;\n                boomDelay = 1750;\n                break;\n            default:\n                anFileSize = 2400;\n                anFile = `${file}Arrow01_${type01}_${tint}_${color}_60ft_2800x400.webm`;\n                anchorX = 0.071;\n                boomDelay = 1500;\n                break;\n        }\n\n        // Scaling the Height of the animation for consistency across ranges\n        let anScale = anDist / anFileSize;\n        let anScaleY = anDist <= 600 ? 0.6 : anScale;\n\n        let spellAnim =\n        {\n            file: anFile,\n            position: myToken.center,\n            anchor: {\n                x: anchorX,\n                y: 0.5\n            },\n            angle: anDeg,\n            scale: {\n                x: anScale,\n                y: anScaleY\n            }\n        };\n\n        let spellAnim2 =\n        {\n            file: `modules/jb2a_patreon/Library/Generic/Explosion/Explosion_${type02}_${color02}_400x400.webm`,\n            position: mainTarget.center,\n            anchor: {\n                x: 0.5,\n                y: 0.5\n            },\n            angle: 0,\n            scale: {\n                x: 1,\n                y: 1\n            }\n        };\n\n        canvas.fxmaster.playVideo(spellAnim);\n        game.socket.emit('module.fxmaster', spellAnim);\n\n        let soundFile = `example/sound/file.mp3`;\n        switch (true) {\n            case (soundFile != \"example/sound/file.mp3\"):\n                AudioHelper.play({ src: soundFile, volume: 1.0, autoplay: true, loop: false }, true);\n                break;\n        }\n\n        // Or play random sounds on each attack\n        /*\n        let soundHome = \"Sound/Folder/Path/Here\";\n        \n        let m1 = `sound-file-01-here`;\n        let m2 = `sound-file-02-here`;\n        function random_sound(sounds)\n        {\n        return sounds[Math.floor(Math.random()*sounds.length)];\n        }\n        \n        var sounds = [m1, m2];\n        \n        let roll = new Roll('1d3').roll().total;\n        let soundFile = random_sound(sounds);\n        AudioHelper.play({src: soundHome + soundFile, volume: 0.9, autoplay: true, loop: false}, true);\n        */\n\n        await wait(boomDelay);\n        canvas.fxmaster.playVideo(spellAnim2);\n        game.socket.emit('module.fxmaster', spellAnim2);\n        TokenMagic.addUpdateFiltersOnTargeted(tmMacro);\n        await wait(2500);\n        TokenMagic.deleteFiltersOnTargeted();\n\n        // Add a sound for the Explosion\n        await wait(50);\n        let ExplodingSound = `example/sound/file.mp3`;\n        switch (true) {\n            case (ExplodingSound != \"example/sound/file.mp3\"):\n                AudioHelper.play({ src: ExplodingSound, volume: 1.0, autoplay: true, loop: false }, true);\n                break;\n        }\n\n\n    }\n}\nCast()","author":"cDoi3U5MyHp0uBW1","img":"modules/jb2a_patreon/Library/Generic/Explosion/Explosion_01_Green_Thumb.webp","actorIds":[]}
{"_id":"k7uPJJibKdGTJ0yV","name":"ThunderwaveMacro","permission":{"default":0,"cDoi3U5MyHp0uBW1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.QgCo4EPz2NOe6l0K"}},"scope":"global","command":"// REQUIRES MIDI-QOL & FURNACE TO WORK CORRECTLY\n// Positional Macro for Thunderwave. Reads the Token Position around and inside the template to choose which animation to play.\n// Requires FX Master Module\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\nconst lastArg = args[args.length - 1];\nconst castingToken = canvas.tokens.get(lastArg.tokenId)\nlet item = lastArg.item;\n\nlet itemName = item.name.toLowerCase();\nlet itemSource = item.data.source.toLowerCase();\n\nlet type01 = \"01\";\nlet tint = \"Bright\";\nlet color = \"Blue\";\nlet tmColor = 0x0075B0;\n\nswitch (true) {\n    case (itemSource.includes(\"blue\")):\n        type01 = \"01\";\n        tint = \"Bright\";\n        color = \"Blue\";\n        tmColor = 0x0075B0;\n        break;\n    case (itemSource.includes(\"green\")):\n        type01 = \"01\";\n        tint = \"Bright\";\n        color = \"Green\";\n        tmColor = 0x15CA00;\n        break;\n    case (itemSource.includes(\"orange\")):\n        type01 = \"01\";\n        tint = \"Bright\";\n        color = \"Orange\";\n        tmColor = 0xD17506;\n        break;\n    case (itemSource.includes(\"purple\")):\n        type01 = \"01\";\n        tint = \"Dark\";\n        color = \"Purple\";\n        tmColor = 0xA90092;\n        break;\n    case (itemSource.includes(\"red\")):\n        type01 = \"01\";\n        tint = \"Dark\";\n        color = \"Red\";\n        tmColor = 0xC10000;\n        break;\n\n}\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\n    const templateID = canvas.templates.placeables[canvas.templates.placeables.length - 1].data._id;\n    let template = await canvas.templates.get(templateID);\n    let gridSize = canvas.scene.data.grid;\n    let Scale = canvas.scene.data.grid/200;\n    let myToken = canvas.tokens.get(lastArg.tokenId) || canvas.tokens.placeables.find(token => token.actor.items.get(item._id) != null)\n    let file = \"modules/jb2a_patreon/Library/1st_Level/Thunderwave/\";\n\nlet anFile = `${file}Thunderwave_${type01}_${tint}_${color}_BMid_600x600.webm`;\nlet ang = 0;\nswitch(true){\n   case ((myToken.data.x>=template.x && myToken.data.x<=(template.x + (gridSize *2))) && (myToken.data.y>=template.y && myToken.data.y<=(template.y + (gridSize *2)))):\n      ang = 0;\n      anFile = `${file}Thunderwave_${type01}_${tint}_${color}_Center_600x600.webm`;\n      break;\n   case ((myToken.data.x>=(template.x - gridSize)) && (myToken.data.x<=(template.x - (gridSize * 0.5)))) && ((myToken.data.y>=(template.y - gridSize)) && (myToken.data.y<=(template.y - (gridSize * 0.5)))):\n      ang = 270;\n      anFile = `${file}Thunderwave_${type01}_${tint}_${color}_BLeft_600x600.webm`;\n      break;\n   case ((myToken.data.x>=(template.x + (gridSize * 2.5))) && (myToken.data.x<=(template.x + (gridSize *3)))) && ((myToken.data.y>=(template.y - gridSize)) && (myToken.data.y<=(template.y - (gridSize * 0.5)))):\n      ang = 180;\n      anFile = `${file}Thunderwave_${type01}_${tint}_${color}_BLeft_600x600.webm`;\n      break;\n   case (((myToken.data.x>=(template.x + (gridSize * 2.5))) && myToken.data.x<=(template.x + (gridSize * 3))) && ((myToken.data.y<=(template.y + (gridSize * 3))) && (myToken.data.y>=(template.y + (gridSize * 2.5))))):\n      ang = 90;\n      anFile = `${file}Thunderwave_${type01}_${tint}_${color}_BLeft_600x600.webm`;\n      break;\n   case ((myToken.data.x<=(template.x - (gridSize * 0.5))) && (myToken.data.x>=(template.x - gridSize))) && ((myToken.data.y<=(template.y + (gridSize * 3))) && (myToken.data.y>=(template.y + (gridSize * 2.5)))):\n      ang = 0;\n      anFile = `${file}Thunderwave_${type01}_${tint}_${color}_BLeft_600x600.webm`;\n      break;\n   case (myToken.data.x==(template.x + (gridSize * 3))) && ((myToken.data.y>=template.y) && myToken.data.y<=(template.y + (gridSize*2))):\n      ang = 90;\n      break;\n   case ((myToken.data.x>=template.x) && (myToken.data.x<=(template.x + (gridSize * 2)))) && ((myToken.data.y>=(template.y - gridSize)) && (myToken.data.y<=(template.y - (gridSize * 0.5)))):\n      ang = 180;\n      break;\n   case ((myToken.data.x>=(template.x-gridSize)) && (myToken.data.x<=(template.x-(gridSize * 0.5)))) && ((myToken.data.y>=template.y) && myToken.data.y<=(template.y + (gridSize*2))):\n      ang = 270;\n      break;\n}\n   \n    let spellAnim = \n                    {\n                     file: anFile,\n                      position: {\n                       x: (template.x + (gridSize * 1.5)),\n                       y: (template.y + (gridSize * 1.5))\n                      },\n                      anchor: {\n                       x: 0.5,\n                       y: 0.5\n                      },\n                      angle: ang,\n                      scale: {\n                       x: Scale,\n                       y: Scale\n                      }\n                    };\n\nasync function SpellAnimation(number) {\n\n    let x = number;\n// This is the interval in between the start of each animation on the loop in milliseconds\n    let interval = 750;\n    for (var i = 0; i < x; i++) {\n         setTimeout(function() {\n             canvas.fxmaster.playVideo(spellAnim);\n             game.socket.emit('module.fxmaster', spellAnim);\n         }, i * interval);\n    }\n}\nSpellAnimation(3);\n\n\nawait wait (100);\nlet soundFile = `example/sound/file.mp3`;\nswitch (true) {\n    case (soundFile != \"example/sound/file.mp3\"):\n        AudioHelper.play({ src: soundFile, volume: 1.0, autoplay: true, loop: false }, true);\n        break;\n}\n\nlet params =\n[{\n    filterType: \"wave\",\n    filterId: \"myShockwave\",\n    time: 0,\n    strength: 0.03,\n    frequency: 15,\n    maxIntensity: 4.0,\n    minIntensity: 0.5,\n    padding:25,\n    animated :\n    {\n      time : \n      { \n        active: true, \n        speed: 0.0180,\n        animType: \"move\",\n       }\n    }\n},\n{\n    filterType: \"xfire\",\n    filterId: \"myColdXFire\",\n    time: 0,\n    color: tmColor,\n    blend: 1,\n    amplitude: 1,\n    dispersion: 0,\n    chromatic: false,\n    scaleX: 1,\n    scaleY: 1,\n    inlay: false,\n    animated :\n    {\n      time : \n      { \n        active: true, \n        speed: -0.0015, \n        animType: \"move\" \n      }\n    }\n}];\nawait wait(500);\nTokenMagic.addUpdateFiltersOnTargeted(params);\nawait wait(3500);\nTokenMagic.deleteFiltersOnTargeted();","author":"cDoi3U5MyHp0uBW1","img":"modules/jb2a_patreon/Library/1st_Level/Thunderwave/Thunderwave_01_Bright_Blue_BMid_Thumb.webp","actorIds":[]}
{"_id":"peWJ5Q3dbrxH6ebs","name":"LaserMacro","permission":{"default":0,"cDoi3U5MyHp0uBW1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.D4iwZwRj1EKMV5XM"}},"scope":"global","command":"// Requires at least 1 target to play the animation\nif (game.user.targets.size == 0) ui.notifications.error('You must target at least one token');\n// Requires FX Master Module\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\nconst lastArg = args[args.length - 1];\nlet item = lastArg.item\n\nlet itemName = item.name.toLowerCase();\nlet itemSource = item.data.source.toLowerCase();\n\nfunction itemIncludes(test) {\n    if (itemSource.includes(test) || itemName.includes(test)) return true;\n}\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nlet type01 = \"01\";\nlet tint = \"Regular\";\nlet color = \"Blue\";\nlet tmColor = 0x0075B0;\nlet tmDelay;\n\nswitch (true) {\n    case (itemIncludes(\"blue\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Blue\";\n        tmColor = 0x0075B0;\n        break;\n    case (itemIncludes(\"green\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Green\";\n        tmColor = 0x0EB400;\n        break;\n    case (itemIncludes(\"orange\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Orange\";\n        tmColor = 0xBF6E00;\n        break;\n    case (itemIncludes(\"red\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Red\";\n        tmColor = 0xBF0000;\n        break;\n}\n\nlet colorWave =\n[{\n    filterType: \"wave\",\n    filterId: \"myShockwave\",\n    time: 0,\n    strength: 0.03,\n    frequency: 15,\n    maxIntensity: 4.0,\n    minIntensity: 0.5,\n    padding: 25,\n    animated:\n    {\n        time:\n        {\n            active: true,\n            speed: 0.0180,\n            animType: \"move\",\n        }\n    }\n},\n{\n    filterType: \"xfire\",\n    filterId: \"myColdXFire\",\n    time: 0,\n    color: tmColor,\n    blend: 1,\n    amplitude: 1,\n    dispersion: 0,\n    chromatic: false,\n    scaleX: 1,\n    scaleY: 1,\n    inlay: false,\n    animated:\n    {\n        time:\n        {\n            active: true,\n            speed: -0.0015,\n            animType: \"move\"\n        }\n    }\n}];\n\nasync function Cast() {\n\n    var myStringArray = lastArg.targets;\n    var arrayLength = myStringArray.length;\n    for (var i = 0; i < arrayLength; i++) {\n\n        await wait(500)\n\n        let mainTargetdata = myStringArray[i];\n        let mainTarget = canvas.tokens.get(mainTargetdata._id);\n        let myToken = canvas.tokens.get(lastArg.tokenId) || canvas.tokens.placeables.find(token => token.actor.items.get(item._id) != null)\n\n        let ray = new Ray(myToken.center, mainTarget.center);\n        let anDeg = -(ray.angle * 57.3);\n        let anDist = ray.distance;\n\n        // Animation file path\n        let file = \"modules/jb2a_patreon/Library/Generic/Weapon_Attacks/Ranged/\";\n\n        // Checking for range to target to choose which file to pull\n        let anFile = `${file}LaserShot_${type01}_${tint}_${color}_30ft_1600x400.webm`;\n        let anFileSize = 600;\n        let anchorX = 0.125;\n        switch (true) {\n            case (anDist <= 1200):\n                anFileSize = 1200;\n                anFile = `${file}LaserShot_${type01}_${tint}_${color}_30ft_1600x400.webm`;\n                anchorX = 0.125;\n                tmDelay = 500;\n                break;\n            case (anDist > 2400):\n                anFileSize = 3600;\n                anFile = `${file}LaserShot_${type01}_${tint}_${color}_90ft_4000x400.webm`;\n                anchorX = 0.05;\n                tmDelay = 500;\n                break;\n            default:\n                anFileSize = 2400;\n                anFile = `${file}LaserShot_${type01}_${tint}_${color}_60ft_2800x400.webm`;\n                anchorX = 0.071;\n                tmDelay = 500;\n                break;\n        }\n\n        // Scaling the Height of the animation for consistency across ranges\n        let anScale = anDist / anFileSize;\n        let anScaleY = anDist <= 600 ? 0.6 : anScale;\n\n        let spellAnim =\n        {\n            file: anFile,\n            position: myToken.center,\n            anchor: {\n                x: anchorX,\n                y: 0.5\n            },\n            angle: anDeg,\n            scale: {\n                x: anScale,\n                y: anScaleY\n            }\n        };\n\n        async function SpellAnimation(number) {\n\n            let x = number;\n            let interval = 250;\n            for (var i = 0; i < x; i++) {\n                setTimeout(function () {\n                    canvas.fxmaster.playVideo(spellAnim);\n                    game.socket.emit('module.fxmaster', spellAnim);\n                    let soundFile = `example/sound/file.mp3`;\n                    switch (true) {\n                        case (soundFile != \"example/sound/file.mp3\"):\n                            AudioHelper.play({ src: soundFile, volume: 1.0, autoplay: true, loop: false }, true);\n                            break;\n                    }\n\n                }, i * interval);\n            }\n            await wait(interval * x + 1000);\n            TokenMagic.deleteFiltersOnTargeted();\n        }\n        SpellAnimation(3)\n        await wait(tmDelay);\n        TokenMagic.addUpdateFiltersOnTargeted(colorWave);\n\n    }\n\n}\nCast()","author":"cDoi3U5MyHp0uBW1","img":"modules/jb2a_patreon/Library/Generic/Weapon_Attacks/Ranged/LaserShot_01_Regular_Blue_Thumb.webp","actorIds":[]}
{"_id":"wXOfyFhsidKDslY9","name":"DisintegrateMacro","permission":{"default":0,"cDoi3U5MyHp0uBW1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.4rK3ITymjhSRfSHt"}},"scope":"global","command":"const lastArg = args[args.length - 1];\nlet item = lastArg.item\n\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\nlet itemName = item.name.toLowerCase();\nlet itemSource = item.data.source.toLowerCase();\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nlet type01 = \"01\";\nlet tint = \"Regular\";\nlet color = \"Green01\";\nlet tmColor = 0x61C100;\n\nswitch (true) {\n    case (itemSource.includes(\"darkred\")):\n        type01 = \"01\";\n        tint = \"Dark\";\n        color = \"Red\";\n        tmColor = 0xA00000;\n        break;\n    case (itemSource.includes(\"green\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Green01\";\n        tmColor = 0x61C100;\n        break;\n    case (itemSource.includes(\"orangepink\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"OrangePink\";\n        tmColor = 0xC1005B;\n        break;\n    case (itemSource.includes(\"purpleblue\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"PurpleBlue\";\n        tmColor = 0x00AFC1;\n        break;\n}\n\n//\n// Token Magic FX Definitions for passing inside the switch\n// You can modify these, or add new ones based off other Token Magic FX animations\n// \nlet Ashes =\n    [{\n        filterType: \"fire\",\n        filterId: \"myFire\",\n        intensity: 3,\n        color: tmColor,\n        amplitude: 2,\n        time: 0,\n        blend: 10,\n        fireBlend: 1,\n        alphaDiscard: true,\n        zOrder: 50,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: -0.0024,\n                animType: \"move\"\n            }\n        }\n    }, {\n        filterType: \"glow\",\n        filterId: \"glowripples\",\n        outerStrength: 4,\n        innerStrength: 2,\n        color: tmColor,\n        quality: 0.5,\n        padding: 10,\n        zOrder: 100,\n    }];\n\nasync function Cast() {\n    //            change to lastArg.hitTargets to only play animations on hit using Midi Workflow option\n    var myStringArray = lastArg.targets;\n    var arrayLength = myStringArray.length;\n    for (var i = 0; i < arrayLength; i++) {\n\n        let mainTargetdata = myStringArray[i];\n        let mainTarget = canvas.tokens.get(mainTargetdata._id)\n        let myToken = canvas.tokens.get(lastArg.tokenId) || canvas.tokens.placeables.find(token => token.actor.items.get(item._id) != null)\n\n        // Defines a new Ray between the caster and target\n        let ray = new Ray(myToken.center, mainTarget.center);\n        // Determines the angle\n        let anDeg = -(ray.angle * 57.3);\n        // assigns the distance of the newly created Ray to anDist\n        let anDist = ray.distance;\n\n        // Base file path for this animation\n        let file = \"modules/jb2a_patreon/Library/6th_Level/Disintegrate/\";\n\n\n        let anFile = `${file}Disintegrate_${type01}_${tint}_${color}_15ft_1000x400.webm`;\n        let anFileSize = 600;\n        let anchorX = 0.2;\n        switch (true) {\n            case (anDist <= 600):\n                anFileSize = 600;\n                anFile = `${file}Disintegrate_${type01}_${tint}_${color}_15ft_1000x400.webm`;\n                anchorX = 0.2;\n                break;\n            case (anDist > 1200):\n                anFileSize = 1800;\n                anFile = `${file}Disintegrate_${type01}_${tint}_${color}_45ft_2200x400.webm`;\n                anchorX = 0.091;\n                break;\n            default:\n                anFileSize = 1200;\n                anFile = `${file}Disintegrate_${type01}_${tint}_${color}_30ft_1600x400.webm`;\n                anchorX = 0.125;\n                break;\n        }\n\n        let anScale = anDist / anFileSize;\n        let anScaleY = anDist <= 600 ? 0.6 : anScale;\n\n        let spellAnim =\n        {\n            file: anFile,\n            position: myToken.center,\n            anchor: {\n                x: anchorX,\n                y: 0.5\n            },\n            angle: anDeg,\n            scale: {\n                x: anScale,\n                y: anScaleY\n            }\n        };\n        canvas.fxmaster.playVideo(spellAnim);\n        game.socket.emit('module.fxmaster', spellAnim);\n\n        // Change the path here to a sound file you would like to use\n        let soundFile = `example/sound/file.mp3`;\n        switch (true) {\n            case (soundFile != \"example/sound/file.mp3\"):\n                AudioHelper.play({ src: soundFile, volume: 1.0, autoplay: true, loop: false }, true);\n                break;\n        }\n\n    }\n}\nCast()\n\n// Activates the Token Magic FX after a delay\nawait wait(500);\nTokenMagic.addUpdateFiltersOnTargeted(Ashes);\nawait wait(2000);\nTokenMagic.deleteFiltersOnTargeted();","author":"cDoi3U5MyHp0uBW1","img":"modules/jb2a_patreon/Library/6th_Level/Disintegrate/Disintegrate_01_Dark_Red_Thumb.webp","actorIds":[]}
{"_id":"xwsBlK9Sga3ys2KL","name":"ArrowMacro","permission":{"default":0,"cDoi3U5MyHp0uBW1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.nDVNlBSqGOLEng9L"}},"scope":"global","command":"// Requires at least 1 target to play the animation\nif (game.user.targets.size == 0) ui.notifications.error('You must target at least one token');\n// Requires FX Master Module\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\nconst lastArg = args[args.length - 1];\nlet item = lastArg.item\n\nlet itemName = item.name.toLowerCase();\nlet itemSource = item.data.source.toLowerCase();\n\nfunction itemIncludes(test) {\n    if (itemSource.includes(test) || itemName.includes(test)) return true;\n}\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nlet type01 = \"01\";\nlet tint = \"Regular\";\nlet color = \"White\";\nlet tmColor = 0xFF9309;\nlet tmDelay;\n\nswitch (true) {\n    case (itemIncludes(\"green\")):\n        type01 = \"01\";\n        tint = \"Glowing\";\n        color = \"Green\";\n        tmColor = 0xFF9309;\n        break;\n    case (itemIncludes(\"white\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"White\";\n        tmColor = 0x59E81F;\n        break;\n}\n\nlet Poison =\n    [{\n        filterType: \"field\",\n        filterId: \"mySmokeField\",\n        shieldType: 3,\n        gridPadding: 1,\n        color: 0x60CC70,\n        time: 0,\n        blend: 0,\n        intensity: 0.9,\n        lightAlpha: 1,\n        lightSize: 0.7,\n        scale: 1,\n        radius: 1,\n        chromatic: false,\n        zOrder: 512,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: 0.0015,\n                animType: \"move\"\n            }\n        }\n    }];\n\nlet BloodSplat =\n    [{\n        filterType: \"splash\",\n        filterId: \"mySplash\",\n        rank: 5,\n        color: 0x990505,\n        padding: 80,\n        time: Math.random() * 1000,\n        seed: Math.random(),\n        splashFactor: 1,\n        spread: 0.4,\n        blend: 1,\n        dimX: 1,\n        dimY: 1,\n        cut: false,\n        textureAlphaBlend: true,\n        anchorX: 0.32 + (Math.random() * 0.36),\n        anchorY: 0.32 + (Math.random() * 0.36)\n    }];\n\nlet tmMacro = BloodSplat;\n\nswitch (true) {\n    case (itemIncludes(\"green\")):\n        tmMacro = Poison;\n        break;\n    case (itemIncludes(\"white\")):\n        tmMacro = BloodSplat;\n        break;\n}\n\n\nasync function Cast() {\n\n    var myStringArray = lastArg.targets;\n    var arrayLength = myStringArray.length;\n    for (var i = 0; i < arrayLength; i++) {\n\n        await wait(500)\n\n        let mainTargetdata = myStringArray[i];\n        let mainTarget = canvas.tokens.get(mainTargetdata._id);\n        let myToken = canvas.tokens.get(lastArg.tokenId) || canvas.tokens.placeables.find(token => token.actor.items.get(item._id) != null)\n\n        let ray = new Ray(myToken.center, mainTarget.center);\n        let anDeg = -(ray.angle * 57.3);\n        let anDist = ray.distance;\n\n        // Animation file path\n        let file = \"modules/jb2a_patreon/Library/Generic/Weapon_Attacks/Ranged/\";\n\n        // Checking for range to target to choose which file to pull\n        let anFile = `${file}Arrow01_${type01}_${tint}_${color}_30ft_1600x400.webm`;\n        let anFileSize = 600;\n        let anchorX = 0.125;\n        switch (true) {\n            case (anDist <= 1200):\n                anFileSize = 1200;\n                anFile = `${file}Arrow01_${type01}_${tint}_${color}_30ft_1600x400.webm`;\n                anchorX = 0.125;\n                tmDelay = 750;\n                break;\n            case (anDist > 2400):\n                anFileSize = 3600;\n                anFile = `${file}Arrow01_${type01}_${tint}_${color}_90ft_4000x400.webm`;\n                anchorX = 0.05;\n                tmDelay = 1100;\n                break;\n            default:\n                anFileSize = 2400;\n                anFile = `${file}Arrow01_${type01}_${tint}_${color}_60ft_2800x400.webm`;\n                anchorX = 0.071;\n                tmDelay = 900;\n                break;\n        }\n\n        // Scaling the Height of the animation for consistency across ranges\n        let anScale = anDist / anFileSize;\n        let anScaleY = anDist <= 600 ? 0.6 : anScale;\n\n        let spellAnim =\n        {\n            file: anFile,\n            position: myToken.center,\n            anchor: {\n                x: anchorX,\n                y: 0.5\n            },\n            angle: anDeg,\n            scale: {\n                x: anScale,\n                y: anScaleY\n            }\n        };\n\n        canvas.fxmaster.playVideo(spellAnim);\n        game.socket.emit('module.fxmaster', spellAnim);\n\n        let soundFile = `example/sound/file.mp3`;\n        switch (true) {\n            case (soundFile != \"example/sound/file.mp3\"):\n                AudioHelper.play({ src: soundFile, volume: 1.0, autoplay: true, loop: false }, true);\n                break;\n        }\n\n\n        // Or play random sounds on each attack\n        /*\n        let soundHome = \"Sound/Folder/Path/Here\";\n        \n        let m1 = `sound-file-01-here`;\n        let m2 = `sound-file-02-here`;\n        function random_sound(sounds)\n        {\n        return sounds[Math.floor(Math.random()*sounds.length)];\n        }\n        \n        var sounds = [m1, m2];\n        \n        let roll = new Roll('1d3').roll().total;\n        let soundFile = random_sound(sounds);\n        AudioHelper.play({src: soundHome + soundFile, volume: 0.9, autoplay: true, loop: false}, true);\n        */\n        await wait(tmDelay);\n        TokenMagic.addUpdateFiltersOnTargeted(tmMacro);\n        await wait(tmDelay + 1000);\n        TokenMagic.deleteFiltersOnTargeted();\n    }\n}\nCast()","author":"cDoi3U5MyHp0uBW1","img":"icons/weapons/ammunition/arrow-simple-brown.webp","actorIds":[]}
{"_id":"eW0yklu6mFPdMN6J","name":"AllAttackSpells","permission":{"default":0,"cDoi3U5MyHp0uBW1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.f7CE5HlkbKFT6xai"}},"scope":"global","command":"const lastArg = args[args.length - 1];\nlet item = lastArg.item\n\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\nlet itemName = item.name.toLowerCase();\nlet itemSource = item.data.source.toLowerCase();\nlet path00 = game.modules.get(\"jb2a_patreon\") === true ? \"JB2A_DnD5e\" : \"jb2a_patreon\";\n\nfunction itemIncludes(test) {\n    if (itemSource.includes(test) || itemName.includes(test)) return true;\n}\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nlet tint;\nlet color;\nlet tmColor;\nlet path;\nlet path2;\n\nswitch (true) {\n    case (itemIncludes(\"fire bolt\")):\n        path = \"Cantrip/Fire_Bolt\";\n        path2 = \"FireBolt_01\";\n        tint = \"Regular\";\n        color = \"Orange\";\n        tmColor = 0xFF9309;\n        break;\n    case (itemIncludes(\"ray of frost\")):\n        path = \"Cantrip/Ray_Of_Frost\";\n        path2 = \"RayOfFrost_01\";\n        tint = \"Regular\";\n        color = \"Blue\";\n        tmColor = 0xBBDDEE;\n        break;\n    case (itemIncludes(\"witch bolt\")):\n        path = \"1st_Level/Witch_Bolt\";\n        path2 = \"WitchBolt_01\";\n        tint = \"Dark\";\n        color = \"Purple\";\n        tmColor = 0xAE00AE;\n        break;\n    case (itemIncludes(\"scorching ray\")):\n        path = \"2nd_Level/Scorching_Ray\";\n        path2 = \"ScorchingRay_01\";\n        tint = \"Regular\";\n        color = \"Orange\";\n        tmColor = 0xFF9309;\n        break;\n    case (itemIncludes(\"disintegrate\")):\n        path = \"6th_Level/Disintegrate\";\n        path2 = \"Disintegrate_01\";\n        tint = \"Regular\";\n        color = \"PurpleBlue\";\n        tmColor = 0x00AFC1;\n        break;\n}\n\nswitch (true) {\n    case (itemIncludes(\"orangepink\")):\n        tint = \"Regular\";\n        color = \"OrangePink\";\n        tmColor = 0xC1005B;\n        break;\n    case (itemIncludes(\"purpleblue\")):\n        tint = \"Regular\";\n        color = \"PurpleBlue\";\n        tmColor = 0x00AFC1;\n        break;\n    case (itemIncludes(\"darkpurple\")):\n        tint = \"Dark\";\n        color = \"Purple\";\n        tmColor = 0xAE00AE;\n        break;\n    case (itemIncludes(\"darkgreen\")):\n        tint = \"Dark\";\n        color = \"Green\";\n        tmColor = 0x187C00;\n        break;\n    case (itemIncludes(\"darkred\")):\n        tint = \"Dark\";\n        color = \"Red\";\n        tmColor = 0x8E0000;\n        break;\n    case (itemIncludes(\"blueyellow\")):\n        tint = \"Regular\";\n        color = \"BlueYellow\";\n        tmColor = 0xACC5C5;\n        break;\n    case (itemIncludes(\"purpleteal\")):\n        tint = \"Regular\";\n        color = \"PurpleTeal\";\n        tmColor = 0xC38CDC;\n        break;\n    case (itemIncludes(\"orange\")):\n        tint = \"Regular\";\n        color = \"Orange\";\n        tmColor = 0xFF9309;\n        break;\n    case (itemIncludes(\"green\")):\n        tint = \"Regular\";\n        switch (true) {\n            case (itemIncludes(\"disintegrate\")):\n                color = \"Green01\";\n                break;\n            default:\n                color = \"Green\";\n                break;\n        }\n        tmColor = 0x59E81F;\n        break;\n    case (itemIncludes(\"blue\")):\n        tint = \"Regular\";\n        color = \"Blue\";\n        tmColor = 0xBBDDEE;\n        break;\n    case (itemIncludes(\"purple\")):\n        tint = \"Regular\";\n        color = \"Purple\";\n        tmColor = 0xFF09E1;\n        break;\n    case (itemIncludes(\"red\")):\n        switch (true) {\n            case (itemIncludes(\"fire bolt\")):\n                tint = \"Dark\";\n                break;\n            default:\n                tint = \"Regular\";\n        }\n        color = \"Red\";\n        tmColor = 0xBB1414;\n        break;\n    case (itemIncludes(\"yellow\")):\n        tint = \"Regular\";\n        color = \"Yellow\";\n        tmColor = 0xFF0000;\n        break;\n}\n\nlet letitBurn =\n    [{\n        filterType: \"xfire\",\n        filterId: \"myColdXFire\",\n        time: 0,\n        // Can change color in hex format\n        color: tmColor,\n        blend: 1,\n        amplitude: 1,\n        dispersion: 0,\n        chromatic: false,\n        scaleX: 1,\n        scaleY: 1,\n        inlay: false,\n        autoDestroy: true,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: -0.0015,\n                animType: \"move\"\n            }\n\n        }\n    }];\nlet Frosty =\n    [{\n        filterType: \"xfire\",\n        filterId: \"mySuperFrost\",\n        color: tmColor,\n        time: 0,\n        blend: 5,\n        amplitude: 1,\n        dispersion: 0,\n        chromatic: false,\n        scaleX: 1,\n        scaleY: 1,\n        inlay: true,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: -0.0020,\n                animType: \"move\"\n            }\n\n        }\n    }];\nlet Ashes =\n    [{\n        filterType: \"fire\",\n        filterId: \"myFire\",\n        intensity: 3,\n        color: tmColor,\n        amplitude: 2,\n        time: 0,\n        blend: 10,\n        fireBlend: 1,\n        alphaDiscard: true,\n        zOrder: 50,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: -0.0024,\n                animType: \"move\"\n            }\n        }\n    }, {\n        filterType: \"glow\",\n        filterId: \"glowripples\",\n        outerStrength: 4,\n        innerStrength: 2,\n        color: tmColor,\n        quality: 0.5,\n        padding: 10,\n        zOrder: 100,\n    }];\nlet Electric =\n    [{\n        filterType: \"electric\",\n        // Can change color in hex format\n        color: tmColor,\n        time: 0,\n        blend: 2,\n        intensity: 5,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: 0.0020,\n                animType: \"move\"\n            }\n\n        }\n    }];\n\nlet tmDelay;\nlet tmKill;\nlet tmMacro;\nlet soundFile = `example/sound/file.mp3`;\nlet soundDelay = 50;\n\nswitch (true) {\n    case (itemIncludes(\"fire bolt\")):\n        tmDelay = 1000;\n        tmKill = 2000;\n        tmMacro = letitBurn;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 50;\n        break;\n    case (itemIncludes(\"ray of frost\")):\n        tmDelay = 1000;\n        tmKill = 2000;\n        tmMacro = Frosty;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 50;\n        break;\n    case (itemIncludes(\"witch bolt\")):\n        tmDelay = 50;\n        tmKill = 4000;\n        tmMacro = Electric;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 50;\n        break;\n    case (itemIncludes(\"scorching ray\")):\n        tmDelay = 500;\n        tmKill = 2000;\n        tmMacro = letitBurn;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 50;\n        break;\n    case (itemIncludes(\"disintegrate\")):\n        tmDelay = 500;\n        tmKill = 2000;\n        tmMacro = Ashes;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 50;\n        break;\n}\n\n\nasync function Cast() {\n    //            change to lastArg.hitTargets to only play animations on hit using Midi Workflow option\n    var myStringArray = lastArg.targets;\n    var arrayLength = myStringArray.length;\n    for (var i = 0; i < arrayLength; i++) {\n\n        let mainTargetdata = myStringArray[i];\n        let mainTarget = canvas.tokens.get(mainTargetdata._id)\n        let myToken = canvas.tokens.get(lastArg.tokenId) || canvas.tokens.placeables.find(token => token.actor.items.get(item._id) != null)\n\n        let saves = Array.from(lastArg.saves.filter(data => data.actorId).map(data => data.actorId));\n        //   console.log(saves);\n\n        function saveCheck(test) {\n            if (saves.includes(test)) return true;\n        }\n\n\n        // Defines a new Ray between the caster and target\n        let ray = new Ray(myToken.center, mainTarget.center);\n        // Determines the angle\n        let anDeg = -(ray.angle * 57.3);\n        // assigns the distance of the newly created Ray to anDist\n        let anDist = ray.distance;\n\n        // Base file path for this animation\n        let file = `modules/${path00}/Library/${path}`;\n\n        let anFile;\n        let anFileSize = 600;\n        let anchorX = 0.2;\n\n        switch (true) {\n            case (itemIncludes(\"fire bolt\")):\n                switch (true) {\n                    case (anDist <= 1600):\n                        anFileSize = 1200;\n                        anFile = `${file}/${path2}_${tint}_${color}_30ft_1600x400.webm`;\n                        anchorX = 0.125;\n                        break;\n                    case (anDist > 4000):\n                        anFileSize = 3600;\n                        anFile = `${file}/${path2}_${tint}_${color}_90ft_4000x400.webm`;\n                        anchorX = 0.05;\n                        break;\n                    default:\n                        anFileSize = 2400;\n                        anFile = `${file}/${path2}_${tint}_${color}_60ft_2800x400.webm`;\n                        anchorX = 0.071;\n                        break;\n                }\n                break;\n            case (itemIncludes(\"ray of frost\")):\n                switch (true) {\n                    case (anDist <= 600):\n                        anFileSize = 600;\n                        anFile = `${file}/${path2}_${tint}_${color}_15ft_1000x400.webm`;\n                        anchorX = 0.2;\n                        break;\n                    case (anDist > 1200):\n                        anFileSize = 1800;\n                        anFile = `${file}/${path2}_${tint}}_${color}_45ft_2200x400.webm`;\n                        anchorX = 0.091;\n                        break;\n                    default:\n                        anFileSize = 1200;\n                        anFile = `${file}/${path2}_${tint}_${color}_30ft_1600x400.webm`;\n                        anchorX = 0.125;\n                        break;\n                }\n                break;\n            case (itemIncludes(\"witch bolt\")):\n                switch (true) {\n                    case (anDist <= 600):\n                        anFileSize = 600;\n                        anFile = `${file}/${path2}_${tint}_${color}_15ft_1000x400.webm`;\n                        anchorX = 0.2;\n                        break;\n                    default:\n                        anFileSize = 1200;\n                        anFile = `${file}/${path2}_${tint}_${color}_30ft_1600x400.webm`;\n                        anchorX = 0.125;\n                        break;\n                }\n                break;\n            case (itemIncludes(\"scorching ray\")):\n                switch (true) {\n                    case (anDist <= 1600):\n                        anFileSize = 1200;\n                        anFile = `${file}/${path2}_${tint}_${color}_30ft_1600x400.webm`;\n                        anchorX = 0.125;\n                        break;\n                    case (anDist <= 4000):\n                        anFileSize = 3600;\n                        anFile = `${file}/${path2}_${tint}_${color}_90ft_4000x400.webm`;\n                        anchorX = 0.05;\n                        break;\n                    default:\n                        anFileSize = 2400;\n                        anFile = `${file}/${path2}_${tint}_${color}_60ft_2800x400.webm`;\n                        anchorX = 0.071;\n                        break;\n                }\n                break;\n            case (itemIncludes(\"disintegrate\")):\n                switch (true) {\n                    case (anDist <= 600):\n                        anFileSize = 600;\n                        anFile = `${file}/${path2}_${tint}_${color}_15ft_1000x400.webm`;\n                        anchorX = 0.2;\n                        break;\n                    case (anDist > 1200):\n                        anFileSize = 1800;\n                        anFile = `${file}/${path2}_${tint}_${color}_45ft_2200x400.webm`;\n                        anchorX = 0.091;\n                        break;\n                    default:\n                        anFileSize = 1200;\n                        anFile = `${file}/${path2}_${tint}_${color}_30ft_1600x400.webm`;\n                        anchorX = 0.125;\n                        break;\n                }\n                break;\n\n        }\n\n        let anScale = anDist / anFileSize;\n        let anScaleY = anDist <= 600 ? 0.6 : anScale;\n\n        let spellAnim =\n        {\n            file: anFile,\n            position: myToken.center,\n            anchor: {\n                x: anchorX,\n                y: 0.5\n            },\n            angle: anDeg,\n            scale: {\n                x: anScale,\n                y: anScaleY\n            }\n        };\n        canvas.fxmaster.playVideo(spellAnim);\n        game.socket.emit('module.fxmaster', spellAnim);\n\n        switch (true) {\n            case (soundFile != \"example/sound/file.mp3\"):\n                AudioHelper.play({ src: soundFile, volume: 1.0, autoplay: true, loop: false }, true);\n                break;\n        }\n        switch (true) {\n            case (saveCheck(mainTargetdata.actorId)):\n                break;\n            default:\n                await wait(tmDelay);\n                TokenMagic.addUpdateFiltersOnTargeted(tmMacro);\n                await wait(tmKill);\n                TokenMagic.deleteFiltersOnTargeted();\n                break;\n        }\n\n    }\n}\nCast()\n\n//mainTargetdata.actor.data._id","author":"cDoi3U5MyHp0uBW1","img":"icons/tools/laboratory/bowl-liquid-gold.webp","actorIds":[]}
{"_id":"hQXuyILmpHP1322w","name":"AllCreatureAttacks","permission":{"default":0,"OAAx1jKOg1dYBpA6":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.qkq4UjGgx7cHii5n"}},"scope":"global","command":"const lastArg = args[args.length - 1];\nlet item = lastArg.item\n\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\nlet itemName = item.name.toLowerCase();\nlet itemSource = item.data.source.toLowerCase();\nlet path00 = game.modules.get(\"jb2a_patreon\") === true ? \"JB2A_DnD5e\" : \"jb2a_patreon\";\n\nfunction itemIncludes(test) {\n    if (itemSource.includes(test) || itemName.includes(test)) return true;\n}\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nlet tint;\nlet color;\nlet tmColor;\nlet path;\nlet path2;\n\nswitch (true) {\n    case (itemIncludes(\"fire bolt\")):\n        path = \"Cantrip/Fire_Bolt\";\n        path2 = \"FireBolt_01\";\n        tint = \"Regular\";\n        color = \"Orange\";\n        tmColor = 0xFF9309;\n        break;\n    case (itemIncludes(\"ray of frost\")):\n        path = \"Cantrip/Ray_Of_Frost\";\n        path2 = \"RayOfFrost_01\";\n        tint = \"Regular\";\n        color = \"Blue\";\n        tmColor = 0xBBDDEE;\n        break;\n    case (itemIncludes(\"witch bolt\")):\n        path = \"1st_Level/Witch_Bolt\";\n        path2 = \"WitchBolt_01\";\n        tint = \"Dark\";\n        color = \"Purple\";\n        tmColor = 0xAE00AE;\n        break;\n    case (itemIncludes(\"scorching ray\")):\n        path = \"2nd_Level/Scorching_Ray\";\n        path2 = \"ScorchingRay_01\";\n        tint = \"Regular\";\n        color = \"Orange\";\n        tmColor = 0xFF9309;\n        break;\n    case (itemIncludes(\"disintegrate\")):\n        path = \"6th_Level/Disintegrate\";\n        path2 = \"Disintegrate_01\";\n        tint = \"Regular\";\n        color = \"PurpleBlue\";\n        tmColor = 0x00AFC1;\n        break;\n}\n\nswitch (true) {\n    case (itemIncludes(\"orangepink\")):\n        tint = \"Regular\";\n        color = \"OrangePink\";\n        tmColor = 0xC1005B;\n        break;\n    case (itemIncludes(\"purpleblue\")):\n        tint = \"Regular\";\n        color = \"PurpleBlue\";\n        tmColor = 0x00AFC1;\n        break;\n    case (itemIncludes(\"darkpurple\")):\n        tint = \"Dark\";\n        color = \"Purple\";\n        tmColor = 0xAE00AE;\n        break;\n    case (itemIncludes(\"darkgreen\")):\n        tint = \"Dark\";\n        color = \"Green\";\n        tmColor = 0x187C00;\n        break;\n    case (itemIncludes(\"darkred\")):\n        tint = \"Dark\";\n        color = \"Red\";\n        tmColor = 0x8E0000;\n        break;\n    case (itemIncludes(\"blueyellow\")):\n        tint = \"Regular\";\n        color = \"BlueYellow\";\n        tmColor = 0xACC5C5;\n        break;\n    case (itemIncludes(\"purpleteal\")):\n        tint = \"Regular\";\n        color = \"PurpleTeal\";\n        tmColor = 0xC38CDC;\n        break;\n    case (itemIncludes(\"orange\")):\n        tint = \"Regular\";\n        color = \"Orange\";\n        tmColor = 0xFF9309;\n        break;\n    case (itemIncludes(\"green\")):\n        tint = \"Regular\";\n        switch (true) {\n            case (itemIncludes(\"disintegrate\")):\n                color = \"Green01\";\n                break;\n            default:\n                color = \"Green\";\n                break;\n        }\n        tmColor = 0x59E81F;\n        break;\n    case (itemIncludes(\"blue\")):\n        tint = \"Regular\";\n        color = \"Blue\";\n        tmColor = 0xBBDDEE;\n        break;\n    case (itemIncludes(\"purple\")):\n        tint = \"Regular\";\n        color = \"Purple\";\n        tmColor = 0xFF09E1;\n        break;\n    case (itemIncludes(\"red\")):\n        switch (true) {\n            case (itemIncludes(\"fire bolt\")):\n                tint = \"Dark\";\n                break;\n            default:\n                tint = \"Regular\";\n        }\n        color = \"Red\";\n        tmColor = 0xBB1414;\n        break;\n    case (itemIncludes(\"yellow\")):\n        tint = \"Regular\";\n        color = \"Yellow\";\n        tmColor = 0xFF0000;\n        break;\n}\n\nlet letitBurn =\n    [{\n        filterType: \"xfire\",\n        filterId: \"myColdXFire\",\n        time: 0,\n        // Can change color in hex format\n        color: tmColor,\n        blend: 1,\n        amplitude: 1,\n        dispersion: 0,\n        chromatic: false,\n        scaleX: 1,\n        scaleY: 1,\n        inlay: false,\n        autoDestroy: true,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: -0.0015,\n                animType: \"move\"\n            }\n\n        }\n    }];\nlet Frosty =\n    [{\n        filterType: \"xfire\",\n        filterId: \"mySuperFrost\",\n        color: tmColor,\n        time: 0,\n        blend: 5,\n        amplitude: 1,\n        dispersion: 0,\n        chromatic: false,\n        scaleX: 1,\n        scaleY: 1,\n        inlay: true,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: -0.0020,\n                animType: \"move\"\n            }\n\n        }\n    }];\nlet Ashes =\n    [{\n        filterType: \"fire\",\n        filterId: \"myFire\",\n        intensity: 3,\n        color: tmColor,\n        amplitude: 2,\n        time: 0,\n        blend: 10,\n        fireBlend: 1,\n        alphaDiscard: true,\n        zOrder: 50,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: -0.0024,\n                animType: \"move\"\n            }\n        }\n    }, {\n        filterType: \"glow\",\n        filterId: \"glowripples\",\n        outerStrength: 4,\n        innerStrength: 2,\n        color: tmColor,\n        quality: 0.5,\n        padding: 10,\n        zOrder: 100,\n    }];\nlet Electric =\n    [{\n        filterType: \"electric\",\n        // Can change color in hex format\n        color: tmColor,\n        time: 0,\n        blend: 2,\n        intensity: 5,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: 0.0020,\n                animType: \"move\"\n            }\n\n        }\n    }];\n\nlet tmDelay;\nlet tmKill;\nlet tmMacro;\nlet soundFile = `example/sound/file.mp3`;\nlet soundDelay = 50;\n\nswitch (true) {\n    case (itemIncludes(\"fire bolt\")):\n        tmDelay = 1000;\n        tmKill = 2000;\n        tmMacro = letitBurn;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 50;\n        break;\n    case (itemIncludes(\"ray of frost\")):\n        tmDelay = 1000;\n        tmKill = 2000;\n        tmMacro = Frosty;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 50;\n        break;\n    case (itemIncludes(\"witch bolt\")):\n        tmDelay = 50;\n        tmKill = 4000;\n        tmMacro = Electric;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 50;\n        break;\n    case (itemIncludes(\"scorching ray\")):\n        tmDelay = 500;\n        tmKill = 2000;\n        tmMacro = letitBurn;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 50;\n        break;\n    case (itemIncludes(\"disintegrate\")):\n        tmDelay = 500;\n        tmKill = 2000;\n        tmMacro = Ashes;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 50;\n        break;\n}\n\n\nasync function Cast() {\n    //            change to lastArg.hitTargets to only play animations on hit using Midi Workflow option\n    var myStringArray = lastArg.targets;\n    var arrayLength = myStringArray.length;\n    for (var i = 0; i < arrayLength; i++) {\n\n        let mainTargetdata = myStringArray[i];\n        let mainTarget = canvas.tokens.get(mainTargetdata._id)\n        let myToken = canvas.tokens.get(lastArg.tokenId) || canvas.tokens.placeables.find(token => token.actor.items.get(item._id) != null)\n\n        // Defines a new Ray between the caster and target\n        let ray = new Ray(myToken.center, mainTarget.center);\n        // Determines the angle\n        let anDeg = -(ray.angle * 57.3);\n        // assigns the distance of the newly created Ray to anDist\n        let anDist = ray.distance;\n\n        // Base file path for this animation\n        let file = `modules/${path00}/Library/${path}`;\n\n        let anFile;\n        let anFileSize = 600;\n        let anchorX = 0.2;\n\n        switch (true) {\n            case (itemIncludes(\"fire bolt\")):\n                switch (true) {\n                    case (anDist <= 1600):\n                        anFileSize = 1200;\n                        anFile = `${file}/${path2}_${tint}_${color}_30ft_1600x400.webm`;\n                        anchorX = 0.125;\n                        break;\n                    case (anDist > 4000):\n                        anFileSize = 3600;\n                        anFile = `${file}/${path2}_${tint}_${color}_90ft_4000x400.webm`;\n                        anchorX = 0.05;\n                        break;\n                    default:\n                        anFileSize = 2400;\n                        anFile = `${file}/${path2}_${tint}_${color}_60ft_2800x400.webm`;\n                        anchorX = 0.071;\n                        break;\n                }\n                break;\n            case (itemIncludes(\"ray of frost\")):\n                switch (true) {\n                    case (anDist <= 600):\n                        anFileSize = 600;\n                        anFile = `${file}/${path2}_${tint}_${color}_15ft_1000x400.webm`;\n                        anchorX = 0.2;\n                        break;\n                    case (anDist > 1200):\n                        anFileSize = 1800;\n                        anFile = `${file}/${path2}_${tint}}_${color}_45ft_2200x400.webm`;\n                        anchorX = 0.091;\n                        break;\n                    default:\n                        anFileSize = 1200;\n                        anFile = `${file}/${path2}_${tint}_${color}_30ft_1600x400.webm`;\n                        anchorX = 0.125;\n                        break;\n                }\n                break;\n            case (itemIncludes(\"witch bolt\")):\n                switch (true) {\n                    case (anDist <= 600):\n                        anFileSize = 600;\n                        anFile = `${file}/${path2}_${tint}_${color}_15ft_1000x400.webm`;\n                        anchorX = 0.2;\n                        break;\n                    default:\n                        anFileSize = 1200;\n                        anFile = `${file}/${path2}_${tint}_${color}_30ft_1600x400.webm`;\n                        anchorX = 0.125;\n                        break;\n                }\n                break;\n            case (itemIncludes(\"scorching ray\")):\n                switch (true) {\n                    case (anDist <= 1600):\n                        anFileSize = 1200;\n                        anFile = `${file}/${path2}_${tint}_${color}_30ft_1600x400.webm`;\n                        anchorX = 0.125;\n                        break;\n                    case (anDist <= 4000):\n                        anFileSize = 3600;\n                        anFile = `${file}/${path2}_${tint}_${color}_90ft_4000x400.webm`;\n                        anchorX = 0.05;\n                        break;\n                    default:\n                        anFileSize = 2400;\n                        anFile = `${file}/${path2}_${tint}_${color}_60ft_2800x400.webm`;\n                        anchorX = 0.071;\n                        break;\n                }\n                break;\n            case (itemIncludes(\"disintegrate\")):\n                switch (true) {\n                    case (anDist <= 600):\n                        anFileSize = 600;\n                        anFile = `${file}/${path2}_${tint}_${color}_15ft_1000x400.webm`;\n                        anchorX = 0.2;\n                        break;\n                    case (anDist > 1200):\n                        anFileSize = 1800;\n                        anFile = `${file}/${path2}_${tint}_${color}_45ft_2200x400.webm`;\n                        anchorX = 0.091;\n                        break;\n                    default:\n                        anFileSize = 1200;\n                        anFile = `${file}/${path2}_${tint}_${color}_30ft_1600x400.webm`;\n                        anchorX = 0.125;\n                        break;\n                }\n                break;\n\n        }\n\n        let anScale = anDist / anFileSize;\n        let anScaleY = anDist <= 600 ? 0.6 : anScale;\n\n        let spellAnim =\n        {\n            file: anFile,\n            position: myToken.center,\n            anchor: {\n                x: anchorX,\n                y: 0.5\n            },\n            angle: anDeg,\n            scale: {\n                x: anScale,\n                y: anScaleY\n            }\n        };\n        canvas.fxmaster.playVideo(spellAnim);\n        game.socket.emit('module.fxmaster', spellAnim);\n\n        switch (true) {\n            case (soundFile != \"example/sound/file.mp3\"):\n                AudioHelper.play({ src: soundFile, volume: 1.0, autoplay: true, loop: false }, true);\n                break;\n        }\n\n    }\n}\nCast()\n\nawait wait(tmDelay);\nTokenMagic.addUpdateFiltersOnTargeted(tmMacro);\nawait wait(tmKill);\nTokenMagic.deleteFiltersOnTargeted();","author":"OAAx1jKOg1dYBpA6","img":"icons/environment/creatures/fish-angler-blue.webp","actorIds":[]}
{"_id":"hXccLhMhcouYyFVt","name":"AllMeleeAttacks","permission":{"default":0,"cDoi3U5MyHp0uBW1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.2qOZ3AJhad1LKZVq"}},"scope":"global","command":"/*\nCheck the GitHub page for a PDF of how to use this type of macro. It will automatically recognize weapon names that match the available JB2A animations.\nYou can then set the color variant in the \"Source\" Field of the item.\n*/\n\n/*\nSwitching the tmfx drawTowards so it runs without the token selected.\nChange TMFX to NOT apply on misses when set to hitTargets\nRemove Dagger, Spear and Handaxe (moved to melee-switch)\nSet check and switch for patreon vs free\nAdd Improved Divine Smite check and animation\n*/\n\nconst lastArg = args[args.length - 1];\nlet item = lastArg.item\n\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\nlet itemName = item.name.toLowerCase();\nlet itemSource = item.data.source.toLowerCase();\nlet path00 = game.modules.get(\"jb2a_patreon\") === true ? \"JB2A_DnD5e\" : \"jb2a_patreon\";\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\n\nfunction itemIncludes(test) {\n    if (itemSource.includes(test) || itemName.includes(test)) return true;\n}\n// Token Magic FX Definitions for passing inside the switch\n// You can modify these, or add new ones based off other Token Magic FX animations\nlet BloodyHitStutter =\n    [{\n        filterType: \"images\",\n        filterId: \"myMirrorImages\",\n        time: 0,\n        nbImage: 2,\n        alphaImg: 1.0,\n        alphaChr: 0.0,\n        autoDestroy: true,\n        blend: 4,\n        ampX: 0.03,\n        ampY: 0.03,\n        zOrder: 20,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: 0.070,\n                animType: \"move\",\n                loopDuration: 200,\n                loops: 2\n            },\n            anchorX:\n            {\n                animType: \"chaoticOscillation\",\n                loopDuration: 100,\n                val1: 0.40,\n                val2: 0.60,\n                loops: 4\n            }\n        }\n    },\n    {\n        filterType: \"splash\",\n        filterId: \"mySplash\",\n        rank: 5,\n        color: 0x990505,\n        padding: 80,\n        time: Math.random() * 1000,\n        seed: Math.random(),\n        splashFactor: 1,\n        spread: 0.4,\n        blend: 1,\n        dimX: 1,\n        dimY: 1,\n        cut: false,\n        textureAlphaBlend: true,\n        anchorX: 0.32 + (Math.random() * 0.36),\n        anchorY: 0.32 + (Math.random() * 0.36)\n    }];\n// Token Magic FX Definitions for passing inside the switch\nlet BloodSplat =\n    [{\n        filterType: \"splash\",\n        filterId: \"mySplash\",\n        rank: 5,\n        color: 0x990505,\n        padding: 80,\n        time: Math.random() * 1000,\n        seed: Math.random(),\n        splashFactor: 1,\n        spread: 0.4,\n        blend: 1,\n        dimX: 1,\n        dimY: 1,\n        cut: false,\n        textureAlphaBlend: true,\n        anchorX: 0.32 + (Math.random() * 0.36),\n        anchorY: 0.32 + (Math.random() * 0.36)\n    }];\n// Token Magic FX Definitions for passing inside the switch\nlet HitStutter =\n    [{\n        filterType: \"images\",\n        filterId: \"myMirrorImages\",\n        time: 0,\n        nbImage: 2,\n        alphaImg: 1.0,\n        alphaChr: 0.0,\n        autoDestroy: true,\n        blend: 4,\n        ampX: 0.03,\n        ampY: 0.03,\n        zOrder: 20,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: 0.070,\n                animType: \"move\",\n                loopDuration: 200,\n                loops: 2\n            },\n            anchorX:\n            {\n                animType: \"chaoticOscillation\",\n                loopDuration: 100,\n                val1: 0.40,\n                val2: 0.60,\n                loops: 4\n            }\n        }\n    }];\nlet type01 = \"01\";\nlet tint = \"Regular\";\nlet color;\nswitch (true) {\n    case (itemIncludes(\"laser\")):\n        color = \"Blue\";\n        break;\n    default:\n        color = \"White\";\n}\nlet fireColor = \"pass\";\n//\n// Change the HEX Color code inside the switch to change the color of the fire burn on the TMFX call. I use https://htmlcolorcodes.com/ , and keep the 0x in front\n//\nswitch (true) {\n    case (itemIncludes(\"white\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"White\";\n        break;\n    case (itemIncludes(\"purple\")):\n        type01 = \"Fire\";\n        switch (true) {\n            case (itemIncludes(\"lasersword\")):\n                tint = \"Regular\";\n                break;\n            default:\n                tint = \"Dark\";\n                break;\n        }\n        color = \"Purple\";\n        fireColor = \"0x8B00C0\";\n        break;\n    case (itemIncludes(\"blue\")):\n        type01 = \"Fire\";\n        tint = \"Regular\";\n        color = \"Blue\";\n        fireColor = \"0x008FC0\";\n        break;\n    case (itemIncludes(\"green\")):\n        type01 = \"Fire\";\n        tint = \"Regular\";\n        color = \"Green\";\n        fireColor = \"0x60EA01\";\n        break;\n    case (itemIncludes(\"orange\")):\n        type01 = \"Fire\";\n        tint = \"Regular\";\n        color = \"Orange\";\n        fireColor = \"0xF18A07\";\n        break;\n    case (itemIncludes(\"pink\")):\n        type01 = \"Fire\";\n        tint = \"Regular\";\n        color = \"Pink\";\n        fireColor = \"0xD2049A\";\n        break;\n    case (itemIncludes(\"darkred\")):\n        type01 = \"Fire\";\n        tint = \"Dark\";\n        color = \"Red\";\n        fireColor = \"0x610101\";\n        break;\n    case (itemIncludes(\"red\")):\n        type01 = \"Fire\";\n        tint = \"Regular\";\n        color = \"Red\";\n        fireColor = \"0xD20404\";\n        break;\n    case (itemIncludes(\"yellow\")):\n        type01 = \"Fire\";\n        tint = \"Regular\";\n        color = \"Yellow\";\n        fireColor = \"0xCFD204\";\n        break;\n}\n//\n// Token Magic FX for burning fire. Reads the color input from above to set the color of the fire.\n//\nlet burn =\n    [{\n        filterType: \"xfire\",\n        filterId: \"myColdXFire\",\n        time: 0,\n        color: fireColor,\n        blend: 1,\n        amplitude: 1,\n        dispersion: 0,\n        chromatic: false,\n        scaleX: 1,\n        scaleY: 1,\n        inlay: false,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: -0.0015,\n                animType: \"move\"\n            }\n        }\n    }];\n\n// delay before activating the Token Magic FX Macros, change inside the switch cases to adjust the timing\nlet tmDelay = 1000;\n// delay before deleting Token Magic FX if needed, change inside switch cases to adjust the deletion\nlet tmKill = 1000;\n// calls a Token Magic FX macro defined above, change inside the switch cases to desired TMFX\nlet tmMacro = \"HitStutter\";\n// Delay for when the sound effect starts playing, change inside the switch cases to desired timing.\nlet soundDelay = 50;\n// Defines the sound to play when activated, change inside the switch cases to desired sound file\nlet soundFile = `example/sound/file.mp3`;\n\nlet item01 = \"Dagger02\";\nswitch (true) {\n    case (itemIncludes(\"greatsword\")):\n        item01 = \"GreatSword01\";\n        tmDelay = 1800;\n        tmKill = 1600;\n        tmMacro = BloodyHitStutter;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 0;\n        break;\n    case (itemIncludes(\"greatclub\")):\n        item01 = \"GreatClub01\";\n        tmDelay = 1100;\n        tmKill = 1600;\n        tmMacro = BloodyHitStutter;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 0;\n        break;\n    case (itemIncludes(\"greataxe\")):\n        item01 = \"GreatAxe01\";\n        tmDelay = 1800;\n        tmKill = 1600;\n        tmMacro = BloodyHitStutter;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 0;\n        break;\n    case (itemIncludes(\"handaxe\")):\n        item01 = \"HandAxe02\";\n        tmDelay = 1350;\n        tmKill = 1600;\n        tmMacro = BloodSplat;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 0;\n        break;\n    case (itemIncludes(\"mace\")):\n        item01 = \"Mace01\";\n        tmDelay = 1100;\n        tmKill = 1600;\n        tmMacro = BloodyHitStutter;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 0;\n        break;\n    case (itemIncludes(\"lasersword\")):\n        item01 = \"LaserSword01\";\n        type01 = \"01\";\n        tmDelay = 1300;\n        tmKill = 1600;\n        tmMacro = BloodSplat;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 0;\n        break;\n    case (itemIncludes(\"sword\")):\n        item01 = \"Sword01\";\n        tmDelay = 1300;\n        tmKill = 1600;\n        tmMacro = BloodSplat;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 0;\n        break;\n    case (itemIncludes(\"dagger\")):\n        item01 = \"Dagger02\";\n        tmDelay = 1000;\n        tmKill = 1600;\n        tmMacro = BloodSplat;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 0;\n        break;\n    case (itemIncludes(\"maul\")):\n        item01 = \"Maul01\";\n        tmDelay = 1900;\n        tmKill = 1600;\n        tmMacro = BloodyHitStutter;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 0;\n        break;\n    case (itemIncludes(\"spear\")):\n        item01 = \"Spear01\";\n        tmDelay = 1200;\n        tmKill = 1600;\n        tmMacro = BloodSplat;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 0;\n        break;\n}\n\nasync function Cast() {\n    //        change to lastArg.hitTargets to only play animations on hit using Midi Workflow option\n    var myStringArray = lastArg.targets;\n    var arrayLength = myStringArray.length;\n    for (var i = 0; i < arrayLength; i++) {\n        let mainTargetdata = myStringArray[i];\n        let mainTarget = canvas.tokens.get(mainTargetdata._id)\n        let myToken = canvas.tokens.get(lastArg.tokenId) || canvas.tokens.placeables.find(token => token.actor.items.get(item._id) != null)\n\n        let idsSearch = myToken.actor.data.items.filter(item => item.type === `feat`).map(item => item.name);\n\n        function actorIncludes(test) {\n            if (idsSearch.includes(test)) return true;\n        }\n\n        let dsBoom = `modules/${path00}/Library/Generic/Explosion/Explosion_02_Blue_400x400.webm`;\n        let dsScale = canvas.scene.data.grid / 400;\n        let spellAnim2 =\n        {\n            file: dsBoom,\n            position: mainTarget.center,\n            anchor: {\n                x: 0.5,\n                y: 0.5\n            },\n            angle: 0,\n            scale: {\n                x: dsScale,\n                y: dsScale\n            }\n        };\n\n        // Scaled globally, change divisor to increase/decrease size of animation\n        let Scale = canvas.scene.data.grid / 175;\n        // randomly mirrors animation\n        var plusOrMinus = Math.random() < 0.5 ? -1 : 1;\n\n        let file = `modules/${path00}/Library/Generic/Weapon_Attacks/Melee`;\n\n        let anim = `${file}/${item01}_${type01}_${tint}_${color}_800x600.webm`;\n\n        function castSpell(effect) {\n            game.user.targets.forEach((i, t) => {\n                canvas.fxmaster.drawSpecialToward(effect, myToken, t);\n\n            });\n        }\n        castSpell({\n            file: anim,\n            anchor: {\n                x: 0.4,\n                y: 0.5,\n            },\n            speed: 0,\n            angle: 0,\n            scale: {\n                x: Scale,\n                y: (Scale * plusOrMinus),\n            },\n        });\n\n        await wait(soundDelay);\n        switch (true) {\n            case (soundFile != \"example/sound/file.mp3\"):\n                AudioHelper.play({ src: soundFile, volume: 1.0, autoplay: true, loop: false }, true);\n                break;\n        }\n\n        switch (true) {\n            case (actorIncludes(\"Improved Divine Smite\")):\n                await wait((tmDelay - soundDelay) - 300);\n                canvas.fxmaster.playVideo(spellAnim2);\n                game.socket.emit('module.fxmaster', spellAnim2);\n                await wait(300);\n                TokenMagic.addUpdateFiltersOnTargeted(tmMacro);\n                // Calls Token Magic FX macros as defined in the switches above.\n                break;\n            default:\n                await wait(tmDelay - soundDelay);\n                TokenMagic.addUpdateFiltersOnTargeted(tmMacro);\n        }\n        // Checks if a firecolor was passed, and if so activates the burn TMFX on the target\n        switch (true) {\n            case (fireColor != \"pass\"):\n                TokenMagic.addUpdateFiltersOnTargeted(burn);\n                break;\n        }\n        // Waits a specified time before deleting all TMFX on the target\n        await wait(tmKill);\n        TokenMagic.deleteFiltersOnTargeted();\n    }\n}\nCast()","author":"cDoi3U5MyHp0uBW1","img":"icons/weapons/swords/greatsword-guard-gold-worn.webp","actorIds":[]}
{"_id":"9NXEm0kdZ5Yp6vTt","name":"AllRangedWeaponsMacro","permission":{"default":0,"cDoi3U5MyHp0uBW1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.PANA5qyByZ1DW5Eo"}},"scope":"global","command":"/*\nRemove Dagger, Spear and Handaxe (moved to melee-switch)\nAdd check and switch for patreon vs free version\n*/\n\n\n// Requires at least 1 target to play the animation\nif (game.user.targets.size == 0) ui.notifications.error('You must target at least one token');\n// Requires FX Master Module\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\nconst lastArg = args[args.length - 1];\nlet item = lastArg.item;\n\nlet itemName = item.name.toLowerCase();\nlet itemSource = item.data.source.toLowerCase();\nlet path00 = game.modules.get(\"jb2a_patreon\") === true ? \"JB2A_DnD5e\" : \"jb2a_patreon\";\n\nfunction itemIncludes(test) {\n    if (itemSource.includes(test) || itemName.includes(test)) return true;\n}\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nlet type01 = \"01\";\nlet tint = \"Regular\";\nlet tmColor = 0xFF9309;\nlet color;\nswitch (true) {\n    case (itemIncludes(\"laser\")):\n        color = \"Blue\";\n        tmColor = 0x0075B0;\n        break;\n    default:\n        color = \"White\";\n        break;\n}\nlet tmDelay;\n\nswitch (true) {\n    case (itemIncludes(\"white\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"White\";\n        break;\n    case (itemIncludes(\"blue\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Blue\";\n        tmColor = 0x0075B0;\n        break;\n    case (itemIncludes(\"green\")):\n        type01 = \"01\";\n        switch (true) {\n            case (itemIncludes(\"arrow\")):\n                tint = \"Glowing\";\n                break;\n            default:\n                tint = \"Regular\"\n                break;\n        }\n        color = \"Green\";\n        tmColor = 0x0EB400;\n        break;\n    case (itemIncludes(\"orange\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Orange\";\n        tmColor = 0xBF6E00;\n        break;\n    case (itemIncludes(\"red\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Red\";\n        tmColor = 0xBF0000;\n        break;\n\n}\n\nlet Poison =\n    [{\n        filterType: \"field\",\n        filterId: \"mySmokeField\",\n        shieldType: 3,\n        gridPadding: 1,\n        color: 0x60CC70,\n        time: 0,\n        blend: 0,\n        intensity: 0.9,\n        lightAlpha: 1,\n        lightSize: 0.7,\n        scale: 1,\n        radius: 1,\n        chromatic: false,\n        zOrder: 512,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: 0.0015,\n                animType: \"move\"\n            }\n        }\n    }];\n\nlet colorWave =\n    [{\n        filterType: \"wave\",\n        filterId: \"myShockwave\",\n        time: 0,\n        strength: 0.03,\n        frequency: 15,\n        maxIntensity: 4.0,\n        minIntensity: 0.5,\n        padding: 25,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: 0.0180,\n                animType: \"move\",\n            }\n        }\n    },\n    {\n        filterType: \"xfire\",\n        filterId: \"myColdXFire\",\n        time: 0,\n        color: tmColor,\n        blend: 1,\n        amplitude: 1,\n        dispersion: 0,\n        chromatic: false,\n        scaleX: 1,\n        scaleY: 1,\n        inlay: false,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: -0.0015,\n                animType: \"move\"\n            }\n        }\n    }];\n\nlet BloodyHitStutter =\n    [{\n        filterType: \"images\",\n        filterId: \"myMirrorImages\",\n        time: 0,\n        nbImage: 2,\n        alphaImg: 1.0,\n        alphaChr: 0.0,\n        autoDestroy: true,\n        blend: 4,\n        ampX: 0.03,\n        ampY: 0.03,\n        zOrder: 20,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: 0.070,\n                animType: \"move\",\n                loopDuration: 200,\n                loops: 2\n            },\n            anchorX:\n            {\n                animType: \"chaoticOscillation\",\n                loopDuration: 100,\n                val1: 0.40,\n                val2: 0.60,\n                loops: 4\n            }\n        }\n    },\n    {\n        filterType: \"splash\",\n        filterId: \"mySplash\",\n        rank: 5,\n        color: 0x990505,\n        padding: 80,\n        time: Math.random() * 1000,\n        seed: Math.random(),\n        splashFactor: 1,\n        spread: 0.4,\n        blend: 1,\n        dimX: 1,\n        dimY: 1,\n        cut: false,\n        textureAlphaBlend: true,\n        anchorX: 0.32 + (Math.random() * 0.36),\n        anchorY: 0.32 + (Math.random() * 0.36)\n    }];\n\nlet BloodSplat =\n    [{\n        filterType: \"splash\",\n        filterId: \"mySplash\",\n        rank: 5,\n        color: 0x990505,\n        padding: 80,\n        time: Math.random() * 1000,\n        seed: Math.random(),\n        splashFactor: 1,\n        spread: 0.4,\n        blend: 1,\n        dimX: 1,\n        dimY: 1,\n        cut: false,\n        textureAlphaBlend: true,\n        anchorX: 0.32 + (Math.random() * 0.36),\n        anchorY: 0.32 + (Math.random() * 0.36)\n    }];\n\nlet tmMacro = BloodSplat;\n\nswitch (true) {\n    case (itemIncludes(\"white\")):\n        tmMacro = BloodSplat;\n        break;\n}\n\nlet path01 = \"Dagger02\";\nlet size = \"400\";\nlet Delay01 = 900;\nlet Delay02 = 900;\nlet Delay03 = 900;\nlet soundFile = `example/sound/file.mp3`;\nswitch (true) {\n    case (itemIncludes(\"hammer\")):\n        path01 = \"Hammer01\";\n        tmMacro = BloodyHitStutter;\n        Delay01 = 600;\n        Delay02 = 800;\n        Delay03 = 800;\n        soundFile = `example/sound/file.mp3`;\n        break;\n    case (itemIncludes(\"arrow\")):\n    case (itemIncludes(\"bow\")):\n        path01 = \"Arrow01\";\n        switch (true) {\n            case (itemIncludes(\"green\")):\n                tmMacro = Poison;\n                break;\n        }\n        Delay01 = 750;\n        Delay02 = 1100;\n        Delay03 = 900;\n        soundFile = `example/sound/file.mp3`;\n        break;\n    case (itemIncludes(\"boulder\")):\n        path01 = \"BoulderToss01\";\n        tmMacro = BloodyHitStutter\n        size = \"500\";\n        Delay01 = 1250;\n        Delay02 = 1750;\n        Delay03 = 1550;\n        soundFile = `example/sound/file.mp3`;\n        break;\n    case (itemIncludes(\"siege\")):\n        path01 = \"SiegeBoulder01\";\n        tmMacro = BloodyHitStutter;\n        Delay01 = 750;\n        Delay02 = 1250;\n        Delay03 = 1150;\n        soundFile = `example/sound/file.mp3`;\n        size = \"500\";\n        break;\n    case (itemIncludes(\"laser\")):\n        path01 = \"LaserShot\";\n        tmMacro = colorWave;\n        Delay01 = 500;\n        Delay02 = 500;\n        Delay03 = 500;\n        soundFile = `example/sound/file.mp3`;\n        break;\n    case (itemIncludes(\"slingshot\")):\n        path01 = \"SlingShot\";\n        Delay01 = 2000;\n        Delay02 = 2300;\n        Delay03 = 2000;\n        soundFile = `example/sound/file.mp3`;\n        break;\n    case (itemIncludes(\"javelin\")):\n        path01 = \"Javelin01\";\n        Delay01 = 750;\n        Delay02 = 1250;\n        Delay03 = 1050;\n        soundFile = `example/sound/file.mp3`;\n        break;\n}\n\nasync function Cast() {\n    // change to        lastArge.hitTargets; to only play on hits using the MIDI-QOL options\n    var myStringArray = lastArg.targets;\n    var arrayLength = myStringArray.length;\n    for (var i = 0; i < arrayLength; i++) {\n\n        await wait(500)\n\n        let mainTargetdata = myStringArray[i];\n        let mainTarget = canvas.tokens.get(mainTargetdata._id);\n        let myToken = canvas.tokens.get(lastArg.tokenId) || canvas.tokens.placeables.find(token => token.actor.items.get(item._id) != null)\n\n        let ray = new Ray(myToken.center, mainTarget.center);\n        let anDeg = -(ray.angle * 57.3);\n        let anDist = ray.distance;\n\n        // Animation file path\n        let file = `modules/${path00}/Library/Generic/Weapon_Attacks/Ranged`;\n\n        // Checking for range to target to choose which file to pull\n        let anFile = `${file}/${path01}_${type01}_${tint}_${color}_15ft_1000x${size}.webm`;\n        let anFileSize = 600;\n        let anchorX = 0.2;\n        switch (true) {\n            case (itemIncludes(\"hammer\")):\n            case (itemIncludes(\"kunai\")):\n            case (itemIncludes(\"slingshot\")):\n                anFile = `${file}/${path01}_${type01}_${tint}_${color}_15ft_1000x${size}.webm`;\n                anFileSize = 600;\n                anchorX = 0.2;\n                switch (true) {\n                    case (anDist <= 600):\n                        anFileSize = 600;\n                        anFile = `${file}/${path01}_${type01}_${tint}_${color}_15ft_1000x${size}.webm`;\n                        anchorX = 0.2;\n                        tmDelay = Delay01;\n                        break;\n                    case (anDist > 1200):\n                        anFileSize = 1800;\n                        anFile = `${file}/${path01}_${type01}_${tint}_${color}_45ft_2200x${size}.webm`;\n                        anchorX = 0.091;\n                        tmDelay = Delay02;\n                        break;\n                    default:\n                        anFileSize = 1200;\n                        anFile = `${file}/${path01}_${type01}_${tint}_${color}_30ft_1600x${size}.webm`;\n                        anchorX = 0.125;\n                        tmDelay = Delay03;\n                        break;\n                }\n                break;\n            case (itemIncludes(\"arrow\")):\n            case (itemIncludes(\"bow\")):\n            case (itemIncludes(\"boulder\")):\n            case (itemIncludes(\"siege\")):\n            case (itemIncludes(\"javelin\")):\n            case (itemIncludes(\"laser\")):\n                anFile = `${file}/${path01}_${type01}_${tint}_${color}_30ft_1600x${size}.webm`;\n                anFileSize = 600;\n                anchorX = 0.125;\n                switch (true) {\n                    case (anDist <= 1200):\n                        anFileSize = 1200;\n                        anFile = `${file}/${path01}_${type01}_${tint}_${color}_30ft_1600x${size}.webm`;\n                        anchorX = 0.125;\n                        tmDelay = Delay01;\n                        break;\n                    case (anDist > 2400):\n                        anFileSize = 3600;\n                        anFile = `${file}/${path01}_${type01}_${tint}_${color}_90ft_4000x${size}.webm`;\n                        anchorX = 0.05;\n                        tmDelay = Delay02;\n                        break;\n                    default:\n                        anFileSize = 2400;\n                        anFile = `${file}/${path01}_${type01}_${tint}_${color}_60ft_2800x${size}.webm`;\n                        anchorX = 0.071;\n                        tmDelay = Delay03;\n                        break;\n                }\n                break;\n        }\n\n        // Scaling the Height of the animation for close range shots\n        let anScale = anDist / anFileSize;\n        let anScaleY = anDist <= 600 ? 0.6 : anScale;\n\n        let spellAnim =\n        {\n            file: anFile,\n            position: myToken.center,\n            anchor: {\n                x: anchorX,\n                y: 0.5\n            },\n            angle: anDeg,\n            scale: {\n                x: anScale,\n                y: anScaleY\n            }\n        };\n\n        let Repeater = 1;\n        switch (true) {\n            case (itemIncludes(\"laser\")):\n                Repeater = 3;\n                break;\n            default:\n                Repeater = 1;\n                break;\n        }\n\n        async function SpellAnimation(number) {\n\n            let x = number;\n            let interval = 250;\n            for (var i = 0; i < x; i++) {\n                setTimeout(function () {\n                    canvas.fxmaster.playVideo(spellAnim);\n                    game.socket.emit('module.fxmaster', spellAnim);\n                    switch (true) {\n                        case (soundFile != \"example/sound/file.mp3\"):\n                            AudioHelper.play({ src: soundFile, volume: 1.0, autoplay: true, loop: false }, true);\n                            break;\n                    }\n\n                }, i * interval);\n            }\n            await wait(interval * x + 1000);\n            TokenMagic.deleteFiltersOnTargeted();\n        }\n        SpellAnimation(Repeater)\n        await wait(tmDelay);\n        TokenMagic.addUpdateFiltersOnTargeted(tmMacro);\n    }\n}\nCast()","author":"cDoi3U5MyHp0uBW1","img":"icons/weapons/bows/bow-ornamental-carved-brown.webp","actorIds":[]}
{"_id":"xwsBlK9Sga3ys2KL","name":"ArrowMacro","permission":{"default":0,"cDoi3U5MyHp0uBW1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.nDVNlBSqGOLEng9L"}},"scope":"global","command":"// Requires at least 1 target to play the animation\nif (game.user.targets.size == 0) ui.notifications.error('You must target at least one token');\n// Requires FX Master Module\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\nconst lastArg = args[args.length - 1];\nlet item = lastArg.item\n\nlet itemName = item.name.toLowerCase();\nlet itemSource = item.data.source.toLowerCase();\nlet path00 = game.modules.get(\"jb2a_patreon\") === true ? \"JB2A_DnD5e\" : \"jb2a_patreon\";\n\nfunction itemIncludes(test) {\n    if (itemSource.includes(test) || itemName.includes(test)) return true;\n}\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nlet type01 = \"01\";\nlet tint = \"Regular\";\nlet color = \"White\";\nlet tmColor = 0xFF9309;\nlet tmDelay;\n\nswitch (true) {\n    case (itemIncludes(\"green\")):\n        type01 = \"01\";\n        tint = \"Glowing\";\n        color = \"Green\";\n        tmColor = 0xFF9309;\n        break;\n    case (itemIncludes(\"white\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"White\";\n        tmColor = 0x59E81F;\n        break;\n}\n\nlet Poison =\n    [{\n        filterType: \"field\",\n        filterId: \"mySmokeField\",\n        shieldType: 3,\n        gridPadding: 1,\n        color: 0x60CC70,\n        time: 0,\n        blend: 0,\n        intensity: 0.9,\n        lightAlpha: 1,\n        lightSize: 0.7,\n        scale: 1,\n        radius: 1,\n        chromatic: false,\n        zOrder: 512,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: 0.0015,\n                animType: \"move\"\n            }\n        }\n    }];\n\nlet BloodSplat =\n    [{\n        filterType: \"splash\",\n        filterId: \"mySplash\",\n        rank: 5,\n        color: 0x990505,\n        padding: 80,\n        time: Math.random() * 1000,\n        seed: Math.random(),\n        splashFactor: 1,\n        spread: 0.4,\n        blend: 1,\n        dimX: 1,\n        dimY: 1,\n        cut: false,\n        textureAlphaBlend: true,\n        anchorX: 0.32 + (Math.random() * 0.36),\n        anchorY: 0.32 + (Math.random() * 0.36)\n    }];\n\nlet tmMacro = BloodSplat;\n\nswitch (true) {\n    case (itemIncludes(\"green\")):\n        tmMacro = Poison;\n        break;\n    case (itemIncludes(\"white\")):\n        tmMacro = BloodSplat;\n        break;\n}\n\n\nasync function Cast() {\n\n    var myStringArray = lastArg.targets;\n    var arrayLength = myStringArray.length;\n    for (var i = 0; i < arrayLength; i++) {\n\n        await wait(500)\n\n        let mainTargetdata = myStringArray[i];\n        let mainTarget = canvas.tokens.get(mainTargetdata._id);\n        let myToken = canvas.tokens.get(lastArg.tokenId) || canvas.tokens.placeables.find(token => token.actor.items.get(item._id) != null)\n\n        let ray = new Ray(myToken.center, mainTarget.center);\n        let anDeg = -(ray.angle * 57.3);\n        let anDist = ray.distance;\n\n        // Animation file path\n        let file = `modules/${path00}/Library/Generic/Weapon_Attacks/Ranged/`;\n\n        // Checking for range to target to choose which file to pull\n        let anFile = `${file}Arrow01_${type01}_${tint}_${color}_30ft_1600x400.webm`;\n        let anFileSize = 600;\n        let anchorX = 0.125;\n        switch (true) {\n            case (anDist <= 1200):\n                anFileSize = 1200;\n                anFile = `${file}Arrow01_${type01}_${tint}_${color}_30ft_1600x400.webm`;\n                anchorX = 0.125;\n                tmDelay = 750;\n                break;\n            case (anDist > 2400):\n                anFileSize = 3600;\n                anFile = `${file}Arrow01_${type01}_${tint}_${color}_90ft_4000x400.webm`;\n                anchorX = 0.05;\n                tmDelay = 1100;\n                break;\n            default:\n                anFileSize = 2400;\n                anFile = `${file}Arrow01_${type01}_${tint}_${color}_60ft_2800x400.webm`;\n                anchorX = 0.071;\n                tmDelay = 900;\n                break;\n        }\n\n        // Scaling the Height of the animation for consistency across ranges\n        let anScale = anDist / anFileSize;\n        let anScaleY = anDist <= 600 ? 0.6 : anScale;\n\n        let spellAnim =\n        {\n            file: anFile,\n            position: myToken.center,\n            anchor: {\n                x: anchorX,\n                y: 0.5\n            },\n            angle: anDeg,\n            scale: {\n                x: anScale,\n                y: anScaleY\n            }\n        };\n\n        canvas.fxmaster.playVideo(spellAnim);\n        game.socket.emit('module.fxmaster', spellAnim);\n\n        let soundFile = `example/sound/file.mp3`;\n        switch (true) {\n            case (soundFile != \"example/sound/file.mp3\"):\n                AudioHelper.play({ src: soundFile, volume: 1.0, autoplay: true, loop: false }, true);\n                break;\n        }\n\n\n        // Or play random sounds on each attack\n        /*\n        let soundHome = \"Sound/Folder/Path/Here\";\n        \n        let m1 = `sound-file-01-here`;\n        let m2 = `sound-file-02-here`;\n        function random_sound(sounds)\n        {\n        return sounds[Math.floor(Math.random()*sounds.length)];\n        }\n        \n        var sounds = [m1, m2];\n        \n        let roll = new Roll('1d3').roll().total;\n        let soundFile = random_sound(sounds);\n        AudioHelper.play({src: soundHome + soundFile, volume: 0.9, autoplay: true, loop: false}, true);\n        */\n        await wait(tmDelay);\n        TokenMagic.addUpdateFiltersOnTargeted(tmMacro);\n        await wait(tmDelay + 1000);\n        TokenMagic.deleteFiltersOnTargeted();\n    }\n}\nCast()","author":"cDoi3U5MyHp0uBW1","img":"icons/weapons/ammunition/arrow-simple-brown.webp","actorIds":[]}
{"_id":"YI7mFNcpQZ6YiXyU","name":"CureWoundsMacro","permission":{"default":0,"cDoi3U5MyHp0uBW1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.RPZbz0xJHucDb4gt"}},"scope":"global","command":"// Requires a Target to be targeted\nif (game.user.targets.size == 0) ui.notifications.error('You must target at least one token');\n// Requires FX Master module\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\nconst lastArg = args[args.length - 1];\nlet item = lastArg.item;\nlet itemName = item.name.toLowerCase();\nlet itemSource = item.data.source.toLowerCase();\nlet path00 = game.modules.get(\"jb2a_patreon\") === true ? \"JB2A_DnD5e\" : \"jb2a_patreon\";\n\nfunction itemIncludes(test){\n    if(itemSource.includes(test) || itemName.includes(test)) return true;\n}\n\nlet type01 = \"01\";\nlet color = \"Blue\";\nlet tmColor = 0x107BD9;\n\nswitch (true) {\n    case (itemIncludes(\"blue\")):\n        type01 = \"01\";\n        color = \"Blue\";\n        tmColor = 0x107BD9;\n        break;\n    case (itemIncludes(\"green\")):\n        type01 = \"01\";\n        color = \"Green\";\n        tmColor = 0x7BDA35;\n        break;\n    case (itemIncludes(\"purple\")):\n        type01 = \"01\";\n        color = \"Purple\";\n        tmColor = 0x9400CB;\n        break;\n    case (itemIncludes(\"red\")):\n        type01 = \"01\";\n        color = \"Red\";\n        tmColor = 0xE12C2C;\n        break;\n}\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nasync function Cast() {\n\n    var myStringArray = lastArg.targets;\n    var arrayLength = myStringArray.length;\n    // Loops for multiple targets\n    for (var i = 0; i < arrayLength; i++) {\n        // Plays on targeted tokens\n        let mainTargetdata = myStringArray[i];\n        let mainTarget = canvas.tokens.get(mainTargetdata._id)\n        // Scaled by Target Size\n        let tarScale = ((mainTarget.data.width + mainTarget.data.height) / 4);\n        // Comment out above and use the below line to scale globally for size consistency. Alter divisor to change animation size\n        // let tarScale = canvas.scene.data.grid/100;\n\n        // Defining spell animation for FX Master\n        let spellAnim =\n        {\n            file: `modules/${path00}/Library/1st_Level/Cure_Wounds/CureWounds_${type01}_${color}_400x400.webm`,\n            position: mainTarget.center,\n            anchor: {\n                x: 0.5,\n                y: 0.5\n            },\n            angle: 0,\n            scale: {\n                x: tarScale,\n                y: tarScale\n            }\n        };\n        canvas.fxmaster.playVideo(spellAnim);\n        game.socket.emit('module.fxmaster', spellAnim);\n        // Add some sound\n        /*\n        await wait (100);\n        let soundFile = `sound path here`;\n        AudioHelper.play({src: soundFile, volume: 1.0, autoplay: true, loop: false}, true);\n        */\n\n        // Or play random sounds\n        /*\n        let soundHome = \"CustomSounds/battle/\";\n        \n        let m1 = `sound 01 file location here`;\n        let m2 = `sound 02 file location here`;\n        function random_sound(sounds)\n        {\n        return sounds[Math.floor(Math.random()*sounds.length)];\n        }\n        \n        var sounds = [m1, m2];\n        \n        let roll = new Roll('1d3').roll().total;\n        let soundFile = random_sound(sounds);\n        AudioHelper.play({src: soundHome + soundFile, volume: 0.9, autoplay: true, loop: false}, true);\n        */\n\n        let Holy =\n        [{\n           filterType: \"outline\",\n           filterId: \"myOutline\",\n           padding: 10,\n        // Change color in hex format\n           color: tmColor,\n           thickness: 1,\n           quality: 5,\n           zOrder: 9,\n           autoDestroy: true,\n           animated :\n           {\n              thickness: \n              { \n                 active: true,\n                 loopDuration: 800,\n                 loops: 4,\n                 animType: \"syncCosOscillation\",\n                 val1: 1, \n                 val2: 6\n              }\n           }\n        }];\n        \n        TokenMagic.addUpdateFiltersOnTargeted(Holy);\n    }\n}\nCast()","author":"cDoi3U5MyHp0uBW1","img":"modules/jb2a_patreon/Library/1st_Level/Cure_Wounds/CureWounds_01_Purple_Thumb.webp","actorIds":[]}
{"_id":"wXOfyFhsidKDslY9","name":"DisintegrateMacro","permission":{"default":0,"cDoi3U5MyHp0uBW1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.4rK3ITymjhSRfSHt"}},"scope":"global","command":"const lastArg = args[args.length - 1];\nlet item = lastArg.item\n\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\nlet itemName = item.name.toLowerCase();\nlet itemSource = item.data.source.toLowerCase();\nlet path00 = game.modules.get(\"jb2a_patreon\") === true ? \"JB2A_DnD5e\" : \"jb2a_patreon\";\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nlet type01 = \"01\";\nlet tint = \"Regular\";\nlet color = \"Green01\";\nlet tmColor = 0x61C100;\n\nswitch (true) {\n    case (itemSource.includes(\"darkred\")):\n        type01 = \"01\";\n        tint = \"Dark\";\n        color = \"Red\";\n        tmColor = 0xA00000;\n        break;\n    case (itemSource.includes(\"green\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Green01\";\n        tmColor = 0x61C100;\n        break;\n    case (itemSource.includes(\"orangepink\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"OrangePink\";\n        tmColor = 0xC1005B;\n        break;\n    case (itemSource.includes(\"purpleblue\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"PurpleBlue\";\n        tmColor = 0x00AFC1;\n        break;\n}\n\n//\n// Token Magic FX Definitions for passing inside the switch\n// You can modify these, or add new ones based off other Token Magic FX animations\n// \nlet Ashes =\n    [{\n        filterType: \"fire\",\n        filterId: \"myFire\",\n        intensity: 3,\n        color: tmColor,\n        amplitude: 2,\n        time: 0,\n        blend: 10,\n        fireBlend: 1,\n        alphaDiscard: true,\n        zOrder: 50,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: -0.0024,\n                animType: \"move\"\n            }\n        }\n    }, {\n        filterType: \"glow\",\n        filterId: \"glowripples\",\n        outerStrength: 4,\n        innerStrength: 2,\n        color: tmColor,\n        quality: 0.5,\n        padding: 10,\n        zOrder: 100,\n    }];\n\nasync function Cast() {\n    //            change to lastArg.hitTargets to only play animations on hit using Midi Workflow option\n    var myStringArray = lastArg.targets;\n    var arrayLength = myStringArray.length;\n    for (var i = 0; i < arrayLength; i++) {\n\n        let mainTargetdata = myStringArray[i];\n        let mainTarget = canvas.tokens.get(mainTargetdata._id)\n        let myToken = canvas.tokens.get(lastArg.tokenId) || canvas.tokens.placeables.find(token => token.actor.items.get(item._id) != null)\n\n        // Defines a new Ray between the caster and target\n        let ray = new Ray(myToken.center, mainTarget.center);\n        // Determines the angle\n        let anDeg = -(ray.angle * 57.3);\n        // assigns the distance of the newly created Ray to anDist\n        let anDist = ray.distance;\n\n        // Base file path for this animation\n        let file = `modules/${path00}/Library/6th_Level/Disintegrate/`;\n\n\n        let anFile = `${file}Disintegrate_${type01}_${tint}_${color}_15ft_1000x400.webm`;\n        let anFileSize = 600;\n        let anchorX = 0.2;\n        switch (true) {\n            case (anDist <= 600):\n                anFileSize = 600;\n                anFile = `${file}Disintegrate_${type01}_${tint}_${color}_15ft_1000x400.webm`;\n                anchorX = 0.2;\n                break;\n            case (anDist > 1200):\n                anFileSize = 1800;\n                anFile = `${file}Disintegrate_${type01}_${tint}_${color}_45ft_2200x400.webm`;\n                anchorX = 0.091;\n                break;\n            default:\n                anFileSize = 1200;\n                anFile = `${file}Disintegrate_${type01}_${tint}_${color}_30ft_1600x400.webm`;\n                anchorX = 0.125;\n                break;\n        }\n\n        let anScale = anDist / anFileSize;\n        let anScaleY = anDist <= 600 ? 0.6 : anScale;\n\n        let spellAnim =\n        {\n            file: anFile,\n            position: myToken.center,\n            anchor: {\n                x: anchorX,\n                y: 0.5\n            },\n            angle: anDeg,\n            scale: {\n                x: anScale,\n                y: anScaleY\n            }\n        };\n        canvas.fxmaster.playVideo(spellAnim);\n        game.socket.emit('module.fxmaster', spellAnim);\n\n        // Change the path here to a sound file you would like to use\n        let soundFile = `example/sound/file.mp3`;\n        switch (true) {\n            case (soundFile != \"example/sound/file.mp3\"):\n                AudioHelper.play({ src: soundFile, volume: 1.0, autoplay: true, loop: false }, true);\n                break;\n        }\n\n    }\n}\nCast()\n\n// Activates the Token Magic FX after a delay\nawait wait(500);\nTokenMagic.addUpdateFiltersOnTargeted(Ashes);\nawait wait(2000);\nTokenMagic.deleteFiltersOnTargeted();","author":"cDoi3U5MyHp0uBW1","img":"modules/jb2a_patreon/Library/6th_Level/Disintegrate/Disintegrate_01_Dark_Red_Thumb.webp","actorIds":[]}
{"_id":"gxdzdGks4dLft9DL","name":"FireboltMacro","permission":{"default":0,"cDoi3U5MyHp0uBW1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.zJIX0vCvfThpSfYO"}},"scope":"global","command":"const lastArg = args[args.length - 1];\nlet item = lastArg.item\n\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\nlet itemName = item.name.toLowerCase();\nlet itemSource = item.data.source.toLowerCase();\nlet path00 = game.modules.get(\"jb2a_patreon\") === true ? \"JB2A_DnD5e\" : \"jb2a_patreon\";\n\nfunction itemIncludes(test) {\n    if (itemSource.includes(test) || itemName.includes(test)) return true;\n}\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nlet type01 = \"01\";\nlet tint = \"Regular\";\nlet color = \"Orange\";\nlet tmColor = 0xFF9309;\n\nswitch (true) {\n    case (itemIncludes(\"orange\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Orange\";\n        tmColor = 0xFF9309;\n        break;\n    case (itemIncludes(\"green\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Green\";\n        tmColor = 0x59E81F;\n        break;\n    case (itemIncludes(\"blue\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Blue\";\n        tmColor = 0xBBDDEE;\n        break;\n    case (itemIncludes(\"purple\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Purple\";\n        tmColor = 0xFF09E1;\n        break;\n    case (itemIncludes(\"red\")):\n        type01 = \"01\";\n        tint = \"Dark\";\n        color = \"Red\";\n        tmColor = 0xBB1414;\n        break;\n}\n\n//\n// Token Magic FX Definitions for passing inside the switch\n// You can modify these, or add new ones based off other Token Magic FX animations\n// \nlet letitBurn =\n    [{\n        filterType: \"xfire\",\n        filterId: \"myColdXFire\",\n        time: 0,\n        // Can change color in hex format\n        color: tmColor,\n        blend: 1,\n        amplitude: 1,\n        dispersion: 0,\n        chromatic: false,\n        scaleX: 1,\n        scaleY: 1,\n        inlay: false,\n        autoDestroy: true,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: -0.0015,\n                animType: \"move\"\n            }\n\n        }\n    }];\n\nasync function Cast() {\n    //            change to lastArg.hitTargets to only play animations on hit using Midi Workflow option\n    var myStringArray = lastArg.targets;\n    var arrayLength = myStringArray.length;\n    for (var i = 0; i < arrayLength; i++) {\n\n        let mainTargetdata = myStringArray[i];\n        let mainTarget = canvas.tokens.get(mainTargetdata._id)\n        let myToken = canvas.tokens.get(lastArg.tokenId) || canvas.tokens.placeables.find(token => token.actor.items.get(item._id) != null)\n\n        // Defines a new Ray between the caster and target\n        let ray = new Ray(myToken.center, mainTarget.center);\n        // Determines the angle\n        let anDeg = -(ray.angle * 57.3);\n        // assigns the distance of the newly created Ray to anDist\n        let anDist = ray.distance;\n\n        // Base file path for this animation\n        let file = `modules/${path00}/Library/Cantrip/Fire_Bolt/`;\n\n\n        let anFile = `${file}FireBolt_${type01}_${tint}_${color}_30ft_1600x400.webm`;\n\n        let anFileSize = 600;\n        let anchorX = 0.125;\n        switch (true) {\n            case (anDist <= 1600):\n                anFileSize = 1200;\n                anFile = `${file}FireBolt_${type01}_${tint}_${color}_30ft_1600x400.webm`;\n                anchorX = 0.125;\n                break;\n            case (anDist > 4000):\n                anFileSize = 3600;\n                anFile = `${file}FireBolt_${type01}_${tint}_${color}_90ft_4000x400.webm`;\n                anchorX = 0.05;\n                break;\n            default:\n                anFileSize = 2400;\n                anFile = `${file}FireBolt_${type01}_${tint}_${color}_60ft_2800x400.webm`;\n                anchorX = 0.071;\n                break;\n        }\n\n        let anScale = anDist / anFileSize;\n        let anScaleY = anDist <= 600 ? 0.6 : anScale;\n\n        let spellAnim =\n        {\n            file: anFile,\n            position: myToken.center,\n            anchor: {\n                x: anchorX,\n                y: 0.5\n            },\n            angle: anDeg,\n            scale: {\n                x: anScale,\n                y: anScaleY\n            }\n        };\n        canvas.fxmaster.playVideo(spellAnim);\n        game.socket.emit('module.fxmaster', spellAnim);\n\n        // Change the path here to a sound file you would like to use\n        let soundFile = `example/sound/file.mp3`;\n        switch (true) {\n            case (soundFile != \"example/sound/file.mp3\"):\n                AudioHelper.play({ src: soundFile, volume: 1.0, autoplay: true, loop: false }, true);\n                break;\n        }\n\n    }\n}\nCast()\n\n// Activates the Token Magic FX after a delay\nawait wait(1000);\nTokenMagic.addUpdateFiltersOnTargeted(letitBurn);\nawait wait(2000);\nTokenMagic.deleteFiltersOnTargeted();","author":"cDoi3U5MyHp0uBW1","img":"modules/jb2a_patreon/Library/Cantrip/Fire_Bolt/FireBolt_01_Regular_Orange_Thumb.webp","actorIds":[]}
{"_id":"h3vzjZQK7vfhUt9v","name":"HealingMacro","permission":{"default":0,"cDoi3U5MyHp0uBW1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.cBaJgHqRmQG8BKcn"}},"scope":"global","command":"// Requires a Target to be targeted\nif (game.user.targets.size == 0) ui.notifications.error('You must target at least one token');\n// Requires FX Master module\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\nconst lastArg = args[args.length - 1];\nlet item = lastArg.item;\nlet itemName = item.name.toLowerCase();\nlet itemSource = item.data.source.toLowerCase();\nlet path00 = game.modules.get(\"jb2a_patreon\") === true ? \"JB2A_DnD5e\" : \"jb2a_patreon\";\n\nfunction itemIncludes(test) {\n    if (itemSource.includes(test) || itemName.includes(test)) return true;\n}\n\nlet type01 = \"01\";\nlet color = \"Blue\";\nlet tmColor = 0x107BD9;\n\nswitch (true) {\n    case (itemIncludes(\"blue\")):\n        type01 = \"01\";\n        color = \"Blue\";\n        tmColor = 0x107BD9;\n        break;\n    case (itemIncludes(\"green\")):\n        type01 = \"01\";\n        color = \"Green\";\n        tmColor = 0x7BDA35;\n        break;\n    case (itemIncludes(\"purple\")):\n        type01 = \"01\";\n        color = \"Purple\";\n        tmColor = 0x9400CB;\n        break;\n    case (itemIncludes(\"yellow\")):\n        type01 = \"01\";\n        color = \"Yellow\";\n        tmColor = 0xE4B700;\n        break;\n}\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nasync function Cast() {\n\n    var myStringArray = lastArg.targets;\n    var arrayLength = myStringArray.length;\n    // Loops for multiple targets\n    for (var i = 0; i < arrayLength; i++) {\n        // Plays on targeted tokens\n        let mainTargetdata = myStringArray[i];\n        let mainTarget = canvas.tokens.get(mainTargetdata._id)\n        // Scaled by Target Size\n        let tarScale = ((mainTarget.data.width + mainTarget.data.height) / 4);\n        // Comment out above and use the below line to scale globally for size consistency. Alter divisor to change animation size\n        // let tarScale = canvas.scene.data.grid/100;\n\n        // Defining spell animation for FX Master\n        let spellAnim =\n        {\n            file: `modules/${path00}/Library/Generic/Healing/HealingAbility_${type01}_${color}_400x400.webm`,\n            position: mainTarget.center,\n            anchor: {\n                x: 0.5,\n                y: 0.5\n            },\n            angle: 0,\n            scale: {\n                x: tarScale,\n                y: tarScale\n            }\n        };\n        canvas.fxmaster.playVideo(spellAnim);\n        game.socket.emit('module.fxmaster', spellAnim);\n        // Add some sound\n        /*\n        await wait (100);\n        let soundFile = `sound path here`;\n        AudioHelper.play({src: soundFile, volume: 1.0, autoplay: true, loop: false}, true);\n        */\n\n        // Or play random sounds\n        /*\n        let soundHome = \"CustomSounds/battle/\";\n        \n        let m1 = `sound 01 file location here`;\n        let m2 = `sound 02 file location here`;\n        function random_sound(sounds)\n        {\n        return sounds[Math.floor(Math.random()*sounds.length)];\n        }\n        \n        var sounds = [m1, m2];\n        \n        let roll = new Roll('1d3').roll().total;\n        let soundFile = random_sound(sounds);\n        AudioHelper.play({src: soundHome + soundFile, volume: 0.9, autoplay: true, loop: false}, true);\n        */\n\n        let Holy =\n            [{\n                filterType: \"outline\",\n                filterId: \"myOutline\",\n                padding: 10,\n                // Change color in hex format\n                color: tmColor,\n                thickness: 1,\n                quality: 5,\n                zOrder: 9,\n                autoDestroy: true,\n                animated:\n                {\n                    thickness:\n                    {\n                        active: true,\n                        loopDuration: 800,\n                        loops: 4,\n                        animType: \"syncCosOscillation\",\n                        val1: 1,\n                        val2: 6\n                    }\n                }\n            }];\n\n        TokenMagic.addUpdateFiltersOnTargeted(Holy);\n    }\n}\nCast()","author":"cDoi3U5MyHp0uBW1","img":"modules/jb2a_patreon/Library/Generic/Healing/HealingAbility_01_Purple_Thumb.webp","actorIds":[]}
{"_id":"peWJ5Q3dbrxH6ebs","name":"LaserMacro","permission":{"default":0,"cDoi3U5MyHp0uBW1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.D4iwZwRj1EKMV5XM"}},"scope":"global","command":"// Requires at least 1 target to play the animation\nif (game.user.targets.size == 0) ui.notifications.error('You must target at least one token');\n// Requires FX Master Module\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\nconst lastArg = args[args.length - 1];\nlet item = lastArg.item\n\nlet itemName = item.name.toLowerCase();\nlet itemSource = item.data.source.toLowerCase();\nlet path00 = game.modules.get(\"jb2a_patreon\") === true ? \"JB2A_DnD5e\" : \"jb2a_patreon\";\n\nfunction itemIncludes(test) {\n    if (itemSource.includes(test) || itemName.includes(test)) return true;\n}\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nlet type01 = \"01\";\nlet tint = \"Regular\";\nlet color = \"Blue\";\nlet tmColor = 0x0075B0;\nlet tmDelay;\n\nswitch (true) {\n    case (itemIncludes(\"blue\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Blue\";\n        tmColor = 0x0075B0;\n        break;\n    case (itemIncludes(\"green\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Green\";\n        tmColor = 0x0EB400;\n        break;\n    case (itemIncludes(\"orange\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Orange\";\n        tmColor = 0xBF6E00;\n        break;\n    case (itemIncludes(\"red\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Red\";\n        tmColor = 0xBF0000;\n        break;\n}\n\nlet colorWave =\n[{\n    filterType: \"wave\",\n    filterId: \"myShockwave\",\n    time: 0,\n    strength: 0.03,\n    frequency: 15,\n    maxIntensity: 4.0,\n    minIntensity: 0.5,\n    padding: 25,\n    animated:\n    {\n        time:\n        {\n            active: true,\n            speed: 0.0180,\n            animType: \"move\",\n        }\n    }\n},\n{\n    filterType: \"xfire\",\n    filterId: \"myColdXFire\",\n    time: 0,\n    color: tmColor,\n    blend: 1,\n    amplitude: 1,\n    dispersion: 0,\n    chromatic: false,\n    scaleX: 1,\n    scaleY: 1,\n    inlay: false,\n    animated:\n    {\n        time:\n        {\n            active: true,\n            speed: -0.0015,\n            animType: \"move\"\n        }\n    }\n}];\n\nasync function Cast() {\n\n    var myStringArray = lastArg.targets;\n    var arrayLength = myStringArray.length;\n    for (var i = 0; i < arrayLength; i++) {\n\n        await wait(500)\n\n        let mainTargetdata = myStringArray[i];\n        let mainTarget = canvas.tokens.get(mainTargetdata._id);\n        let myToken = canvas.tokens.get(lastArg.tokenId) || canvas.tokens.placeables.find(token => token.actor.items.get(item._id) != null)\n\n        let ray = new Ray(myToken.center, mainTarget.center);\n        let anDeg = -(ray.angle * 57.3);\n        let anDist = ray.distance;\n\n        // Animation file path\n        let file = `modules/${path00}/Library/Generic/Weapon_Attacks/Ranged/`;\n\n        // Checking for range to target to choose which file to pull\n        let anFile = `${file}LaserShot_${type01}_${tint}_${color}_30ft_1600x400.webm`;\n        let anFileSize = 600;\n        let anchorX = 0.125;\n        switch (true) {\n            case (anDist <= 1200):\n                anFileSize = 1200;\n                anFile = `${file}LaserShot_${type01}_${tint}_${color}_30ft_1600x400.webm`;\n                anchorX = 0.125;\n                tmDelay = 500;\n                break;\n            case (anDist > 2400):\n                anFileSize = 3600;\n                anFile = `${file}LaserShot_${type01}_${tint}_${color}_90ft_4000x400.webm`;\n                anchorX = 0.05;\n                tmDelay = 500;\n                break;\n            default:\n                anFileSize = 2400;\n                anFile = `${file}LaserShot_${type01}_${tint}_${color}_60ft_2800x400.webm`;\n                anchorX = 0.071;\n                tmDelay = 500;\n                break;\n        }\n\n        // Scaling the Height of the animation for consistency across ranges\n        let anScale = anDist / anFileSize;\n        let anScaleY = anDist <= 600 ? 0.6 : anScale;\n\n        let spellAnim =\n        {\n            file: anFile,\n            position: myToken.center,\n            anchor: {\n                x: anchorX,\n                y: 0.5\n            },\n            angle: anDeg,\n            scale: {\n                x: anScale,\n                y: anScaleY\n            }\n        };\n\n        async function SpellAnimation(number) {\n\n            let x = number;\n            let interval = 250;\n            for (var i = 0; i < x; i++) {\n                setTimeout(function () {\n                    canvas.fxmaster.playVideo(spellAnim);\n                    game.socket.emit('module.fxmaster', spellAnim);\n                    let soundFile = `example/sound/file.mp3`;\n                    switch (true) {\n                        case (soundFile != \"example/sound/file.mp3\"):\n                            AudioHelper.play({ src: soundFile, volume: 1.0, autoplay: true, loop: false }, true);\n                            break;\n                    }\n\n                }, i * interval);\n            }\n            await wait(interval * x + 1000);\n            TokenMagic.deleteFiltersOnTargeted();\n        }\n        SpellAnimation(3)\n        await wait(tmDelay);\n        TokenMagic.addUpdateFiltersOnTargeted(colorWave);\n\n    }\n\n}\nCast()","author":"cDoi3U5MyHp0uBW1","img":"modules/jb2a_patreon/Library/Generic/Weapon_Attacks/Ranged/LaserShot_01_Regular_Blue_Thumb.webp","actorIds":[]}
{"_id":"bmcv7DIxafeUw3yY","name":"MagicMissileMacro","permission":{"default":0,"cDoi3U5MyHp0uBW1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.e9V8bci3JHTiryxm"}},"scope":"global","command":"const lastArg = args[args.length - 1];\nlet item = lastArg.item\n\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\nlet itemName = item.name.toLowerCase();\nlet itemSource = item.data.source.toLowerCase();\nlet path00 = game.modules.get(\"jb2a_patreon\") === true ? \"JB2A_DnD5e\" : \"jb2a_patreon\";\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nlet type01 = \"01\";\nlet tint = \"Regular\";\nlet color = \"Blue\";\nlet tmColor = 0x053ABD;\n\nswitch (true) {\n    case (itemSource.includes(\"blue\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Blue\";\n        tmColor = 0x187C00;\n        break;\n    case (itemSource.includes(\"green\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Green\";\n        tmColor = 0x2CE600;\n        break;\n    case (itemSource.includes(\"purple\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Purple\";\n        tmColor = 0x8E0000;\n        break;\n    case (itemSource.includes(\"yellow\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Yellow\";\n        tmColor = 0xFF0000;\n        break;\n}\n\n//\n// Token Magic FX Definitions for passing inside the switch\n// You can modify these, or add new ones based off other Token Magic FX animations\n// \nlet Shockwave =\n    [{\n        filterType: \"wave\",\n        filterId: \"myShockwave\",\n        time: 0,\n        strength: 0.03,\n        frequency: 15,\n        maxIntensity: 4.0,\n        minIntensity: 0.5,\n        padding: 25,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: 0.0180,\n                animType: \"move\",\n            }\n        }\n    }];\n\nlet file = `modules/${path00}/Library/1st_Level/Magic_Missile/`;\n\nlet mmA = `${file}MagicMissile_${type01}_${tint}_${color}_30ft_01_1600x400.webm`;\nlet mmB = `${file}MagicMissile_${type01}_${tint}_${color}_30ft_02_1600x400.webm`;\nlet mmC = `${file}MagicMissile_${type01}_${tint}_${color}_30ft_03_1600x400.webm`;\nlet mmD = `${file}MagicMissile_${type01}_${tint}_${color}_30ft_04_1600x400.webm`;\nlet mmE = `${file}MagicMissile_${type01}_${tint}_${color}_30ft_05_1600x400.webm`;\nlet mmF = `${file}MagicMissile_${type01}_${tint}_${color}_30ft_06_1600x400.webm`;\nlet mmG = `${file}MagicMissile_${type01}_${tint}_${color}_30ft_07_1600x400.webm`;\nlet mmH = `${file}MagicMissile_${type01}_${tint}_${color}_30ft_08_1600x400.webm`;\nlet mmI = `${file}MagicMissile_${type01}_${tint}_${color}_30ft_09_1600x400.webm`;\n\nlet mmAA = `${file}MagicMissile_${type01}_${tint}_${color}_60ft_01_2800x400.webm`;\nlet mmBB = `${file}MagicMissile_${type01}_${tint}_${color}_60ft_02_2800x400.webm`;\nlet mmCC = `${file}MagicMissile_${type01}_${tint}_${color}_60ft_03_2800x400.webm`;\nlet mmDD = `${file}MagicMissile_${type01}_${tint}_${color}_60ft_04_2800x400.webm`;\nlet mmEE = `${file}MagicMissile_${type01}_${tint}_${color}_60ft_05_2800x400.webm`;\nlet mmFF = `${file}MagicMissile_${type01}_${tint}_${color}_60ft_06_2800x400.webm`;\nlet mmGG = `${file}MagicMissile_${type01}_${tint}_${color}_60ft_07_2800x400.webm`;\nlet mmHH = `${file}MagicMissile_${type01}_${tint}_${color}_60ft_08_2800x400.webm`;\nlet mmII = `${file}MagicMissile_${type01}_${tint}_${color}_60ft_09_2800x400.webm`;\n\nfunction random_itemA(itemsA) {\n    return itemsA[Math.floor(Math.random() * itemsA.length)];\n}\n\nvar itemsA = [mmA, mmB, mmC, mmD, mmE, mmF, mmG, mmH, mmI];\n\nfunction random_itemB(itemsB) {\n    return itemsB[Math.floor(Math.random() * itemsB.length)];\n}\n\nvar itemsB = [mmAA, mmBB, mmCC, mmDD, mmEE, mmFF, mmGG, mmHH, mmII];\n\nasync function Cast() {\n    //            change to lastArg.hitTargets to only play animations on hit using Midi Workflow option\n    var myStringArray = lastArg.targets;\n    var arrayLength = myStringArray.length;\n    for (var i = 0; i < arrayLength; i++) {\n\n        let mainTargetdata = myStringArray[i];\n        let mainTarget = canvas.tokens.get(mainTargetdata._id)\n        let myToken = canvas.tokens.get(lastArg.tokenId) || canvas.tokens.placeables.find(token => token.actor.items.get(item._id) != null)\n\n        // Defines a new Ray between the caster and target\n        let ray = new Ray(myToken.center, mainTarget.center);\n        // Determines the angle\n        let anDeg = -(ray.angle * 57.3);\n        // assigns the distance of the newly created Ray to anDist\n        let anDist = ray.distance;\n\n\n\n        async function SpellAnimation(number) {\n\n            let x = number;\n            let interval = 500;\n            for (var i = 0; i < x; i++) {\n                setTimeout(function () {\n\n                    let anFile = random_itemA(itemsA);\n                    let anFileSize = 600;\n                    let anchorX = 0.125;\n                    switch (true) {\n                        case (anDist <= 1800):\n                            anFileSize = 1200;\n                            anFile = random_itemA(itemsA);\n                            anchorX = 0.125;\n                            break;\n                        default:\n                            anFileSize = 2400;\n                            anFile = random_itemB(itemsB);\n                            anchorX = 0.071;\n                            break;\n                    }\n\n                    let anScale = anDist / anFileSize;\n                    let anScaleY = anDist <= 600 ? 0.6 : anScale;\n\n                    let spellAnim =\n                    {\n                        file: anFile,\n                        position: myToken.center,\n                        anchor: {\n                            x: anchorX,\n                            y: 0.5\n                        },\n                        angle: anDeg,\n                        scale: {\n                            x: anScale,\n                            y: anScaleY\n                        }\n                    };\n                    canvas.fxmaster.playVideo(spellAnim);\n                    game.socket.emit('module.fxmaster', spellAnim);\n\n//                               put your sound file here\n                    let soundFile = `example/sound/file.mp3`;\n                    switch (true) {\n                        case (soundFile != \"example/sound/file.mp3\"):\n                            AudioHelper.play({ src: soundFile, volume: 1.0, autoplay: true, loop: false }, true);\n                            break;\n                    }\n\n                }, i * interval);\n            }\n        }\n        SpellAnimation(3)\n\n    }\n}\nCast()\n\n// Activates the Token Magic FX after a delay\nawait wait(1000)\nTokenMagic.addUpdateFiltersOnTargeted(Shockwave);\nawait wait(2500);\nTokenMagic.deleteFiltersOnTargeted();","author":"cDoi3U5MyHp0uBW1","img":"modules/jb2a_patreon/Library/1st_Level/Magic_Missile/MagicMissile_01_Regular_Blue_Thumb.webp","actorIds":[]}
{"_id":"LVss7aSRxl9IWMSm","name":"RayOfFrostMacro","permission":{"default":0,"cDoi3U5MyHp0uBW1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.Svy4VAPG1WJBNFcM"}},"scope":"global","command":"const lastArg = args[args.length - 1];\nlet item = lastArg.item\n\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\nlet itemName = item.name.toLowerCase();\nlet itemSource = item.data.source.toLowerCase();\nlet path00 = game.modules.get(\"jb2a_patreon\") === true ? \"JB2A_DnD5e\" : \"jb2a_patreon\";\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nlet type01 = \"01\";\nlet tint = \"Regular\";\nlet color = \"Blue\";\nlet tmColor = 0xFF9309;\n\nswitch(true){\n  case (itemSource.includes(\"blueyellow\")):\n    type01 = \"01\";\n    tint = \"Regular\";\n    color = \"BlueYellow\";\n    tmColor = 0xACC5C5;\n  break;\n  case (itemSource.includes(\"blue\")):\n    type01 = \"01\";\n    tint = \"Regular\";\n    color = \"Blue\";\n    tmColor = 0x0A50E7;\n  break;\n  case (itemSource.includes(\"green\")):\n    type01 = \"01\";\n    tint = \"Regular\";\n    color = \"Green\";\n    tmColor = 0x14E599;\n  break;\n  case (itemSource.includes(\"purpleteal\")):\n    type01 = \"01\";\n    tint = \"Regular\";\n    color = \"PurpleTeal\";\n    tmColor = 0xC38CDC;\n  break;\n  }\n\n//\n// Token Magic FX Definitions for passing inside the switch\n// You can modify these, or add new ones based off other Token Magic FX animations\n// \nlet Frosty =\n[{\n    filterType: \"xfire\",\n    filterId: \"mySuperFrost\",\n    color: tmColor,\n    time: 0,\n    blend: 5,\n    amplitude: 1,\n    dispersion: 0,\n    chromatic: false,\n    scaleX: 1,\n    scaleY: 1,\n    inlay: true,\n    animated :\n    {\n      time : \n      { \n        active: true, \n        speed: -0.0020, \n        animType: \"move\" \n      }\n       \n    }\n}];\n\nasync function Cast() {\n//            change to lastArg.hitTargets to only play animations on hit using Midi Workflow option\n    var myStringArray = lastArg.targets;\n    var arrayLength = myStringArray.length;\n    for (var i = 0; i < arrayLength; i++) {\n\n        let mainTargetdata = myStringArray[i];\n        let mainTarget = canvas.tokens.get(mainTargetdata._id)\n        let myToken = canvas.tokens.get(lastArg.tokenId) || canvas.tokens.placeables.find(token => token.actor.items.get(item._id) != null)\n\n// Defines a new Ray between the caster and target\nlet ray = new Ray(myToken.center, mainTarget.center);\n// Determines the angle\nlet anDeg = -(ray.angle * 57.3);\n// assigns the distance of the newly created Ray to anDist\nlet anDist = ray.distance;\n\n// Base file path for this animation\nlet file = `modules/${path00}/Library/Cantrip/Ray_Of_Frost/`;\n\n\nlet anFile = `${file}RayOfFrost_${type01}_${tint}_${color}_15ft_1000x400.webm`;\nlet anFileSize = 600;\nlet anchorX = 0.2;\nswitch(true){\n case (anDist<=600):\n    anFileSize = 600;\n    anFile = `${file}RayOfFrost_${type01}_${tint}_${color}_15ft_1000x400.webm`;\n    anchorX = 0.2;\n    break;\n case (anDist>1200):\n    anFileSize = 1800;\n    anFile = `${file}RayOfFrost_${type01}_${tint}_${color}_45ft_2200x400.webm`;\n    anchorX = 0.091;\n    break;\n default:\n    anFileSize = 1200;\n    anFile = `${file}RayOfFrost_${type01}_${tint}_${color}_30ft_1600x400.webm`;\n    anchorX = 0.125;\n    break;\n}\n\nlet anScale = anDist / anFileSize;\nlet anScaleY = anDist <= 600 ? 0.6  : anScale;\n\nlet spellAnim = \n                    {\n                     file: anFile,\n                      position: myToken.center,\n                      anchor: {\n                       x: anchorX,\n                       y: 0.5\n                      },\n                      angle: anDeg,\n                      scale: {\n                       x: anScale,\n                       y: anScaleY\n                      }\n                    }; \ncanvas.fxmaster.playVideo(spellAnim);\ngame.socket.emit('module.fxmaster', spellAnim);\n\n// Change the path here to a sound file you would like to use\nlet soundFile = `example/sound/file.mp3`;\nswitch (true){\n   case (soundFile != \"example/sound/file.mp3\"):\n      AudioHelper.play({src: soundFile, volume: 1.0, autoplay: true, loop: false}, true);\n   break;\n}\n\n}\n}\nCast()\n\n// Activates the Token Magic FX after a delay\nawait wait(1000);\nTokenMagic.addUpdateFiltersOnTargeted(Frosty);\nawait wait(2000);\nTokenMagic.deleteFiltersOnTargeted();","author":"cDoi3U5MyHp0uBW1","img":"modules/jb2a_patreon/Library/Cantrip/Ray_Of_Frost/RayOfFrost_01_Regular_Blue_Thumb.webp","actorIds":[]}
{"_id":"58xt9wlvgVoPvMdC","name":"ScorchingRayMacro","permission":{"default":0,"cDoi3U5MyHp0uBW1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.QBlP9mn8SWHAmnHx"}},"scope":"global","command":"const lastArg = args[args.length - 1];\nlet item = lastArg.item\n\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\nlet itemName = item.name.toLowerCase();\nlet itemSource = item.data.source.toLowerCase();\nlet path00 = game.modules.get(\"jb2a_patreon\") === true ? \"JB2A_DnD5e\" : \"jb2a_patreon\";\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nlet type01 = \"01\";\nlet tint = \"Regular\";\nlet color = \"Orange\";\nlet tmColor = 0xF1721A;\n\nswitch (true) {\n    case (itemSource.includes(\"blue\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Blue\";\n        tmColor = 0xBBDDEE;\n        break;\n    case (itemSource.includes(\"green\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Green\";\n        tmColor = 0x9FE04C;\n        break;\n    case (itemSource.includes(\"orange\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Orange\";\n        tmColor = 0xF1721A;\n        break;\n    case (itemSource.includes(\"purple\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Purple\";\n        tmColor = 0xA953FF;\n        break;\n    case (itemSource.includes(\"red\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Red\";\n        tmColor = 0xFF1C34;\n        break;\n    case (itemSource.includes(\"yellow\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Yellow\";\n        tmColor = 0xFFF11C;\n        break;\n}\n\n//\n// Token Magic FX Definitions for passing inside the switch\n// You can modify these, or add new ones based off other Token Magic FX animations\n// \nlet letitBurn =\n    [{\n        filterType: \"xfire\",\n        filterId: \"myColdXFire\",\n        time: 0,\n        // Can change color in hex format\n        color: tmColor,\n        blend: 1,\n        amplitude: 1,\n        dispersion: 0,\n        chromatic: false,\n        scaleX: 1,\n        scaleY: 1,\n        inlay: false,\n        autoDestroy: true,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: -0.0015,\n                animType: \"move\"\n            }\n\n        }\n    }];\n\nasync function Cast() {\n    //            change to lastArg.hitTargets to only play animations on hit using Midi Workflow option\n    var myStringArray = lastArg.targets;\n    var arrayLength = myStringArray.length;\n    for (var i = 0; i < arrayLength; i++) {\n\n        let mainTargetdata = myStringArray[i];\n        let mainTarget = canvas.tokens.get(mainTargetdata._id)\n        let myToken = canvas.tokens.get(lastArg.tokenId) || canvas.tokens.placeables.find(token => token.actor.items.get(item._id) != null)\n\n        // Defines a new Ray between the caster and target\n        let ray = new Ray(myToken.center, mainTarget.center);\n        // Determines the angle\n        let anDeg = -(ray.angle * 57.3);\n        // assigns the distance of the newly created Ray to anDist\n        let anDist = ray.distance;\n\n        // Base file path for this animation\n        let file = `modules/${path00}/Library/2nd_Level/Scorching_Ray/`;\n\n\n        let anFile = `${file}ScorchingRay_${type01}_${tint}_${color}_30ft_1600x400.webm`;\n        let anFileSize = 600;\n        let anchorX = 0.125;\n        switch (true) {\n            case (anDist <= 1600):\n                anFileSize = 1200;\n                anFile = `${file}ScorchingRay_${type01}_${tint}_${color}_30ft_1600x400.webm`;\n                anchorX = 0.125;\n                break;\n            case (anDist <= 4000):\n                anFileSize = 3600;\n                anFile = `${file}ScorchingRay_${type01}_${tint}_${color}_90ft_4000x400.webm`;\n                anchorX = 0.05;\n                break;\n            default:\n                anFileSize = 2400;\n                anFile = `${file}ScorchingRay_${type01}_${tint}_${color}_60ft_2800x400.webm`;\n                anchorX = 0.071;\n                break;\n        }\n\n        let anScale = anDist / anFileSize;\n        let anScaleY = anDist <= 600 ? 0.6 : anScale;\n\n        let spellAnim =\n        {\n            file: anFile,\n            position: myToken.center,\n            anchor: {\n                x: anchorX,\n                y: 0.5\n            },\n            angle: anDeg,\n            scale: {\n                x: anScale,\n                y: anScaleY\n            }\n        };\n        canvas.fxmaster.playVideo(spellAnim);\n        game.socket.emit('module.fxmaster', spellAnim);\n\n        // Change the path here to a sound file you would like to use\n        let soundFile = `example/sound/file.mp3`;\n        switch (true) {\n            case (soundFile != \"example/sound/file.mp3\"):\n                AudioHelper.play({ src: soundFile, volume: 1.0, autoplay: true, loop: false }, true);\n                break;\n        }\n\n    }\n}\nCast()\n\n// Activates the Token Magic FX after a delay\nawait wait(500);\nTokenMagic.addUpdateFiltersOnTargeted(letitBurn);\nawait wait(2000);\nTokenMagic.deleteFiltersOnTargeted();","author":"cDoi3U5MyHp0uBW1","img":"modules/jb2a_patreon/Library/2nd_Level/Scorching_Ray/ScorchingRay_01_Regular_Orange_Thumb.webp","actorIds":[]}
{"_id":"bmcv7DIxafeUw3yY","name":"MagicMissileMacro","permission":{"default":0,"cDoi3U5MyHp0uBW1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.e9V8bci3JHTiryxm"}},"scope":"global","command":"const lastArg = args[args.length - 1];\nlet item = lastArg.item\n\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\nlet itemName = item.name.toLowerCase();\nlet itemSource = item.data.source.toLowerCase();\nlet path00 = game.modules.get(\"jb2a_patreon\") === true ? \"JB2A_DnD5e\" : \"jb2a_patreon\";\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nlet type01 = \"01\";\nlet tint = \"Regular\";\nlet color = \"Purple\";\nlet tmColor = 0x8E0000;\n\nswitch (true) {\n    case (itemSource.includes(\"blue\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Blue\";\n        tmColor = 0x187C00;\n        break;\n    case (itemSource.includes(\"green\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Green\";\n        tmColor = 0x2CE600;\n        break;\n    case (itemSource.includes(\"purple\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Purple\";\n        tmColor = 0x8E0000;\n        break;\n    case (itemSource.includes(\"yellow\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Yellow\";\n        tmColor = 0xFF0000;\n        break;\n}\n\n//\n// Token Magic FX Definitions for passing inside the switch\n// You can modify these, or add new ones based off other Token Magic FX animations\n// \nlet Shockwave =\n    [{\n        filterType: \"wave\",\n        filterId: \"myShockwave\",\n        time: 0,\n        strength: 0.03,\n        frequency: 15,\n        maxIntensity: 4.0,\n        minIntensity: 0.5,\n        padding: 25,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: 0.0180,\n                animType: \"move\",\n            }\n        }\n    }];\n\nlet file = `modules/${path00}/Library/1st_Level/Magic_Missile/`;\n\nlet mmA = `${file}MagicMissile_${type01}_${tint}_${color}_30ft_01_1600x400.webm`;\nlet mmB = `${file}MagicMissile_${type01}_${tint}_${color}_30ft_02_1600x400.webm`;\nlet mmC = `${file}MagicMissile_${type01}_${tint}_${color}_30ft_03_1600x400.webm`;\nlet mmD = `${file}MagicMissile_${type01}_${tint}_${color}_30ft_04_1600x400.webm`;\nlet mmE = `${file}MagicMissile_${type01}_${tint}_${color}_30ft_05_1600x400.webm`;\nlet mmF = `${file}MagicMissile_${type01}_${tint}_${color}_30ft_06_1600x400.webm`;\nlet mmG = `${file}MagicMissile_${type01}_${tint}_${color}_30ft_07_1600x400.webm`;\nlet mmH = `${file}MagicMissile_${type01}_${tint}_${color}_30ft_08_1600x400.webm`;\nlet mmI = `${file}MagicMissile_${type01}_${tint}_${color}_30ft_09_1600x400.webm`;\n\nlet mmAA = `${file}MagicMissile_${type01}_${tint}_${color}_60ft_01_2800x400.webm`;\nlet mmBB = `${file}MagicMissile_${type01}_${tint}_${color}_60ft_02_2800x400.webm`;\nlet mmCC = `${file}MagicMissile_${type01}_${tint}_${color}_60ft_03_2800x400.webm`;\nlet mmDD = `${file}MagicMissile_${type01}_${tint}_${color}_60ft_04_2800x400.webm`;\nlet mmEE = `${file}MagicMissile_${type01}_${tint}_${color}_60ft_05_2800x400.webm`;\nlet mmFF = `${file}MagicMissile_${type01}_${tint}_${color}_60ft_06_2800x400.webm`;\nlet mmGG = `${file}MagicMissile_${type01}_${tint}_${color}_60ft_07_2800x400.webm`;\nlet mmHH = `${file}MagicMissile_${type01}_${tint}_${color}_60ft_08_2800x400.webm`;\nlet mmII = `${file}MagicMissile_${type01}_${tint}_${color}_60ft_09_2800x400.webm`;\n\nfunction random_itemA(itemsA) {\n    return itemsA[Math.floor(Math.random() * itemsA.length)];\n}\n\nvar itemsA = [mmA, mmB, mmC, mmD, mmE, mmF, mmG, mmH, mmI];\n\nfunction random_itemB(itemsB) {\n    return itemsB[Math.floor(Math.random() * itemsB.length)];\n}\n\nvar itemsB = [mmAA, mmBB, mmCC, mmDD, mmEE, mmFF, mmGG, mmHH, mmII];\n\nasync function Cast() {\n    //            change to lastArg.hitTargets to only play animations on hit using Midi Workflow option\n    var myStringArray = lastArg.targets;\n    var arrayLength = myStringArray.length;\n    for (var i = 0; i < arrayLength; i++) {\n\n        let mainTargetdata = myStringArray[i];\n        let mainTarget = canvas.tokens.get(mainTargetdata._id)\n        let myToken = canvas.tokens.get(lastArg.tokenId) || canvas.tokens.placeables.find(token => token.actor.items.get(item._id) != null)\n\n        // Defines a new Ray between the caster and target\n        let ray = new Ray(myToken.center, mainTarget.center);\n        // Determines the angle\n        let anDeg = -(ray.angle * 57.3);\n        // assigns the distance of the newly created Ray to anDist\n        let anDist = ray.distance;\n\n\n\n        async function SpellAnimation(number) {\n\n            let x = number;\n            let interval = 500;\n            for (var i = 0; i < x; i++) {\n                setTimeout(function () {\n\n                    let anFile = random_itemA(itemsA);\n                    let anFileSize = 600;\n                    let anchorX = 0.125;\n                    switch (true) {\n                        case (anDist <= 1800):\n                            anFileSize = 1200;\n                            anFile = random_itemA(itemsA);\n                            anchorX = 0.125;\n                            break;\n                        default:\n                            anFileSize = 2400;\n                            anFile = random_itemB(itemsB);\n                            anchorX = 0.071;\n                            break;\n                    }\n\n                    let anScale = anDist / anFileSize;\n                    let anScaleY = anDist <= 600 ? 0.6 : anScale;\n\n                    let spellAnim =\n                    {\n                        file: anFile,\n                        position: myToken.center,\n                        anchor: {\n                            x: anchorX,\n                            y: 0.5\n                        },\n                        angle: anDeg,\n                        scale: {\n                            x: anScale,\n                            y: anScaleY\n                        }\n                    };\n                    canvas.fxmaster.playVideo(spellAnim);\n                    game.socket.emit('module.fxmaster', spellAnim);\n\n//                               put your sound file here\n                    let soundFile = `example/sound/file.mp3`;\n                    switch (true) {\n                        case (soundFile != \"example/sound/file.mp3\"):\n                            AudioHelper.play({ src: soundFile, volume: 1.0, autoplay: true, loop: false }, true);\n                            break;\n                    }\n\n                }, i * interval);\n            }\n        }\n        SpellAnimation(3)\n\n    }\n}\nCast()\n\n// Activates the Token Magic FX after a delay\nawait wait(1000)\nTokenMagic.addUpdateFiltersOnTargeted(Shockwave);\nawait wait(2500);\nTokenMagic.deleteFiltersOnTargeted();","author":"cDoi3U5MyHp0uBW1","img":"modules/jb2a_patreon/Library/1st_Level/Magic_Missile/MagicMissile_01_Regular_Blue_Thumb.webp","actorIds":[]}
{"_id":"gSFKtSIS7RyezdMy","name":"ShatterMacro","permission":{"default":0,"cDoi3U5MyHp0uBW1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.mPsbSrBN1ZSITuHp"}},"scope":"global","command":"const lastArg = args[args.length - 1];\nlet item = lastArg.item\n\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\nlet itemName = item.name.toLowerCase();\nlet itemSource = item.data.source.toLowerCase();\nlet path00 = game.modules.get(\"jb2a_patreon\") === true ? \"JB2A_DnD5e\" : \"jb2a_patreon\";\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nlet type01 = \"01\";\nlet color = \"Blue\";\nlet tmColor = 0x0075B0;\n\nswitch (true) {\n    case (itemSource.includes(\"blue\")):\n        type01 = \"01\";\n        color = \"Blue\";\n        tmColor = 0x0075B0;\n        break;\n    case (itemSource.includes(\"green\")):\n        type01 = \"01\";\n        color = \"Green\";\n        tmColor = 0x0EB400;\n        break;\n    case (itemSource.includes(\"orange\")):\n        type01 = \"01\";\n        color = \"Orange\";\n        tmColor = 0xBF6E00;\n        break;\n    case (itemSource.includes(\"purple\")):\n        type01 = \"01\";\n        color = \"Purple\";\n        tmColor = 0xBF0099;\n        break;\n    case (itemSource.includes(\"red\")):\n        type01 = \"01\";\n        color = \"Red\";\n        tmColor = 0xBF0000;\n        break;\n\n}\n\n\nasync function Cast() {\n\n    //Finds the center of the placed circular template and plays an animation using FXMaster\n    const templateID = canvas.templates.placeables[canvas.templates.placeables.length - 1].data._id;\n    let template = await canvas.templates.get(templateID);\n    // Scaled globally, change divisor for different size animation.\n    let Scale = canvas.scene.data.grid / 90;\n    // Defines the spell template for FXMaster\n    let spellAnim =\n    {\n        file: `modules/${path00}/Library/2nd_Level/Shatter/Shatter_${type01}_${color}_400x400.webm`,\n        position: template.center,\n        anchor: {\n            x: 0.5,\n            y: 0.5\n        },\n        angle: 0,\n        scale: {\n            x: Scale,\n            y: Scale\n        }\n    };\n\n    async function SpellAnimation(number) {\n\n        let x = number;\n        // This is the interval in between the start of each animation on the loop in milliseconds\n        let interval = 1000;\n        for (var i = 0; i < x; i++) {\n            setTimeout(function () {\n                canvas.fxmaster.playVideo(spellAnim);\n                game.socket.emit('module.fxmaster', spellAnim);\n            }, i * interval);\n        }\n    }\n    // The number in parenthesis sets the number of times it loops\n    SpellAnimation(3)\n\n    // Add some sound\n    /*\n    await wait (200);\n    let soundFile = `sound path here`;\n    AudioHelper.play({src: soundFile, volume: 1.0, autoplay: true, loop: false}, true);\n    */\n\n    let params =\n        [{\n            filterType: \"wave\",\n            filterId: \"myShockwave\",\n            time: 0,\n            strength: 0.03,\n            frequency: 15,\n            maxIntensity: 4.0,\n            minIntensity: 0.5,\n            padding: 25,\n            animated:\n            {\n                time:\n                {\n                    active: true,\n                    speed: 0.0180,\n                    animType: \"move\",\n                }\n            }\n        },\n        {\n            filterType: \"xfire\",\n            filterId: \"myColdXFire\",\n            time: 0,\n            color: tmColor,\n            blend: 1,\n            amplitude: 1,\n            dispersion: 0,\n            chromatic: false,\n            scaleX: 1,\n            scaleY: 1,\n            inlay: false,\n            animated:\n            {\n                time:\n                {\n                    active: true,\n                    speed: -0.0015,\n                    animType: \"move\"\n                }\n            }\n        }];\n    await wait(1400);\n    TokenMagic.addUpdateFiltersOnTargeted(params);\n    await wait(3500);\n    TokenMagic.deleteFiltersOnTargeted();\n}\nCast()","author":"cDoi3U5MyHp0uBW1","img":"modules/jb2a_patreon/Library/2nd_Level/Shatter/Shatter_01_Blue_Thumb.webp","actorIds":[]}
{"_id":"81yeCW54UnkztORO","name":"WitchBoltMacro","permission":{"default":0,"cDoi3U5MyHp0uBW1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.euhQhz0J0wVN5UJm"}},"scope":"global","command":"const lastArg = args[args.length - 1];\nlet item = lastArg.item\n\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\nlet itemName = item.name.toLowerCase();\nlet itemSource = item.data.source.toLowerCase();\nlet path00 = game.modules.get(\"jb2a_patreon\") === true ? \"JB2A_DnD5e\" : \"jb2a_patreon\";\n\nfunction itemIncludes(test) {\n    if (itemSource.includes(test) || itemName.includes(test)) return true;\n}\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nlet type01 = \"01\";\nlet tint = \"Regular\";\nlet color = \"Blue\";\nlet tmColor = 0x053ABD;\n\nswitch (true) {\n    case (itemIncludes(\"darkgreen\")):\n        type01 = \"01\";\n        tint = \"Dark\";\n        color = \"Green\";\n        tmColor = 0x187C00;\n        break;\n    case (itemIncludes(\"green\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Green\";\n        tmColor = 0x2CE600;\n        break;\n    case (itemIncludes(\"darkred\")):\n        type01 = \"01\";\n        tint = \"Dark\";\n        color = \"Red\";\n        tmColor = 0x8E0000;\n        break;\n    case (itemIncludes(\"red\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Red\";\n        tmColor = 0xFF0000;\n        break;\n    case (itemIncludes(\"darkpurple\")):\n        type01 = \"01\";\n        tint = \"Dark\";\n        color = \"Purple\";\n        tmColor = 0xAE00AE;\n        break;\n    case (itemIncludes(\"blue\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Blue\";\n        tmColor = 0x053ABD;\n        break;\n    case (itemIncludes(\"yellow\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Yellow\";\n        tmColor = 0xD8E300;\n        break;\n}\n\n//\n// Token Magic FX Definitions for passing inside the switch\n// You can modify these, or add new ones based off other Token Magic FX animations\n// \nlet Electric =\n    [{\n        filterType: \"electric\",\n        // Can change color in hex format\n        color: tmColor,\n        time: 0,\n        blend: 2,\n        intensity: 5,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: 0.0020,\n                animType: \"move\"\n            }\n\n        }\n    }];\n\nasync function Cast() {\n    //            change to lastArg.hitTargets to only play animations on hit using Midi Workflow option\n    var myStringArray = lastArg.targets;\n    var arrayLength = myStringArray.length;\n    for (var i = 0; i < arrayLength; i++) {\n\n        let mainTargetdata = myStringArray[i];\n        let mainTarget = canvas.tokens.get(mainTargetdata._id)\n        let myToken = canvas.tokens.get(lastArg.tokenId) || canvas.tokens.placeables.find(token => token.actor.items.get(item._id) != null)\n\n        // Defines a new Ray between the caster and target\n        let ray = new Ray(myToken.center, mainTarget.center);\n        // Determines the angle\n        let anDeg = -(ray.angle * 57.3);\n        // assigns the distance of the newly created Ray to anDist\n        let anDist = ray.distance;\n\n        // Base file path for this animation\n        let file = `modules/${path00}/Library/1st_Level/Witch_Bolt/`;\n\n\n        let anFile = `${file}WitchBolt_${type01}_${tint}_${color}_15ft_1000x400.webm`;\n        let anFileSize = 600;\n        let anchorX = 0.2;\n        switch (true) {\n            case (anDist <= 600):\n                anFileSize = 600;\n                anFile = `${file}WitchBolt_${type01}_${tint}_${color}_15ft_1000x400.webm`;\n                anchorX = 0.2;\n                break;\n            default:\n                anFileSize = 1200;\n                anFile = `${file}WitchBolt_${type01}_${tint}_${color}_30ft_1600x400.webm`;\n                anchorX = 0.125;\n                break;\n        }\n\n        let anScale = anDist / anFileSize;\n        let anScaleY = anDist <= 600 ? 0.6 : anScale;\n\n        let spellAnim =\n        {\n            file: anFile,\n            position: myToken.center,\n            anchor: {\n                x: anchorX,\n                y: 0.5\n            },\n            angle: anDeg,\n            scale: {\n                x: anScale,\n                y: anScaleY\n            }\n        };\n\n\n        async function SpellAnimation(number) {\n\n            let x = number;\n            let interval = 4000;\n            for (var i = 0; i < x; i++) {\n                setTimeout(function () {\n                    canvas.fxmaster.playVideo(spellAnim);\n                    game.socket.emit('module.fxmaster', spellAnim);\n//               Add your sound file in the line below\n                    let soundFile = `example/sound/file.mp3`;\n                    switch (true) {\n                        case (soundFile != \"example/sound/file.mp3\"):\n                            AudioHelper.play({ src: soundFile, volume: 1.0, autoplay: true, loop: false }, true);\n                            break;\n                    }\n\n                }, i * interval);\n            }\n            await wait(interval * x);\n            // Removes TMFX after animation loops      \n            TokenMagic.deleteFiltersOnTargeted();\n        }\n        // The number in parenthesis sets the number of times the animation loops\n        SpellAnimation(1)\n\n        canvas.fxmaster.playVideo(spellAnim);\n        game.socket.emit('module.fxmaster', spellAnim);\n\n    }\n}\nCast()\n// Activates the Token Magic FX after a delay\nTokenMagic.addUpdateFiltersOnTargeted(Electric);","author":"cDoi3U5MyHp0uBW1","img":"modules/jb2a_patreon/Library/1st_Level/Witch_Bolt/WitchBolt_01_Dark_Purple_Thumb.webp","actorIds":[]}
{"_id":"iyerEKKPgp9mtcX7","name":"ArrowExplodeMacro","permission":{"default":0,"cDoi3U5MyHp0uBW1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.zLF4fvQIlMgMG2ln"}},"scope":"global","command":"// Requires at least 1 target to play the animation\nif (game.user.targets.size == 0) ui.notifications.error('You must target at least one token');\n// Requires a token to be seleected to play the animation\nif (canvas.tokens.controlled.length == 0) ui.notifications.error(\"Please select your token\");\n// Requires FX Master Module\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\nconst lastArg = args[args.length - 1];\nlet item = lastArg.item\n\nlet itemName = item.name.toLowerCase();\nlet itemSource = item.data.source.toLowerCase();\nlet path00 = game.modules.get(\"jb2a_patreon\") === true ? \"JB2A_DnD5e\" : \"jb2a_patreon\";\n\nfunction itemIncludes(test) {\n    if (itemSource.includes(test) || itemName.includes(test)) return true;\n}\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nlet type01 = \"01\";\nlet type02 = \"01\";\nlet tint = \"Regular\";\nlet color = \"White\";\nlet color02 = \"Orange\"\nlet tmColor = 0xFF9309;\nlet tmMacro;\n\nswitch (true) {\n    case (itemIncludes(\"green\")):\n        type01 = \"01\";\n        tint = \"Glowing\";\n        color = \"Green\";\n        break;\n    case (itemIncludes(\"white\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"White\";\n        break;\n}\n\nswitch (true) {\n    case (itemIncludes(\"acid\")):\n        type02 = \"01\";\n        color02 = \"Green\";\n        tmColor = 0x60CC70;\n        break;\n    case (itemIncludes(\"explosive\")):\n        type02 = \"01\";\n        color02 = \"Orange\";\n        tmColor = 0xFF9309;\n        break;\n    case (itemIncludes(\"lightning\")):\n        type02 = \"01\";\n        color02 = \"Blue\";\n        tmColor = 0x053ABD;\n        break;\n\n}\n\n\nlet Poison =\n    [{\n        filterType: \"field\",\n        filterId: \"mySmokeField\",\n        shieldType: 3,\n        gridPadding: 1,\n        color: tmColor,\n        time: 0,\n        blend: 0,\n        intensity: 0.9,\n        lightAlpha: 1,\n        lightSize: 0.7,\n        scale: 1,\n        radius: 1,\n        chromatic: false,\n        zOrder: 512,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: 0.0015,\n                animType: \"move\"\n            }\n        }\n    }];\n\nlet letitBurn =\n    [{\n        filterType: \"xfire\",\n        filterId: \"myColdXFire\",\n        time: 0,\n        // Can change color in hex format\n        color: tmColor,\n        blend: 1,\n        amplitude: 1,\n        dispersion: 0,\n        chromatic: false,\n        scaleX: 1,\n        scaleY: 1,\n        inlay: false,\n        autoDestroy: true,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: -0.0015,\n                animType: \"move\"\n            }\n\n        }\n    }];\n\nlet Electric =\n    [{\n        filterType: \"electric\",\n        // Can change color in hex format\n        color: tmColor,\n        time: 0,\n        blend: 2,\n        intensity: 5,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: 0.0020,\n                animType: \"move\"\n            }\n\n        }\n    }];\n\nswitch (true) {\n    case (itemIncludes(\"acid\")):\n        tmMacro = Poison;\n        break;\n    case (itemIncludes(\"explosive\")):\n        tmMacro = letitBurn;\n        break;\n    case (itemIncludes(\"lightning\")):\n        tmMacro = Electric;\n        break;\n\n}\n\n\n\nasync function Cast() {\n\n    var myStringArray = lastArg.targets;\n    var arrayLength = myStringArray.length;\n    for (var i = 0; i < arrayLength; i++) {\n\n        await wait(500)\n\n        let mainTargetdata = myStringArray[i];\n        let mainTarget = canvas.tokens.get(mainTargetdata._id);\n        let myToken = canvas.tokens.get(lastArg.tokenId) || canvas.tokens.placeables.find(token => token.actor.items.get(item._id) != null)\n\n        let ray = new Ray(myToken.center, mainTarget.center);\n        let anDeg = -(ray.angle * 57.3);\n        let anDist = ray.distance;\n\n        // Animation file path\n        let file = `modules/${path00}/Library/Generic/Weapon_Attacks/Ranged/`;\n\n        // Checking for range to target to choose which file to pull\n        let anFile = `${file}Arrow01_${type01}_${tint}_${color}_30ft_1600x400.webm`;\n        let anFileSize = 600;\n        let anchorX = 0.125;\n        let boomDelay = 1250;\n        switch (true) {\n            case (anDist <= 1200):\n                anFileSize = 1200;\n                anFile = `${file}Arrow01_${type01}_${tint}_${color}_30ft_1600x400.webm`;\n                anchorX = 0.125;\n                boomDelay = 1250;\n                break;\n            case (anDist > 2400):\n                anFileSize = 3600;\n                anFile = `${file}Arrow01_${type01}_${tint}_${color}_90ft_4000x400.webm`;\n                anchorX = 0.05;\n                boomDelay = 1750;\n                break;\n            default:\n                anFileSize = 2400;\n                anFile = `${file}Arrow01_${type01}_${tint}_${color}_60ft_2800x400.webm`;\n                anchorX = 0.071;\n                boomDelay = 1500;\n                break;\n        }\n\n        // Scaling the Height of the animation for consistency across ranges\n        let anScale = anDist / anFileSize;\n        let anScaleY = anDist <= 600 ? 0.6 : anScale;\n\n        let spellAnim =\n        {\n            file: anFile,\n            position: myToken.center,\n            anchor: {\n                x: anchorX,\n                y: 0.5\n            },\n            angle: anDeg,\n            scale: {\n                x: anScale,\n                y: anScaleY\n            }\n        };\n\n        let spellAnim2 =\n        {\n            file: `modules/${path00}/Library/Generic/Explosion/Explosion_${type02}_${color02}_400x400.webm`,\n            position: mainTarget.center,\n            anchor: {\n                x: 0.5,\n                y: 0.5\n            },\n            angle: 0,\n            scale: {\n                x: 1,\n                y: 1\n            }\n        };\n\n        canvas.fxmaster.playVideo(spellAnim);\n        game.socket.emit('module.fxmaster', spellAnim);\n\n        let soundFile = `example/sound/file.mp3`;\n        switch (true) {\n            case (soundFile != \"example/sound/file.mp3\"):\n                AudioHelper.play({ src: soundFile, volume: 1.0, autoplay: true, loop: false }, true);\n                break;\n        }\n\n        // Or play random sounds on each attack\n        /*\n        let soundHome = \"Sound/Folder/Path/Here\";\n        \n        let m1 = `sound-file-01-here`;\n        let m2 = `sound-file-02-here`;\n        function random_sound(sounds)\n        {\n        return sounds[Math.floor(Math.random()*sounds.length)];\n        }\n        \n        var sounds = [m1, m2];\n        \n        let roll = new Roll('1d3').roll().total;\n        let soundFile = random_sound(sounds);\n        AudioHelper.play({src: soundHome + soundFile, volume: 0.9, autoplay: true, loop: false}, true);\n        */\n\n        await wait(boomDelay);\n        canvas.fxmaster.playVideo(spellAnim2);\n        game.socket.emit('module.fxmaster', spellAnim2);\n        TokenMagic.addUpdateFiltersOnTargeted(tmMacro);\n        await wait(2500);\n        TokenMagic.deleteFiltersOnTargeted();\n\n        // Add a sound for the Explosion\n        await wait(50);\n        let ExplodingSound = `example/sound/file.mp3`;\n        switch (true) {\n            case (ExplodingSound != \"example/sound/file.mp3\"):\n                AudioHelper.play({ src: ExplodingSound, volume: 1.0, autoplay: true, loop: false }, true);\n                break;\n        }\n\n\n    }\n}\nCast()","author":"cDoi3U5MyHp0uBW1","img":"modules/jb2a_patreon/Library/Generic/Explosion/Explosion_01_Green_Thumb.webp","actorIds":[]}
{"_id":"hXccLhMhcouYyFVt","name":"AllMeleeAttacks","permission":{"default":0,"cDoi3U5MyHp0uBW1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.2qOZ3AJhad1LKZVq"}},"scope":"global","command":"/*\nCheck the GitHub page for a PDF of how to use this type of macro. It will automatically recognize weapon names that match the available JB2A animations.\nYou can then set the color variant in the \"Source\" Field of the item.\n*/\n\n/*\nSwitching the tmfx drawTowards so it runs without the token selected.\nRemove Dagger, Spear and Handaxe (moved to melee-switch)\nSet check and switch for patreon vs free\nAdd Improved Divine Smite check and animation\n*/\n\nconst lastArg = args[args.length - 1];\nlet item = lastArg.item\n\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\nlet itemName = item.name.toLowerCase();\nlet itemSource = item.data.source.toLowerCase();\nlet path00 = game.modules.get(\"jb2a_patreon\") === true ? \"JB2A_DnD5e\" : \"jb2a_patreon\";\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\n\nfunction itemIncludes(test) {\n    if (itemSource.includes(test) || itemName.includes(test)) return true;\n}\n// Token Magic FX Definitions for passing inside the switch\n// You can modify these, or add new ones based off other Token Magic FX animations\nlet BloodyHitStutter =\n    [{\n        filterType: \"images\",\n        filterId: \"myMirrorImages\",\n        time: 0,\n        nbImage: 2,\n        alphaImg: 1.0,\n        alphaChr: 0.0,\n        autoDestroy: true,\n        blend: 4,\n        ampX: 0.03,\n        ampY: 0.03,\n        zOrder: 20,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: 0.070,\n                animType: \"move\",\n                loopDuration: 200,\n                loops: 2\n            },\n            anchorX:\n            {\n                animType: \"chaoticOscillation\",\n                loopDuration: 100,\n                val1: 0.40,\n                val2: 0.60,\n                loops: 4\n            }\n        }\n    },\n    {\n        filterType: \"splash\",\n        filterId: \"mySplash\",\n        rank: 5,\n        color: 0x990505,\n        padding: 80,\n        time: Math.random() * 1000,\n        seed: Math.random(),\n        splashFactor: 1,\n        spread: 0.4,\n        blend: 1,\n        dimX: 1,\n        dimY: 1,\n        cut: false,\n        textureAlphaBlend: true,\n        anchorX: 0.32 + (Math.random() * 0.36),\n        anchorY: 0.32 + (Math.random() * 0.36)\n    }];\n// Token Magic FX Definitions for passing inside the switch\nlet BloodSplat =\n    [{\n        filterType: \"splash\",\n        filterId: \"mySplash\",\n        rank: 5,\n        color: 0x990505,\n        padding: 80,\n        time: Math.random() * 1000,\n        seed: Math.random(),\n        splashFactor: 1,\n        spread: 0.4,\n        blend: 1,\n        dimX: 1,\n        dimY: 1,\n        cut: false,\n        textureAlphaBlend: true,\n        anchorX: 0.32 + (Math.random() * 0.36),\n        anchorY: 0.32 + (Math.random() * 0.36)\n    }];\n// Token Magic FX Definitions for passing inside the switch\nlet HitStutter =\n    [{\n        filterType: \"images\",\n        filterId: \"myMirrorImages\",\n        time: 0,\n        nbImage: 2,\n        alphaImg: 1.0,\n        alphaChr: 0.0,\n        autoDestroy: true,\n        blend: 4,\n        ampX: 0.03,\n        ampY: 0.03,\n        zOrder: 20,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: 0.070,\n                animType: \"move\",\n                loopDuration: 200,\n                loops: 2\n            },\n            anchorX:\n            {\n                animType: \"chaoticOscillation\",\n                loopDuration: 100,\n                val1: 0.40,\n                val2: 0.60,\n                loops: 4\n            }\n        }\n    }];\nlet type01 = \"01\";\nlet tint = \"Regular\";\nlet color;\nswitch (true) {\n    case (itemIncludes(\"laser\")):\n        color = \"Blue\";\n        break;\n    default:\n        color = \"White\";\n}\nlet fireColor = \"pass\";\n//\n// Change the HEX Color code inside the switch to change the color of the fire burn on the TMFX call. I use https://htmlcolorcodes.com/ , and keep the 0x in front\n//\nswitch (true) {\n    case (itemIncludes(\"white\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"White\";\n        break;\n    case (itemIncludes(\"purple\")):\n        type01 = \"Fire\";\n        switch (true) {\n            case (itemIncludes(\"lasersword\")):\n                tint = \"Regular\";\n                break;\n            default:\n                tint = \"Dark\";\n                break;\n        }\n        color = \"Purple\";\n        fireColor = \"0x8B00C0\";\n        break;\n    case (itemIncludes(\"blue\")):\n        type01 = \"Fire\";\n        tint = \"Regular\";\n        color = \"Blue\";\n        fireColor = \"0x008FC0\";\n        break;\n    case (itemIncludes(\"green\")):\n        type01 = \"Fire\";\n        tint = \"Regular\";\n        color = \"Green\";\n        fireColor = \"0x60EA01\";\n        break;\n    case (itemIncludes(\"orange\")):\n        type01 = \"Fire\";\n        tint = \"Regular\";\n        color = \"Orange\";\n        fireColor = \"0xF18A07\";\n        break;\n    case (itemIncludes(\"pink\")):\n        type01 = \"Fire\";\n        tint = \"Regular\";\n        color = \"Pink\";\n        fireColor = \"0xD2049A\";\n        break;\n    case (itemIncludes(\"darkred\")):\n        type01 = \"Fire\";\n        tint = \"Dark\";\n        color = \"Red\";\n        fireColor = \"0x610101\";\n        break;\n    case (itemIncludes(\"red\")):\n        type01 = \"Fire\";\n        tint = \"Regular\";\n        color = \"Red\";\n        fireColor = \"0xD20404\";\n        break;\n    case (itemIncludes(\"yellow\")):\n        type01 = \"Fire\";\n        tint = \"Regular\";\n        color = \"Yellow\";\n        fireColor = \"0xCFD204\";\n        break;\n}\n//\n// Token Magic FX for burning fire. Reads the color input from above to set the color of the fire.\n//\nlet burn =\n    [{\n        filterType: \"xfire\",\n        filterId: \"myColdXFire\",\n        time: 0,\n        color: fireColor,\n        blend: 1,\n        amplitude: 1,\n        dispersion: 0,\n        chromatic: false,\n        scaleX: 1,\n        scaleY: 1,\n        inlay: false,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: -0.0015,\n                animType: \"move\"\n            }\n        }\n    }];\n\n// delay before activating the Token Magic FX Macros, change inside the switch cases to adjust the timing\nlet tmDelay = 1000;\n// delay before deleting Token Magic FX if needed, change inside switch cases to adjust the deletion\nlet tmKill = 1000;\n// calls a Token Magic FX macro defined above, change inside the switch cases to desired TMFX\nlet tmMacro = \"HitStutter\";\n// Delay for when the sound effect starts playing, change inside the switch cases to desired timing.\nlet soundDelay = 50;\n// Defines the sound to play when activated, change inside the switch cases to desired sound file\nlet soundFile = `example/sound/file.mp3`;\n\nlet item01 = \"Dagger02\";\nswitch (true) {\n    case (itemIncludes(\"greatsword\")):\n        item01 = \"GreatSword01\";\n        tmDelay = 1800;\n        tmKill = 1600;\n        tmMacro = BloodyHitStutter;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 0;\n        break;\n    case (itemIncludes(\"greatclub\")):\n        item01 = \"GreatClub01\";\n        tmDelay = 1100;\n        tmKill = 1600;\n        tmMacro = BloodyHitStutter;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 0;\n        break;\n    case (itemIncludes(\"greataxe\")):\n        item01 = \"GreatAxe01\";\n        tmDelay = 1800;\n        tmKill = 1600;\n        tmMacro = BloodyHitStutter;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 0;\n        break;\n    case (itemIncludes(\"mace\")):\n        item01 = \"Mace01\";\n        tmDelay = 1100;\n        tmKill = 1600;\n        tmMacro = BloodyHitStutter;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 0;\n        break;\n    case (itemIncludes(\"lasersword\")):\n        item01 = \"LaserSword01\";\n        type01 = \"01\";\n        tmDelay = 1300;\n        tmKill = 1600;\n        tmMacro = BloodSplat;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 0;\n        break;\n    case (itemIncludes(\"sword\")):\n        item01 = \"Sword01\";\n        tmDelay = 1300;\n        tmKill = 1600;\n        tmMacro = BloodSplat;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 0;\n        break;\n    case (itemIncludes(\"maul\")):\n        item01 = \"Maul01\";\n        tmDelay = 1900;\n        tmKill = 1600;\n        tmMacro = BloodyHitStutter;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 0;\n        break;\n}\n\nasync function Cast() {\n    //        change to lastArg.hitTargets to only play animations on hit using Midi Workflow option\n    var myStringArray = lastArg.targets;\n    var arrayLength = myStringArray.length;\n    for (var i = 0; i < arrayLength; i++) {\n        let mainTargetdata = myStringArray[i];\n        let mainTarget = canvas.tokens.get(mainTargetdata._id)\n        let myToken = canvas.tokens.get(lastArg.tokenId) || canvas.tokens.placeables.find(token => token.actor.items.get(item._id) != null)\n\n        let idsSearch = myToken.actor.data.items.filter(item => item.type === `feat`).map(item => item.name);\n\n        function actorIncludes(test) {\n            if (idsSearch.includes(test)) return true;\n        }\n\n        let dsBoom = `modules/${path00}/Library/Generic/Explosion/Explosion_02_Blue_400x400.webm`;\n        let dsScale = canvas.scene.data.grid / 400;\n        let spellAnim2 =\n        {\n            file: dsBoom,\n            position: mainTarget.center,\n            anchor: {\n                x: 0.5,\n                y: 0.5\n            },\n            angle: 0,\n            scale: {\n                x: dsScale,\n                y: dsScale\n            }\n        };\n\n        // Scaled globally, change divisor to increase/decrease size of animation\n        let Scale = canvas.scene.data.grid / 175;\n        // randomly mirrors animation\n        var plusOrMinus = Math.random() < 0.5 ? -1 : 1;\n\n        let file = `modules/${path00}/Library/Generic/Weapon_Attacks/Melee`;\n\n        let anim = `${file}/${item01}_${type01}_${tint}_${color}_800x600.webm`;\n\n        function castSpell(effect) {\n            game.user.targets.forEach((i, t) => {\n                canvas.fxmaster.drawSpecialToward(effect, myToken, t);\n\n            });\n        }\n        castSpell({\n            file: anim,\n            anchor: {\n                x: 0.4,\n                y: 0.5,\n            },\n            speed: 0,\n            angle: 0,\n            scale: {\n                x: Scale,\n                y: (Scale * plusOrMinus),\n            },\n        });\n\n        await wait(soundDelay);\n        switch (true) {\n            case (soundFile != \"example/sound/file.mp3\"):\n                AudioHelper.play({ src: soundFile, volume: 1.0, autoplay: true, loop: false }, true);\n                break;\n        }\n\n        switch (true) {\n            case (actorIncludes(\"Improved Divine Smite\")):\n                await wait((tmDelay - soundDelay) - 300);\n                canvas.fxmaster.playVideo(spellAnim2);\n                game.socket.emit('module.fxmaster', spellAnim2);\n                await wait(300);\n                TokenMagic.addUpdateFiltersOnTargeted(tmMacro);\n                // Calls Token Magic FX macros as defined in the switches above.\n                break;\n            default:\n                await wait(tmDelay - soundDelay);\n                TokenMagic.addUpdateFiltersOnTargeted(tmMacro);\n        }\n        // Checks if a firecolor was passed, and if so activates the burn TMFX on the target\n        switch (true) {\n            case (fireColor != \"pass\"):\n                TokenMagic.addUpdateFiltersOnTargeted(burn);\n                break;\n        }\n        // Waits a specified time before deleting all TMFX on the target\n        await wait(tmKill);\n        TokenMagic.deleteFiltersOnTargeted();\n    }\n}\nCast()","author":"cDoi3U5MyHp0uBW1","img":"icons/weapons/swords/greatsword-guard-gold-worn.webp","actorIds":[]}
{"_id":"hQXuyILmpHP1322w","name":"AllCreatureAttacks","permission":{"default":0,"OAAx1jKOg1dYBpA6":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.qkq4UjGgx7cHii5n"}},"scope":"global","command":"//Requires and Target to be Targeted\nif (game.user.targets.size == 0) ui.notifications.error('You must target at least one token');\n//Requires FX Master Module\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\nconst lastArg = args[args.length - 1];\nlet item = lastArg.item;\nlet itemName = item.name.toLowerCase();\nlet itemSource = item.data.source.toLowerCase();\nlet path00 = game.modules.get(\"jb2a_patreon\") === true ? \"JB2A_DnD5e\" : \"jb2a_patreon\";\n\nfunction itemIncludes(test) {\n    if (itemSource.includes(test) || itemName.includes(test)) return true;\n}\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nlet type01 = \"01\";\nlet tint = \"Regular\";\nlet color = \"Red\";\n\nswitch (true) {\n    case (itemIncludes(\"darkred\")):\n        type01 = \"01\";\n        tint = \"Dark\";\n        color = \"Red\";\n        break;\n    case (itemIncludes(\"red\")):\n        type01 = \"01\";\n        tint = \"Regular\";\n        color = \"Red\";\n        break;\n    case (itemIncludes(\"yellow\")):\n        type01 = \"01\";\n        switch (true) {\n            case (itemIncludes(\"bite\")):\n                tint = \"Regular\";\n                break;\n            default:\n                tint = \"Bright\";\n                break;\n        }\n        color = \"Yellow\";\n        break;\n    case (itemIncludes(\"purple\")):\n        type01 = \"01\";\n        switch (true) {\n            case (itemIncludes(\"bite\")):\n                tint = \"Regular\";\n                break;\n            default:\n                tint = \"Bright\";\n                break;\n        }\n        color = \"Purple\";\n        break;\n    case (itemIncludes(\"orange\")):\n        type01 = \"01\";\n        switch (true) {\n            case (itemIncludes(\"bite\")):\n                tint = \"Regular\";\n                break;\n            default:\n                tint = \"Bright\";\n                break;\n        }\n        color = \"Orange\";\n        break;\n    case (itemIncludes(\"green\")):\n        type01 = \"01\";\n        switch (true) {\n            case (itemIncludes(\"bite\")):\n                tint = \"Regular\";\n                break;\n            default:\n                tint = \"Bright\";\n                break;\n        }\n        color = \"Green\";\n        break;\n    case (itemIncludes(\"blue\")):\n        type01 = \"01\";\n        switch (true) {\n            case (itemIncludes(\"bite\")):\n                tint = \"Regular\";\n                break;\n            default:\n                tint = \"Bright\";\n                break;\n        }\n        color = \"Blue\";\n        break;\n}\n\nlet BloodyHitStutter =\n    [{\n        filterType: \"images\",\n        filterId: \"myMirrorImages\",\n        time: 0,\n        nbImage: 2,\n        alphaImg: 1.0,\n        alphaChr: 0.0,\n        autoDestroy: true,\n        blend: 4,\n        ampX: 0.03,\n        ampY: 0.03,\n        zOrder: 20,\n        animated:\n        {\n            time:\n            {\n                active: true,\n                speed: 0.070,\n                animType: \"move\",\n                loopDuration: 200,\n                loops: 2\n            },\n            anchorX:\n            {\n                animType: \"chaoticOscillation\",\n                loopDuration: 100,\n                val1: 0.40,\n                val2: 0.60,\n                loops: 4\n            }\n        }\n    },\n    {\n        filterType: \"splash\",\n        filterId: \"mySplash\",\n        rank: 5,\n        color: 0x990505,\n        padding: 80,\n        time: Math.random() * 1000,\n        seed: Math.random(),\n        splashFactor: 1,\n        spread: 0.4,\n        blend: 1,\n        dimX: 1,\n        dimY: 1,\n        cut: false,\n        textureAlphaBlend: true,\n        anchorX: 0.32 + (Math.random() * 0.36),\n        anchorY: 0.32 + (Math.random() * 0.36)\n    }];\n// Token Magic FX Definitions for passing inside the switch\nlet BloodSplat =\n    [{\n        filterType: \"splash\",\n        filterId: \"mySplash\",\n        rank: 5,\n        color: 0x990505,\n        padding: 80,\n        time: Math.random() * 1000,\n        seed: Math.random(),\n        splashFactor: 1,\n        spread: 0.4,\n        blend: 1,\n        dimX: 1,\n        dimY: 1,\n        cut: false,\n        textureAlphaBlend: true,\n        anchorX: 0.32 + (Math.random() * 0.36),\n        anchorY: 0.32 + (Math.random() * 0.36)\n    }];\n\n\nlet tmMacro;\nlet path;\n\nlet soundFile = `example/sound/file.mp3`;\nlet soundDelay = 50;\n\nswitch (true) {\n    case (itemIncludes(\"claw\")):\n        path = \"Claws\";\n        tmMacro = BloodSplat;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 50;\n        break;\n    case (itemIncludes(\"bite\")):\n        path = \"Bite\";\n        tmMacro = BloodyHitStutter;\n        soundFile = `example/sound/file.mp3`;\n        soundDelay = 50;\n        break;\n}\n\nasync function Cast() {\n    // Will play on any number of targeted tokens\n    var myStringArray = lastArg.targets;\n    var arrayLength = myStringArray.length;\n    for (var i = 0; i < arrayLength; i++) {\n        console.log(myStringArray[i]);\n\n        let mainTargetdata = myStringArray[i];\n        let mainTarget = canvas.tokens.get(mainTargetdata._id)\n        // Scales with target size. Can change divisor to increase or decrease animation\n        let tarScale = ((mainTarget.data.width + mainTarget.data.height) / 2);\n        // Comment out above and activate below if you wish to scale globally for consistency\n        //let tarScale = canvas.scene.data.grid/100;\n\n        let spellAnim =\n        {\n            //                         File path to animation\n            file: `modules/${path00}/Library/Generic/Creature/${path}_${type01}_${tint}_${color}_400x400.webm`,\n            position: mainTarget.center,\n            anchor: {\n                x: 0.5,\n                y: 0.5\n            },\n            angle: 0,\n            scale: {\n                x: tarScale,\n                y: tarScale\n            }\n        };\n        canvas.fxmaster.playVideo(spellAnim);\n        game.socket.emit('module.fxmaster', spellAnim);\n        await wait(soundDelay);\n        switch (true) {\n            case (soundFile != \"example/sound/file.mp3\"):\n                AudioHelper.play({ src: soundFile, volume: 1.0, autoplay: true, loop: false }, true);\n                break;\n        }\n\n\n    }\n    await wait(250);\n    TokenMagic.addUpdateFiltersOnTargeted(tmMacro);\n    await wait(2000);\n    TokenMagic.deleteFiltersOnTargeted();\n}\nCast()","author":"OAAx1jKOg1dYBpA6","img":"icons/environment/creatures/fish-angler-blue.webp","actorIds":[]}
